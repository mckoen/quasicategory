import Quasicategory._007F_1
import Quasicategory._007F.Tau
import Quasicategory._007F.Sigma

/-!

The second half of the proof of `007F`, which is much more technical.

-/

universe w v u

open CategoryTheory MorphismProperty Simplicial SSet PushoutProduct MonoidalCategory

variable {n : ‚Ñï}

open Subcomplex.unionProd in
noncomputable
def unionProd_toSSet_iso (A : Subcomplex Œî[n]):
    PushoutProduct.pt A.Œπ Œõ[2, 1].Œπ ‚âÖ
      (A.unionProd Œõ[2, 1]).toSSet :=
  (IsPushout.isoPushout (isPushout Œõ[2, 1] A)).symm ‚â™‚â´ symmIso _ _

open Subcomplex in
def œÉ.filtrationPushout_zero' (n : ‚Ñï) :
    Sq
      (œÉ.innerHornImage 0 0)
      (œÉ 0 0)
      (‚àÇŒî[n + 1].unionProd Œõ[2, 1])
      (filtration‚ÇÅ' (n + 1) ‚ä•) := by
  convert filtrationPushout_zero n
  simp [filtration‚ÇÅ', filtration‚ÇÅ, œÉ.eq_œÉ]
  rfl

open Subcomplex in
def œÑ.filtrationPushout_zero' (n : ‚Ñï) :
    Sq
      (œÑ.innerHornImage 0 0)
      (œÑ 0 0)
      (filtration‚ÇÅ' (n + 1) ‚ä§)
      (filtration‚ÇÇ' n ‚ä•) := by
  convert filtrationPushout_zero (n + 1)
  ¬∑ simp [filtration‚ÇÅ', filtration‚ÇÅ, œÉ.eq_œÉ]
    apply le_antisymm
    ¬∑ apply sup_le (le_sup_left) (le_sup_of_le_right _)
      apply iSup_le
      intro ‚ü®b, a‚ü©
      apply le_iSup‚ÇÇ_of_le ‚ü®b, by rw [Nat.mod_eq_of_lt (by omega)]; omega‚ü© a
      exact le_rfl
    ¬∑ apply sup_le (le_sup_left) (le_sup_of_le_right _)
      apply iSup‚ÇÇ_le
      intro ‚ü®b, hb‚ü© ‚ü®a, ha‚ü©
      rw [Nat.mod_eq_of_lt (by omega)] at hb
      apply le_iSup_of_le ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü©
      exact le_rfl
  ¬∑ simp [filtration‚ÇÇ', filtration‚ÇÅ', filtration‚ÇÉ, filtration‚ÇÅ, œÑ.eq_œÑ, œÉ.eq_œÉ]
    apply le_antisymm
    ¬∑ apply sup_le (le_sup_of_le_left (sup_le le_sup_left (le_sup_of_le_right _))) (le_sup_right)
      apply iSup_le
      intro ‚ü®b, a‚ü©
      apply le_iSup‚ÇÇ_of_le b a
      exact le_rfl
    ¬∑ apply sup_le (le_sup_of_le_left (sup_le le_sup_left (le_sup_of_le_right _))) (le_sup_right)
      apply iSup‚ÇÇ_le
      intro ‚ü®b, hb‚ü© ‚ü®a, ha‚ü©
      apply le_iSup_of_le ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü©
      exact le_rfl

open Subcomplex in
noncomputable
def image_arrow_iso_of_mono {X Y : SSet} (f : X ‚ü∂ Y) [Mono f] (A : Subcomplex X) :
    Arrow.mk (Subcomplex.homOfLE (image_le_range A f)) ‚âÖ Arrow.mk A.Œπ := by
  let h := IsIso.out (f := (toRangeSubcomplex (A.Œπ ‚â´ f)))
  let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h.choose_spec
  refine Arrow.isoMk ((isoOfEq (image_eq_range A f)) ‚â™‚â´ (asIso (toRangeSubcomplex (A.Œπ ‚â´ f))).symm)
    (asIso (toRangeSubcomplex f)).symm ?_
  simp
  change _ ‚â´ h.choose ‚â´ _ ‚â´ _ = _
  ext n ‚ü®y, ‚ü®x, ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©‚ü©‚ü©
  have := congr_fun (congr_app h‚ÇÅ n) ‚ü®x, hx‚ÇÅ‚ü©
  simp [Subcomplex.homOfLE, Subpresheaf.homOfLe, toRangeSubcomplex,
    Subpresheaf.toRange, Subpresheaf.lift, ‚Üê hx‚ÇÇ] at this ‚ä¢
  aesop

noncomputable
def œÉ.innerHornImage_arrowIso {a b : Fin n} (hab : a ‚â§ b) :
    (Arrow.mk (Subcomplex.homOfLE (œÉ.innerHornImage_le a b))) ‚âÖ (Arrow.mk Œõ[n + 1, a.succ.castSucc].Œπ) :=
  letI : Mono (f a b) := f_mono hab
  image_arrow_iso_of_mono _ _

noncomputable
def œÑ.innerHornImage_arrowIso {a b : Fin (n + 1)} (hab : a ‚â§ b) :
    (Arrow.mk (Subcomplex.homOfLE (œÑ.innerHornImage_le a b))) ‚âÖ (Arrow.mk Œõ[n + 2, a.succ.castSucc].Œπ) :=
  letI : Mono (g a b) := g_mono hab
  image_arrow_iso_of_mono _ _

instance {X Y Z : SSet} : Subsingleton ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z) where
  allEq f g := by
    ext _ ‚ü®_, ‚ü®x, hx‚ü©‚ü©
    simp at hx

instance {X Y Z : SSet} : Inhabited ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z) where
  default :=
    { app _ := fun ‚ü®_, ‚ü®_, hx‚ü©‚ü© ‚Ü¶ by simp at hx
      naturality _ _ _ := by
        ext ‚ü®_, ‚ü®_, hx‚ü©‚ü©
        simp at hx }

instance {X Y Z : SSet} : Unique ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z)  where
  uniq _ := Subsingleton.elim _ _

noncomputable
def SSet.Subcomplex.tensorBotIsInitial {X Y : SSet} : Limits.IsInitial (Y ‚äó (‚ä• : X.Subcomplex).toSSet) :=
  Limits.IsInitial.ofUnique _

noncomputable
def pt_terminal_iso :
    Limits.pushout (Œõ[2, 1].Œπ ‚ñ∑ (‚ä• : Œî[0].Subcomplex).toSSet) (Œõ[2, 1].toSSet ‚óÅ ((‚ä• : Œî[0].Subcomplex)).Œπ) ‚âÖ
      Œõ[2, 1].toSSet ‚äó Œî[0] where
  hom := Limits.pushout.desc (Limits.IsInitial.to Subcomplex.tensorBotIsInitial _) (ùüô _) (by aesop_cat)
  inv := Limits.pushout.inr _ _
  hom_inv_id := by
    apply Limits.pushout.hom_ext
    all_goals aesop_cat

noncomputable
def zero_unionProd_arrowIso' :
    Arrow.mk (Œõ[2, 1].unionProd (‚ä• : Œî[0].Subcomplex)).Œπ ‚âÖ
      Arrow.mk (Œõ[2, 1].Œπ ‚ñ∑ Œî[0]) := by
  refine Arrow.isoMk ((IsPushout.isoPushout (Subcomplex.unionProd.isPushout _ _)) ‚â™‚â´ pt_terminal_iso) (Iso.refl _) ?_
  apply IsPushout.hom_ext (Subcomplex.unionProd.isPushout _ _)
  ¬∑ aesop_cat
  ¬∑ simp [pt_terminal_iso]

noncomputable
def zero_unionProd_arrowIso :
    Arrow.mk ((‚ä• : Œî[0].Subcomplex).unionProd Œõ[2, 1]).Œπ ‚âÖ
      Arrow.mk (Œõ[2, 1].Œπ) := by
  refine ?_ ‚â™‚â´ zero_unionProd_arrowIso' ‚â™‚â´ ?_
  ¬∑ exact Arrow.isoMk (Subcomplex.unionProd.symmIso _ _) (Œ≤_ _ _) rfl
  ¬∑ exact Arrow.isoMk (stdSimplex.rightUnitor _) (stdSimplex.rightUnitor _) rfl

namespace CategoryTheory.MorphismProperty

variable {C : Type*} [Category C] (W : MorphismProperty C) [W.IsMultiplicative]

lemma map_mem_of_fin' {n : ‚Ñï} (F : Fin (n + 1) ‚•§ C)
    (hF : ‚àÄ (i : Fin n), W (F.map (homOfLE (i.castSucc_le_succ))))
    {i j : Fin (n + 1)} (f : i ‚ü∂ j) :
    W (F.map f) := by
  obtain ‚ü®i, hi‚ü© := i
  obtain ‚ü®j, hj‚ü© := j
  have h : i ‚â§ j := leOfHom f
  induction j with
  | zero =>
    have : i = 0 := Nat.eq_zero_of_le_zero h
    subst this
    have : f = ùüô _ := by aesop
    subst this
    simp only [homOfLE_refl, Functor.map_id]
    apply id_mem
  | succ j hj' =>
    cases lt_or_eq_of_le h
    ¬∑ next h =>
      have := @homOfLE_comp (Fin (n + 1)) _ ‚ü®i, hi‚ü© ‚ü®j, by omega‚ü© ‚ü®j + 1, hj‚ü© (by simp; omega) (by simp)
      change  W (F.map (homOfLE _))
      rw [‚Üê this, F.map_comp]
      apply comp_mem
      ¬∑ apply hj'
        omega
      ¬∑ exact hF ‚ü®j, by omega‚ü©
    ¬∑ next h =>
      subst h
      have : f = ùüô _ := by aesop
      subst this
      simp only [homOfLE_refl, Functor.map_id]
      apply id_mem

-- go from `‚ü®b, a‚ü© --> ‚ü®b, a'‚ü©` for `a ‚â§ a'`
lemma map_mem_of_sigma' {n : ‚Ñï} (F : (Œ£‚Çó (b : Fin (n + 1)), Fin b.succ) ‚•§ C)
    (hF : ‚àÄ (i : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ), W (F.map (homOfLE (Sigma.Lex.le_succ i))))
    {b : Fin (n + 1)} (a a' : Fin b.succ) (h : a ‚â§ a') :
    W (F.map (homOfLE (show ‚ü®b, a‚ü© ‚â§ ‚ü®b, a'‚ü© by right; simpa))) := by
  obtain ‚ü®b, hb‚ü© := b
  obtain ‚ü®a, ha‚ü© := a
  obtain ‚ü®a', ha'‚ü© := a'
  induction a' with
  | zero =>
    simp only [Fin.le_iff_val_le_val, le_zero_iff] at h
    subst h
    simp only [homOfLE_refl, Functor.map_id]
    apply id_mem
  | succ a' h' =>
  cases lt_or_eq_of_le h
  ¬∑ next h'' =>
    have one := h' (by omega) (by simp [Fin.lt_iff_val_lt_val, Fin.le_iff_val_le_val] at h'' ‚ä¢; omega)
    have two := hF ‚ü®‚ü®b, hb‚ü©, ‚ü®a', by omega‚ü©‚ü©
    have eq := Sigma.Lex.Fin.succ_eq_of_snd_lt_fst ‚ü®b, hb‚ü© ‚ü®a', by omega‚ü© (by simpa [Fin.lt_iff_val_lt_val] using ha')
    change _ = (‚ü®‚ü®b, hb‚ü©, ‚ü®a' + 1, ha'‚ü©‚ü© : (Œ£‚Çó (b : Fin (n + 1)), Fin b.succ)) at eq
    convert W.comp_mem _ _ one two
    exact eq.symm
    rw [‚Üê F.map_comp, homOfLE_comp]
    congr!
    exact eq.symm
  ¬∑ next h'' =>
    simp at h''
    subst h''
    simp only [homOfLE_refl, Functor.map_id]
    apply id_mem

lemma map_mem_of_fin {n : ‚Ñï} (F : Fin (n + 1) ‚•§ C)
    (hF : ‚àÄ (i : Fin n), W (F.map (homOfLE (i.castSucc_le_succ))))
    {i j : Fin (n + 1)} (f : i ‚ü∂ j) :
    W (F.map f) := by
  let P (k : ‚Ñï) := ‚àÄ (i j : ‚Ñï) (hj : j < n + 1) (hj' : i + k = j),
    W (F.map (homOfLE ((by simpa only [‚Üê hj'] using Nat.le_add_right i k) :
      ‚ü®i, lt_of_le_of_lt ((Nat.le_add_right i k).trans hj'.le) hj‚ü© ‚â§ ‚ü®j, hj‚ü©)))
  suffices ‚àÄ k, P k by
    obtain ‚ü®i, hi‚ü© := i
    obtain ‚ü®j, hj‚ü© := j
    have h : i ‚â§ j := leOfHom f
    obtain ‚ü®k, hk‚ü© := Nat.le.dest h
    exact this k i j hj hk
  intro k
  induction k with
  | zero =>
      intro j j' h h'
      obtain rfl : j = j' := by simpa using h'
      simp only [homOfLE_refl, Functor.map_id]
      apply id_mem
  | succ k hk =>
      intro i j hj hj'
      rw [‚Üê homOfLE_comp (x := (‚ü®i, by omega‚ü© : Fin (n + 1)))
        (y := ‚ü®i + k, by omega‚ü©) (z := ‚ü®j, by omega‚ü©) (Nat.le_add_right i k)
          (by simp only [Fin.le_def]; omega), F.map_comp]
      apply comp_mem
      ¬∑ exact hk i (i + k) (by omega) rfl
      ¬∑ rw [‚Üê add_assoc] at hj'
        subst hj'
        exact hF ‚ü®i + k, by omega‚ü©

lemma map_mem_of_sigma {n : ‚Ñï} (F : (Œ£‚Çó (b : Fin (n + 1)), Fin b.succ) ‚•§ C)
    (hF : ‚àÄ (i : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ), W (F.map (homOfLE (Sigma.Lex.le_succ i))))
    {i j : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ} (f : i ‚ü∂ j) :
    W (F.map f) := by
  have h : i ‚â§ j := leOfHom f
  obtain ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü© := i
  obtain ‚ü®‚ü®b', hb'‚ü©, ‚ü®a', ha'‚ü©‚ü© := j
  have hbb' : b ‚â§ b' := by
    cases h
    ¬∑ next h => exact h.le
    ¬∑ next => exact le_rfl
  obtain ‚ü®k, hk‚ü© := Nat.le.dest hbb'
  induction k with
  | zero =>
    subst hk
    change W (F.map (homOfLE _))
    apply W.map_mem_of_sigma' F hF
    simpa [Sigma.Lex.le_def] using h
  | succ k hk =>
    cases (lt_or_eq_of_le hbb')
    ¬∑ next hbb' =>
      have ba_bb : (toLex ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü© : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ) ‚â§ toLex ‚ü®‚ü®b, hb‚ü©, ‚ü®b, Nat.lt_add_one b‚ü©‚ü© := by
        simp at ha ‚ä¢
        right
        simp
        omega
      have b'0_b'a' : (toLex ‚ü®‚ü®b', hb'‚ü©, ‚ü®0, Nat.zero_lt_succ b'‚ü©‚ü© : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ) ‚â§ toLex ‚ü®‚ü®b', hb'‚ü©, ‚ü®a', ha'‚ü©‚ü© := by
        right
        simp
      have bb_b'0 : (toLex ‚ü®‚ü®b, hb‚ü©, ‚ü®b, Nat.lt_add_one b‚ü©‚ü© : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ) ‚â§ toLex ‚ü®‚ü®b', hb'‚ü©, ‚ü®0, Nat.zero_lt_succ b'‚ü©‚ü© := by
        left
        simpa
      suffices W (F.map (homOfLE bb_b'0)) by
        have := (W.comp_mem (F.map <| homOfLE ba_bb) (F.map (homOfLE bb_b'0)) ?_ this)
        rw [‚Üê F.map_comp, homOfLE_comp] at this
        have := W.comp_mem _ (F.map <| homOfLE b'0_b'a') (this) ?_
        rw [‚Üê F.map_comp, homOfLE_comp] at this
        exact this
        ¬∑ apply W.map_mem_of_sigma' F hF
          simp
        ¬∑ apply W.map_mem_of_sigma' F hF
          simp at ha ‚ä¢
          omega
      subst hk
      let P (k : ‚Ñï) := ‚àÄ (b : ‚Ñï) (hk : 0 < k) (hbk : b + k < n + 1),
        W (F.map (homOfLE (show toLex ‚ü®‚ü®b, Nat.lt_of_add_right_lt hbk‚ü©, ‚ü®b, Nat.lt_add_one _‚ü©‚ü© ‚â§ toLex ‚ü®‚ü®b + k, hbk‚ü©, ‚ü®0, Nat.zero_lt_succ _‚ü©‚ü© by left; simpa)))
      suffices ‚àÄ (k : ‚Ñï), P k by
        exact this (k + 1) b (Nat.zero_lt_succ _) (by omega)
      intro k b hk hbk
      induction k with
      | zero => omega
      | succ k hk =>
        induction k with
        | zero =>
          have goal := hF (toLex ‚ü®‚ü®b, Nat.lt_of_add_right_lt hbk‚ü©, ‚ü®b, Nat.lt_add_one _‚ü©‚ü©)
          convert (config := .unfoldSameFun) goal
          all_goals exact (Sigma.Lex.Fin.succ_eq_of_lt_last ‚ü®b, Nat.lt_of_add_right_lt hbk‚ü© (by simp [Fin.lt_iff_val_lt_val]; omega)).symm
        | succ k hk' =>
          rename_i hk''
          have goal := hk'' (by omega) (by omega)
          have := @homOfLE_comp (Œ£‚Çó (b : Fin (n + 1)), Fin ‚Üëb.succ) _ ‚ü®‚ü®b, Nat.lt_of_add_right_lt hbk‚ü©, ‚ü®b, Nat.lt_add_one _‚ü©‚ü© ‚ü®‚ü®b + k + 1, by omega‚ü©, ‚ü®0, by simp‚ü©‚ü© ‚ü®‚ü®b + (k + 1 + 1), hbk‚ü©, ‚ü®0, by simp‚ü©‚ü© (by left; simp; omega) (by left; simp; omega)
          rw [‚Üê this, F.map_comp]
          apply comp_mem
          ¬∑ exact goal
          ¬∑ have := @homOfLE_comp (Œ£‚Çó (b : Fin (n + 1)), Fin ‚Üëb.succ) _ ‚ü®‚ü®b + k + 1, by omega‚ü©, ‚ü®0, by simp‚ü©‚ü© ‚ü®‚ü®b + k + 1, by omega‚ü©, ‚ü®b + k + 1, by simp‚ü©‚ü© ‚ü®‚ü®b + (k + 1 + 1), hbk‚ü©, ‚ü®0, by simp‚ü©‚ü© (by right; simp) (by left; simp; omega)
            rw [‚Üê this, F.map_comp]
            apply comp_mem
            ¬∑ apply W.map_mem_of_sigma' F hF
              simp
            ¬∑ have goal := hF ‚ü®‚ü®b + k + 1, by omega‚ü©, ‚ü®b + k + 1, by simp‚ü©‚ü©
              convert (config := .unfoldSameFun) goal
              all_goals exact (Sigma.Lex.Fin.succ_eq_of_lt_last ‚ü®b + k + 1, by omega‚ü© (by simp [Fin.lt_iff_val_lt_val]; omega)).symm
    ¬∑ next hbb' =>
      subst hbb'
      apply W.map_mem_of_sigma' F hF
      omega

end CategoryTheory.MorphismProperty

open Subcomplex in
lemma filtration‚ÇÅ_innerAnodyne_zero : innerHornInclusions.saturation
    (Subcomplex.homOfLE (filtration‚ÇÅ_monotone (n + 1) (Sigma.Lex.le_succ ‚ü®0, ‚ü®0, Nat.zero_lt_succ _‚ü©‚ü©))) := by
  induction n with
  | zero =>
    dsimp
    apply id_mem
  | succ n _ =>
    refine (arrow_mk_iso_iff _ ?_).2 <| of_isPushout (Subcomplex.Sq.isPushout (œÉ.filtrationPushout_join (n + 1) 1)).flip
      ((arrow_mk_iso_iff _ (œÉ.innerHornImage_arrowIso (Fin.zero_le _))).2 (.of _ (.mk Fin.zero_lt_one (Fin.castSucc_lt_last _))))
    ¬∑ refine Arrow.isoMk ?_ ?_ ?_
      ¬∑ apply isoOfEq
        dsimp only [Arrow.mk]
        rw [filtration‚ÇÅ'_eq']
        have := filtration‚ÇÇ_last (0 : Fin (n + 2))
        dsimp only [Fin.val_zero] at this
        rw [this]
        congr
      ¬∑ dsimp only [Arrow.mk]
        apply isoOfEq
        have A := filtration‚ÇÅ'_eq' (n := n + 1) 1
        have B := Sigma.Lex.Fin.succ_bot_eq (n := n + 1)
        rw [B, A]
      ¬∑ dsimp [Subcomplex.homOfLE]
        rfl

open Subcomplex in
lemma filtration‚ÇÇ_innerAnodyne_zero : innerHornInclusions.saturation
    (Subcomplex.homOfLE (filtration‚ÇÇ_monotone n (Sigma.Lex.le_succ ‚ü®0, ‚ü®0, Nat.zero_lt_succ _‚ü©‚ü©))) := by
  refine (arrow_mk_iso_iff _ ?_).2 <| of_isPushout (Subcomplex.Sq.isPushout (œÑ.filtrationPushout_join (1 : Fin (n + 2)))).flip
    ((arrow_mk_iso_iff _ (œÑ.innerHornImage_arrowIso (Fin.zero_le _))).2 (.of _ (.mk Fin.zero_lt_one (Fin.castSucc_lt_last _))))
  refine Arrow.isoMk ?_ ?_ ?_
  ¬∑ apply isoOfEq
    dsimp only [Arrow.mk]
    rw [filtration‚ÇÇ_eq']
    have := filtration‚ÇÑ_last (0 : Fin (n + 2))
    dsimp only [Fin.val_zero] at this
    rw [this]
    congr
  ¬∑ dsimp only [Arrow.mk]
    apply isoOfEq
    have A := filtration‚ÇÇ_eq' (n := n) 1 ‚ü®0, Nat.zero_lt_succ _‚ü©
    have B := Sigma.Lex.Fin.succ_bot_eq (n := n + 1)
    rw [B, A]
  ¬∑ dsimp [Subcomplex.homOfLE]
    rfl

open Subcomplex in
lemma filtration‚ÇÇ_innerAnodyne_last : innerHornInclusions.saturation
    (Subcomplex.homOfLE (filtration‚ÇÇ_monotone n (Sigma.Lex.le_succ ‚ü®Fin.last (n + 1), Fin.last (n + 1)‚ü©))) := by
  refine (arrow_mk_iso_iff _ ?_).2 <| id_mem innerHornInclusions.saturation (filtration‚ÇÇ' n ‚ü®Fin.last (n + 1), Fin.last (n + 1)‚ü©).toSSet
  exact Arrow.isoMk (isoOfEq rfl) (isoOfEq (congrArg (filtration‚ÇÇ' n) Sigma.Lex.Fin.succ_last_eq_last))

open Subcomplex in
lemma filtration‚ÇÅ_innerAnodyne_last : innerHornInclusions.saturation
    (Subcomplex.homOfLE (filtration‚ÇÅ_monotone (n + 1) (Sigma.Lex.le_succ ‚ü®Fin.last n, Fin.last n‚ü©))) := by
  refine (arrow_mk_iso_iff _ ?_).2 <| id_mem innerHornInclusions.saturation (filtration‚ÇÅ' (n + 1) ‚ü®Fin.last n, Fin.last n‚ü©).toSSet
  exact Arrow.isoMk (isoOfEq rfl) (isoOfEq (congrArg (filtration‚ÇÅ' (n + 1)) Sigma.Lex.Fin.succ_last_eq_last))

open Subcomplex in
lemma filtration‚ÇÅ_innerAnodyne {i j : Œ£‚Çó (b : Fin (n + 1)), Fin b.succ} (h : i ‚â§ j) :
    innerHornInclusions.saturation (homOfLE (filtration‚ÇÅ_monotone (n + 1) h)) := by
  refine innerHornInclusions.saturation.map_mem_of_sigma
    ((filtration‚ÇÅ_monotone (n + 1)).functor ‚ãô Subcomplex.forget _) ?_ (homOfLE h)
  dsimp only [Fin.val_succ, Functor.comp_obj, Monotone.functor_obj, Subcomplex.forget_obj,
    Fin.succ_mk, Fin.zero_eta, homOfLE_leOfHom, Functor.comp_map, forget_map]
  intro i
  by_cases h0 : ‚ä• < i
  by_cases hn : i < ‚ä§
  ¬∑ have œÉsq := œÉ.filtrationPushout_intermediate' i h0 hn
    rw [œÉ.eq_œÉ] at œÉsq
    refine of_isPushout (Subcomplex.Sq.isPushout œÉsq).flip
      ((arrow_mk_iso_iff _ (œÉ.innerHornImage_arrowIso ?_)).2
        (.of _ (.mk (compare_gt_iff_gt.mp rfl) (?_))))
    ¬∑ obtain ‚ü®b, a‚ü© := i
      have := Order.le_of_lt_succ (Sigma.Lex.succ ‚ü®b, a‚ü©).2.2
      simpa
    ¬∑ obtain ‚ü®b, a‚ü© := i
      rw [Fin.lt_iff_val_lt_val]
      simp only [Fin.val_succ, Fin.succ_mk, Fin.zero_eta, Fin.castSucc_mk,
        Fin.val_last, add_lt_add_iff_right]
      omega
  ¬∑ simp at hn
    rw [Sigma.Lex.top_eq_last] at hn
    subst hn
    exact filtration‚ÇÅ_innerAnodyne_last
  ¬∑ simp at h0
    rw [Sigma.Lex.bot_eq_zero] at h0
    subst h0
    exact filtration‚ÇÅ_innerAnodyne_zero

open Subcomplex in
lemma filtration‚ÇÇ_innerAnodyne {i j : Œ£‚Çó (b : Fin (n + 2)), Fin b.succ} (h : i ‚â§ j) :
    innerHornInclusions.saturation (homOfLE (filtration‚ÇÇ_monotone (n := n) h)) := by
  refine innerHornInclusions.saturation.map_mem_of_sigma
    ((filtration‚ÇÇ_monotone n).functor ‚ãô Subcomplex.forget _) ?_ (homOfLE h)
  dsimp only [Fin.val_succ, Functor.comp_obj, Monotone.functor_obj, Subcomplex.forget_obj,
    Fin.succ_mk, Fin.zero_eta, homOfLE_leOfHom, Functor.comp_map, forget_map]
  intro i
  by_cases h0 : ‚ä• < i
  by_cases hn : i < ‚ä§
  ¬∑ have œÑsq := œÑ.filtrationPushout_intermediate' i h0 hn
    rw [œÑ.eq_œÑ] at œÑsq
    refine of_isPushout (Subcomplex.Sq.isPushout œÑsq).flip
      ((arrow_mk_iso_iff _ (œÑ.innerHornImage_arrowIso ?_)).2
        (.of _ (.mk (compare_gt_iff_gt.mp rfl) (?_))))
    ¬∑ obtain ‚ü®b, a‚ü© := i
      have := Order.le_of_lt_succ (Sigma.Lex.succ ‚ü®b, a‚ü©).2.2
      simpa
    ¬∑ obtain ‚ü®b, a‚ü© := i
      rw [Fin.lt_iff_val_lt_val]
      simp only [Fin.val_succ, Fin.succ_mk, Fin.zero_eta, Fin.castSucc_mk,
        Fin.val_last, add_lt_add_iff_right]
      omega
  ¬∑ simp at hn
    rw [Sigma.Lex.top_eq_last] at hn
    subst hn
    exact filtration‚ÇÇ_innerAnodyne_last
  ¬∑ simp at h0
    rw [Sigma.Lex.bot_eq_zero] at h0
    subst h0
    exact filtration‚ÇÇ_innerAnodyne_zero

open Subcomplex in
lemma unionProd_Œπ_innerAnodyne : innerAnodyne.{u} (‚àÇŒî[n].unionProd Œõ[2, 1]).Œπ := by
  rw [innerAnodyne_eq]
  induction n with
  | zero =>
    rw [boundary_zero]
    exact (arrow_mk_iso_iff _ zero_unionProd_arrowIso).2 <| .of _ <| .mk Fin.zero_lt_one Fin.one_lt_last
  | succ n _ =>
    let œÉsq := (œÉ.filtrationPushout_zero' n)
    let œÑsq := (œÑ.filtrationPushout_zero' n)
    change innerHornInclusions.saturation
        ((homOfLE œÉsq.le‚ÇÉ‚ÇÑ) ‚â´
        (homOfLE (filtration‚ÇÅ_monotone (n + 1) bot_le)) ‚â´
        (homOfLE œÑsq.le‚ÇÉ‚ÇÑ) ‚â´
        (homOfLE (filtration‚ÇÇ_monotone n bot_le)) ‚â´
        (isoOfEq filtration‚ÇÇ_last').hom ‚â´
        (topIso _).hom)
    refine comp_mem _ _ _ ?_ <|
      comp_mem _ _ _ (filtration‚ÇÅ_innerAnodyne bot_le) <|
      comp_mem _ _ _ ?_ <|
      comp_mem _ _ _ (filtration‚ÇÇ_innerAnodyne bot_le) <|
      comp_mem _ _ _ (of_isIso _ _) (of_isIso _ _)
    ¬∑ exact of_isPushout œÉsq.isPushout.flip
        ((arrow_mk_iso_iff _ (œÉ.innerHornImage_arrowIso (Fin.zero_le 0))).2
          (.of _ (.mk Fin.zero_lt_one Fin.one_lt_last)))
    ¬∑ exact of_isPushout œÑsq.isPushout.flip
        ((arrow_mk_iso_iff _ (œÑ.innerHornImage_arrowIso (Fin.zero_le 0))).2
          (.of _ (.mk Fin.zero_lt_one Fin.one_lt_last)))

noncomputable
def arrow_unionProd_iso : Arrow.mk (‚àÇŒî[n].Œπ ‚ó´ Œõ[2, 1].Œπ) ‚âÖ Arrow.mk (‚àÇŒî[n].unionProd Œõ[2, 1]).Œπ := by
  refine Arrow.isoMk (unionProd_toSSet_iso _) (Œ≤_ Œî[2] Œî[n]) ?_
  simp [unionProd_toSSet_iso]
  apply Limits.pushout.hom_ext
  all_goals aesop

lemma innerAnodyne_eq_T : innerAnodyne.{u} = (saturation.{u} bdryHornPushouts) := by
  apply le_antisymm
  all_goals rw [innerAnodyne_eq, ‚Üê WeaklySaturated.le_iff]
  ¬∑ intro _ _ f ‚ü®h0, hn‚ü©
    exact .retract (hornRetract _ h0 hn) (monomorphisms_le_S _ (.infer_property _))
  ¬∑ intro _ _ f ‚ü®n‚ü©
    rw [‚Üê innerAnodyne_eq]
    exact (arrow_mk_iso_iff _ arrow_unionProd_iso).2 unionProd_Œπ_innerAnodyne

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    innerAnodyne (i ‚ó´ Œõ[2, 1].Œπ) := by
  rw [innerAnodyne_eq_T]
  exact monomorphisms_le_S i (.infer_property _)

-- `007F` (b)
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet) [WeaklySaturated.{u} S] :
    (bdryHornPushouts ‚â§ S) ‚Üî (innerAnodyne.{u} ‚â§ S) := by
  constructor
  ¬∑ simp [innerAnodyne_eq_T, ‚Üê WeaklySaturated.le_iff]
  ¬∑ exact fun h _ _ _ ‚ü®m‚ü© ‚Ü¶ h _ (monoPushout_innerAnodyne ‚àÇŒî[m].Œπ)
