import Quasicategory._007F_1
import Quasicategory._007F.Tau

/-!

The second half of the proof of `007F`, which is much more technical.

-/

universe w v u

open CategoryTheory MorphismProperty Simplicial SSet PushoutProduct

variable {n : ℕ}

#synth LinearOrder (Σₗ (b : Fin (n + 1)), Fin b.succ)
#synth OrderBot (Σₗ (b : Fin (n + 1)), Fin b.succ)
#synth SuccOrder (Σₗ (b : Fin (n + 1)), Fin b.succ)
#synth WellFoundedLT (Σₗ (b : Fin (n + 1)), Fin b.succ)

#check HomotopicalAlgebra.RelativeCellComplex
#check HomotopicalAlgebra.RelativeCellComplex.transfiniteCompositionOfShape

lemma innerAnodyne_eq_T : innerAnodyne.{u} = (saturation.{u} bdryHornPushouts) := by
  rw [innerAnodyne_eq]
  apply le_antisymm
  all_goals rw [← WeaklySaturated.le_iff]
  · intro _ _ f hf
    cases hf with
    | @mk n i h0 hn =>
      apply WeaklySaturatedClass.retract (hornRetract i h0 hn) -- reduces to showing horn inclusion is a retract of a boundary pushout maps
      exact monomorphisms_le_S _ (monomorphisms.infer_property _)
  · intro _ _ f ⟨m⟩
    rw [← innerAnodyne_eq]
    -- show that the pushout product of ∂Δ[m] ⟶ Δ[m] and Λ[2, 1] ⟶ Δ[2] is generated by inner anodyne maps
    sorry

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ⟶ B) [Mono i] :
    innerAnodyne (i ◫ Λ[2, 1].ι) := by
  rw [innerAnodyne_eq_T]
  exact monomorphisms_le_S i (.infer_property _)

-- `007F` (b)
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet) [WeaklySaturated.{u} S] :
    (bdryHornPushouts ≤ S) ↔ (innerAnodyne.{u} ≤ S) := by
  constructor
  · simp [innerAnodyne_eq_T, ← WeaklySaturated.le_iff]
  · exact fun h _ _ _ ⟨m⟩ ↦ h _ (monoPushout_innerAnodyne ∂Δ[m].ι)
