import Quasicategory._007F_1
import Quasicategory._007F.Tau
import Quasicategory._007F.Sigma

/-!

The second half of the proof of `007F`, which is much more technical.

-/

universe w v u

open CategoryTheory MorphismProperty Simplicial SSet PushoutProduct MonoidalCategory

variable {n : ‚Ñï}

open Subcomplex.unionProd in
noncomputable
def unionProd_toSSet_iso (A : Subcomplex Œî[n]):
    PushoutProduct.pt A.Œπ Œõ[2, 1].Œπ ‚âÖ
      (A.unionProd Œõ[2, 1]).toSSet :=
  (IsPushout.isoPushout (isPushout Œõ[2, 1] A)).symm ‚â™‚â´ symmIso _ _

open Subcomplex in
def œÉ.filtrationPushout_zero' (n : ‚Ñï) :
    Sq
      (œÉ.innerHornImage 0 0)
      (œÉ 0 0)
      (‚àÇŒî[n + 1].unionProd Œõ[2, 1])
      (filtration‚ÇÅ' ‚ä•) := by
  convert filtrationPushout_zero n
  simp [filtration‚ÇÅ', filtration‚ÇÅ, œÉ.eq_œÉ]
  rfl

open Subcomplex in
def œÑ.filtrationPushout_zero' (n : ‚Ñï) :
    Sq
      (œÑ.innerHornImage 0 0)
      (œÑ 0 0)
      (filtration‚ÇÅ' (n := n + 1) ‚ä§)
      (filtration‚ÇÇ' ‚ä•) := by
  convert filtrationPushout_zero (n + 1)
  ¬∑ simp [filtration‚ÇÅ', filtration‚ÇÅ, œÉ.eq_œÉ]
    apply le_antisymm
    ¬∑ apply sup_le (le_sup_left) (le_sup_of_le_right _)
      apply iSup_le
      intro ‚ü®b, a‚ü©
      apply le_iSup‚ÇÇ_of_le ‚ü®b, by rw [Nat.mod_eq_of_lt (by omega)]; omega‚ü© a
      exact le_rfl
    ¬∑ apply sup_le (le_sup_left) (le_sup_of_le_right _)
      apply iSup‚ÇÇ_le
      intro ‚ü®b, hb‚ü© ‚ü®a, ha‚ü©
      rw [Nat.mod_eq_of_lt (by omega)] at hb
      apply le_iSup_of_le ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü©
      exact le_rfl
  ¬∑ simp [filtration‚ÇÇ', filtration‚ÇÅ', filtration‚ÇÉ, filtration‚ÇÅ, œÑ.eq_œÑ, œÉ.eq_œÉ]
    apply le_antisymm
    ¬∑ apply sup_le (le_sup_of_le_left (sup_le le_sup_left (le_sup_of_le_right _))) (le_sup_right)
      apply iSup_le
      intro ‚ü®b, a‚ü©
      apply le_iSup‚ÇÇ_of_le b a
      exact le_rfl
    ¬∑ apply sup_le (le_sup_of_le_left (sup_le le_sup_left (le_sup_of_le_right _))) (le_sup_right)
      apply iSup‚ÇÇ_le
      intro ‚ü®b, hb‚ü© ‚ü®a, ha‚ü©
      apply le_iSup_of_le ‚ü®‚ü®b, hb‚ü©, ‚ü®a, ha‚ü©‚ü©
      exact le_rfl

open Subcomplex in
noncomputable
def image_arrow_iso_of_mono {X Y : SSet} (f : X ‚ü∂ Y) [Mono f] (A : Subcomplex X) :
    Arrow.mk (Subcomplex.homOfLE (image_le_range A f)) ‚âÖ Arrow.mk A.Œπ := by
  let h := IsIso.out (f := (toRangeSubcomplex (A.Œπ ‚â´ f)))
  let ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© := h.choose_spec
  refine Arrow.isoMk ((isoOfEq (image_eq_range A f)) ‚â™‚â´ (asIso (toRangeSubcomplex (A.Œπ ‚â´ f))).symm)
    (asIso (toRangeSubcomplex f)).symm ?_
  simp
  change _ ‚â´ h.choose ‚â´ _ ‚â´ _ = _
  ext n ‚ü®y, ‚ü®x, ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©‚ü©‚ü©
  have := congr_fun (congr_app h‚ÇÅ n) ‚ü®x, hx‚ÇÅ‚ü©
  simp [Subcomplex.homOfLE, Subpresheaf.homOfLe, toRangeSubcomplex,
    Subpresheaf.toRange, Subpresheaf.lift, ‚Üê hx‚ÇÇ] at this ‚ä¢
  aesop

noncomputable
def œÉ.innerHornImage_arrowIso {a b : Fin n} (hab : a ‚â§ b) :
    (Arrow.mk (Subcomplex.homOfLE (œÉ.innerHornImage_le a b))) ‚âÖ (Arrow.mk Œõ[n + 1, a.succ.castSucc].Œπ) :=
  letI : Mono (f a b) := f_mono hab
  image_arrow_iso_of_mono _ _

noncomputable
def œÑ.innerHornImage_arrowIso {a b : Fin (n + 1)} (hab : a ‚â§ b) :
    (Arrow.mk (Subcomplex.homOfLE (œÑ.innerHornImage_le a b))) ‚âÖ (Arrow.mk Œõ[n + 2, a.succ.castSucc].Œπ) :=
  letI : Mono (g a b) := g_mono hab
  image_arrow_iso_of_mono _ _

instance {X Y Z : SSet} : Subsingleton ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z) where
  allEq f g := by
    ext _ ‚ü®_, ‚ü®x, hx‚ü©‚ü©
    simp at hx

instance {X Y Z : SSet} : Inhabited ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z) where
  default :=
    { app _ := fun ‚ü®_, ‚ü®_, hx‚ü©‚ü© ‚Ü¶ by simp at hx
      naturality _ _ _ := by
        ext ‚ü®_, ‚ü®_, hx‚ü©‚ü©
        simp at hx }

instance {X Y Z : SSet} : Unique ((Y ‚äó (‚ä• : X.Subcomplex).toSSet) ‚ü∂ Z)  where
  uniq _ := Subsingleton.elim _ _

noncomputable
def SSet.Subcomplex.tensorBotIsInitial {X Y : SSet} : Limits.IsInitial (Y ‚äó (‚ä• : X.Subcomplex).toSSet) :=
  Limits.IsInitial.ofUnique _

noncomputable
def pt_terminal_iso :
    Limits.pushout (Œõ[2, 1].Œπ ‚ñ∑ (‚ä• : Œî[0].Subcomplex).toSSet) (Œõ[2, 1].toSSet ‚óÅ ((‚ä• : Œî[0].Subcomplex)).Œπ) ‚âÖ
      Œõ[2, 1].toSSet ‚äó Œî[0] where
  hom := Limits.pushout.desc (Limits.IsInitial.to Subcomplex.tensorBotIsInitial _) (ùüô _) (by aesop_cat)
  inv := Limits.pushout.inr _ _
  hom_inv_id := by
    apply Limits.pushout.hom_ext
    all_goals aesop_cat

noncomputable
def zero_unionProd_arrowIso' :
    Arrow.mk (Œõ[2, 1].unionProd (‚ä• : Œî[0].Subcomplex)).Œπ ‚âÖ
      Arrow.mk (Œõ[2, 1].Œπ ‚ñ∑ Œî[0]) := by
  refine Arrow.isoMk ((IsPushout.isoPushout (Subcomplex.unionProd.isPushout _ _)) ‚â™‚â´ pt_terminal_iso) (Iso.refl _) ?_
  apply IsPushout.hom_ext (Subcomplex.unionProd.isPushout _ _)
  ¬∑ aesop_cat
  ¬∑ simp [pt_terminal_iso]

noncomputable
def zero_unionProd_arrowIso :
    Arrow.mk ((‚ä• : Œî[0].Subcomplex).unionProd Œõ[2, 1]).Œπ ‚âÖ
      Arrow.mk (Œõ[2, 1].Œπ) := by
  refine ?_ ‚â™‚â´ zero_unionProd_arrowIso' ‚â™‚â´ ?_
  ¬∑ exact Arrow.isoMk (Subcomplex.unionProd.symmIso _ _) (Œ≤_ _ _) rfl
  ¬∑ exact Arrow.isoMk (stdSimplex.rightUnitor _) (stdSimplex.rightUnitor _) rfl

/-
lemma filtration‚ÇÅ_to_succ_mem (i : Fin (n + 1)) :
    anodyneExtensions (Subcomplex.homOfLE (monotone_filtration‚ÇÅ.{u} i.castSucc_le_succ)) := by
  have := IsPushout.of_isColimit
    (Subcomplex.isColimitPushoutCoconeOfPullback (ŒπSimplex i) (filtration‚ÇÅ.{u} i.castSucc)
      (filtration‚ÇÅ.{u} i.succ) (horn.{u} (n + 1) i.succ) ‚ä§
      (by simpa using (filtration‚ÇÅ_preimage_ŒπSimplex i).symm)
      (by
        simp only [Subcomplex.image_top,
          filtration‚ÇÅ_succ, Subcomplex.ofSimplex_eq_range]))
  exact MorphismProperty.of_isPushout (P := anodyneExtensions) this
    (anodyneExtensions.{u}.comp_mem _ _
      (horn_Œπ_mem n i.succ) (of_isIso ((Subcomplex.topIso _).inv)))

lemma filtation‚ÇÅ_map_mem {i j : Fin (n + 2)} (h : i ‚â§ j) :
    anodyneExtensions (Subcomplex.homOfLE (monotone_filtration‚ÇÅ.{u} h)) :=
  anodyneExtensions.map_mem_of_fin
    ((monotone_filtration‚ÇÅ.{u} (n := n)).functor ‚ãô Subcomplex.forget _) filtration‚ÇÅ_to_succ_mem
      (homOfLE h)

variable (n) in
lemma mem‚ÇÅ :
    anodyneExtensions (Subcomplex.unionProd.{u} (stdSimplex.face {(1 : Fin 2)})
      (boundary n)).Œπ := by
  change anodyneExtensions
    ((Subcomplex.isoOfEq (filtration‚ÇÅ_zero.{u} n)).inv ‚â´
          (Subcomplex.homOfLE (monotone_filtration‚ÇÅ.{u} (by simp))) ‚â´
          (Subcomplex.isoOfEq (filtration‚ÇÅ_last.{u} n)).hom ‚â´
          (Subcomplex.topIso _).hom)
  refine anodyneExtensions.comp_mem _ _ ?_
    (anodyneExtensions.comp_mem _ _ (filtation‚ÇÅ_map_mem (by simp))
    (anodyneExtensions.comp_mem _ _ ?_ ?_))
  all_goals apply of_isIso
-/

namespace CategoryTheory.MorphismProperty

variable {C : Type*} [Category C] (W : MorphismProperty C) [W.IsMultiplicative]

lemma map_mem_of_fin {n : ‚Ñï} (F : Fin (n + 1) ‚•§ C)
    (hF : ‚àÄ (i : Fin n), W (F.map (homOfLE (i.castSucc_le_succ))))
    {i j : Fin (n + 1)} (f : i ‚ü∂ j) :
    W (F.map f) := by
  let P (k : ‚Ñï) := ‚àÄ (i j : ‚Ñï) (hj : j < n + 1) (hj' : i + k = j),
    W (F.map (homOfLE ((by simpa only [‚Üê hj'] using Nat.le_add_right i k) :
      ‚ü®i, lt_of_le_of_lt ((Nat.le_add_right i k).trans hj'.le) hj‚ü© ‚â§ ‚ü®j, hj‚ü©)))
  suffices ‚àÄ k, P k by
    obtain ‚ü®i, hi‚ü© := i
    obtain ‚ü®j, hj‚ü© := j
    have h : i ‚â§ j := leOfHom f
    obtain ‚ü®k, hk‚ü© := Nat.le.dest h
    exact this k i j (by omega) hk
  intro k
  induction k with
  | zero =>
      intro j j' h h'
      obtain rfl : j = j' := by simpa using h'
      simp only [homOfLE_refl, Functor.map_id]
      apply id_mem
  | succ k hk =>
      intro i j hj hj'
      rw [‚Üê homOfLE_comp (x := (‚ü®i, by omega‚ü© : Fin (n + 1)))
        (y := ‚ü®i + k, by omega‚ü©) (z := ‚ü®j, by omega‚ü©) (Nat.le_add_right i k)
          (by simp only [Fin.le_def]; omega), F.map_comp]
      apply comp_mem
      ¬∑ exact hk i (i + k) (by omega) rfl
      ¬∑ rw [‚Üê add_assoc] at hj'
        subst hj'
        exact hF ‚ü®i + k, by omega‚ü©

end CategoryTheory.MorphismProperty

open Subcomplex in
lemma filtration‚ÇÅ_innerAnodyne :
    innerHornInclusions.saturation (homOfLE (filtration‚ÇÅ_monotone (n := n + 1) (OrderBot.bot_le ‚ä§))) := by
  sorry

open Subcomplex in
lemma filtration‚ÇÇ_innerAnodyne :
    innerHornInclusions.saturation (homOfLE (filtration‚ÇÇ_monotone (n := n) (OrderBot.bot_le ‚ä§))) := by
  sorry

open Subcomplex in
lemma unionProd_Œπ_innerAnodyne : innerAnodyne.{u} (‚àÇŒî[n].unionProd Œõ[2, 1]).Œπ := by
  rw [innerAnodyne_eq]
  cases n
  ¬∑ rw [boundary_zero]
    exact (arrow_mk_iso_iff _ zero_unionProd_arrowIso).2 <| .of _ <| .mk Fin.zero_lt_one Fin.one_lt_last
  next n =>
  let œÉsq := (œÉ.filtrationPushout_zero' n)
  let œÑsq := (œÑ.filtrationPushout_zero' n)
  change innerHornInclusions.saturation
      ((homOfLE œÉsq.le‚ÇÉ‚ÇÑ) ‚â´
      (homOfLE (filtration‚ÇÅ_monotone bot_le)) ‚â´
      (homOfLE œÑsq.le‚ÇÉ‚ÇÑ) ‚â´
      (homOfLE (filtration‚ÇÇ_monotone bot_le)) ‚â´
      (isoOfEq filtration‚ÇÇ_last').hom ‚â´
      (topIso _).hom)
  refine comp_mem _ _ _ ?_ <|
    comp_mem _ _ _ filtration‚ÇÅ_innerAnodyne <|
    comp_mem _ _ _ ?_ <|
    comp_mem _ _ _ filtration‚ÇÇ_innerAnodyne <|
    comp_mem _ _ _ (of_isIso _ _) (of_isIso _ _)
  ¬∑ exact of_isPushout œÉsq.isPushout.flip
      ((arrow_mk_iso_iff _ (œÉ.innerHornImage_arrowIso (Fin.zero_le 0))).2
        (.of _ (.mk Fin.zero_lt_one Fin.one_lt_last)))
  ¬∑ exact of_isPushout œÑsq.isPushout.flip
      ((arrow_mk_iso_iff _ (œÑ.innerHornImage_arrowIso (Fin.zero_le 0))).2
        (.of _ (.mk Fin.zero_lt_one Fin.one_lt_last)))

noncomputable
def arrow_unionProd_iso : Arrow.mk (‚àÇŒî[n].Œπ ‚ó´ Œõ[2, 1].Œπ) ‚âÖ Arrow.mk (‚àÇŒî[n].unionProd Œõ[2, 1]).Œπ := by
  refine Arrow.isoMk (unionProd_toSSet_iso _) (Œ≤_ Œî[2] Œî[n]) ?_
  simp [unionProd_toSSet_iso]
  apply Limits.pushout.hom_ext
  all_goals aesop

lemma innerAnodyne_eq_T : innerAnodyne.{u} = (saturation.{u} bdryHornPushouts) := by
  apply le_antisymm
  all_goals rw [innerAnodyne_eq, ‚Üê WeaklySaturated.le_iff]
  ¬∑ intro _ _ f ‚ü®h0, hn‚ü©
    exact .retract (hornRetract _ h0 hn) (monomorphisms_le_S _ (.infer_property _))
  ¬∑ intro _ _ f ‚ü®n‚ü©
    rw [‚Üê innerAnodyne_eq]
    exact (arrow_mk_iso_iff _ arrow_unionProd_iso).2 unionProd_Œπ_innerAnodyne

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    innerAnodyne (i ‚ó´ Œõ[2, 1].Œπ) := by
  rw [innerAnodyne_eq_T]
  exact monomorphisms_le_S i (.infer_property _)

-- `007F` (b)
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet) [WeaklySaturated.{u} S] :
    (bdryHornPushouts ‚â§ S) ‚Üî (innerAnodyne.{u} ‚â§ S) := by
  constructor
  ¬∑ simp [innerAnodyne_eq_T, ‚Üê WeaklySaturated.le_iff]
  ¬∑ exact fun h _ _ _ ‚ü®m‚ü© ‚Ü¶ h _ (monoPushout_innerAnodyne ‚àÇŒî[m].Œπ)
