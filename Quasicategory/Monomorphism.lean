import Quasicategory.Basic
import Mathlib.CategoryTheory.Adhesive
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Quasicategory.InternalHom
import Quasicategory.Terminal

namespace SSet

open CategoryTheory Simplicial MorphismProperty MonoidalCategory

-- boundary inclusions are monomorphisms
instance boundaryInclusion_mono (n : ‚Ñï) : Mono (boundaryInclusion n) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((boundaryInclusion n).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

-- B ‚äó ‚àÇŒî[n] ‚ü∂ B ‚äó Œî[n] is a monomorphism
open MonoidalCategory in
instance boundaryInclusion_whisker_mono (B : SSet) (n : ‚Ñï) : Mono (B ‚óÅ (boundaryInclusion n)) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((B ‚óÅ boundaryInclusion n).app k) := by
    intro k
    rw [mono_iff_injective]
    rintro ‚ü®b, x‚ü© ‚ü®b', x'‚ü© h
    apply Prod.ext_iff.1 at h
    apply Prod.ext
    ¬∑ exact h.1
    ¬∑ simp only [boundaryInclusion, whiskerLeft_app_apply] at h ‚ä¢
      apply (Set.injective_codRestrict Subtype.property).mp
      exact fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
      exact h.2
  apply NatTrans.mono_of_mono_app

-- inner horn inclusions are monomorphisms
instance inner_horn_mono ‚¶Én : ‚Ñï‚¶Ñ ‚¶Éi : Fin (n+3)‚¶Ñ (_h0 : 0 < i) (_hn : i < Fin.last (n+2)) :
    monomorphisms SSet (hornInclusion (n+2) i) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((hornInclusion (n + 2) i).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

instance monomorphisms.StableUnderCobaseChange : StableUnderCobaseChange (monomorphisms SSet) := by
  intro A B A' B' f s f' t P hf
  letI _ : Mono f := hf
  letI _ : Adhesive SSet := adhesive_functor
  exact Adhesive.mono_of_isPushout_of_mono_right P

/-
def transfinite_monos_aux (Œ± : Ordinal) (F : {Œ≤ | Œ≤ ‚â§ Œ±} ‚•§ SSet) : Ordinal ‚Üí Prop := fun Œ≥ ‚Ü¶
  (hŒ≥ : Œ≥ ‚â§ Œ±) ‚Üí monomorphisms SSet (F.map (zero_to Œ≥ hŒ≥))

instance transfinite_monos
    (X Y : SSet) (f : X ‚ü∂ Y)
    (Œ± : Ordinal)
    (F : {Œ≤ | Œ≤ ‚â§ Œ±} ‚•§ SSet) (hF : Limits.PreservesColimits F)
    (hS : ‚àÄ (Œ≤ : Ordinal) (hŒ≤ : Œ≤ < Œ±), monomorphisms SSet (F.map (to_succ hŒ≤))) :
    ‚àÄ {Œ≥} (hŒ≥ : Œ≥ ‚â§ Œ±), monomorphisms SSet (F.map (zero_to Œ≥ hŒ≥)) := by
  intro Œ≥ hŒ≥
  refine @Ordinal.limitRecOn (transfinite_monos_aux Œ± F) Œ≥ ?_ ?_ ?_ hŒ≥
  all_goals dsimp [transfinite_monos_aux]
  ¬∑ intro; simp [zero_to]; exact instMonoId _
  ¬∑ intro o IH (succ_le : o + 1 ‚â§ Œ±)
    have o_lt : o < Œ± := Order.succ_le_iff.mp succ_le
    have : (F.map (zero_to (Order.succ o) succ_le)) = (F.map (zero_to o (le_of_lt o_lt))) ‚â´
        (F.map (to_succ o_lt)) := by
      suffices (zero_to (Order.succ o) succ_le) = (zero_to o (le_of_lt o_lt)) ‚â´ (to_succ o_lt) by
        aesop
      simp only [Set.coe_setOf, Set.mem_setOf_eq, zero_to, to_succ, homOfLE_comp]
    rw [this]
    have a := IH (le_of_lt o_lt)
    have b := hS o o_lt
    exact @CategoryTheory.mono_comp SSet _ _ _ _
      (F.map (zero_to o (le_of_lt o_lt))) a (F.map (to_succ o_lt)) b
  ¬∑ simp only [monomorphisms.iff]
    intro o ho IH o_le
    sorry -- because monomorphisms are closed under filtered colimits?
-- o is colimit of o' < o, and ‚àÄ o' < o we have f_o'_0 : F(0) ‚ü∂ F(o') is a Mono.
-- {o' | o' < o} is a filtered category (as a directed set), so o is a filtered colimit
-- F preserves colimits, so F(o) is a filtered colimit of F(o') for o' < o
-- since each F(0) ‚ü∂ F(o') is a Mono, also F(0) ‚ü∂ F(o) is a Mono

  intro X Y f hf
  induction hf with
  | mk Œ± F hF hS => exact transfinite_monos X Y f Œ± F hF hS (le_refl Œ±)
-/

instance monomorphisms.isStableUnderTransfiniteCompositionOfShape (Œ≤ : Type u_1)
    (h1 : LinearOrder Œ≤) (h2 : IsWellOrder Œ≤ fun x y ‚Ü¶ x < y) (h3 : OrderBot Œ≤) :
    (monomorphisms SSet).IsStableUnderTransfiniteCompositionOfShape Œ≤ where
  condition := by
    intro F hf h c hc
    sorry

instance monomorphisms.IsStableUnderTransfiniteComposition :
    IsStableUnderTransfiniteComposition (monomorphisms SSet) where
  id_mem _ := instMonoId _
  comp_mem f g hf hg := @mono_comp _ _ _ _ _ f hf g hg
  isStableUnderTransfiniteCompositionOfShape :=
    monomorphisms.isStableUnderTransfiniteCompositionOfShape

-- `0077` (a) monomorphisms are weakly saturated
instance monomorphisms.WeaklySaturated : WeaklySaturated (monomorphisms SSet) :=
  ‚ü® monomorphisms.StableUnderCobaseChange,
    monomorphisms.StableUnderRetracts,
    monomorphisms.IsStableUnderTransfiniteComposition‚ü©

-- `0077` (b) monomorphisms are generated by boundary inclusions
lemma contains_mono_iff_contains_boundaryInclusion
    (S : MorphismProperty SSet) (hS : WeaklySaturated S) :
    (‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
      ‚Üî ‚àÄ {A B : SSet} (i : A ‚ü∂ B) [Mono i], S i := by
  sorry

/- `006Y` trivial Kan fibration iff rlp wrt all monomorphisms -/
lemma trivialKanFibration_eq_rlp_monomorphisms :
    trivialKanFibration.{0} = (monomorphisms SSet).rlp:= by
  ext X Y p
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    rw [class_rlp_iff_llp_morphism]
    apply (contains_mono_iff_contains_boundaryInclusion.{0,1}
      (MorphismClass p).llp (llp_weakly_saturated _)).1
    intro n _ _ p hp
    induction hp
    exact h (.mk n)
  ¬∑ intro h _ _ p hp
    induction hp
    exact h (boundaryInclusion_mono _)

-- `006Z`(a), trivial Kan fibrations admit sections
noncomputable
def trivialKanFibration_section {X Y : SSet} (p : X ‚ü∂ Y)
    (hp : trivialKanFibration p) : Y ‚ü∂ X := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.l

-- the above map is a section
lemma trivialKanFibration_section_comp {X Y : SSet} (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    trivialKanFibration_section p hp ‚â´ p = ùüô Y := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.fac_right

-- `050J` (1)
instance kanComplex_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    KanComplex X ‚Üí KanComplex Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- `050J` (3)
instance quasicategory_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    Quasicategory X ‚Üí Quasicategory Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ h0 hn
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n + 2, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n + 2, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling h0 hn œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- innerAnodyne is generated by inner horn inclusions, which are monos and monos are saturated,
-- thus innerAnodynes are monos
lemma innerAnodyne_mono {X Y : SSet.{0}} (p : X ‚ü∂ Y) (hp : innerAnodyne p) :
    monomorphisms SSet p :=
  (contains_innerAnodyne_iff_contains_inner_horn.{0,1}
    (monomorphisms SSet) monomorphisms.WeaklySaturated).1 inner_horn_mono p hp

-- the pushout in `007F` (a)
def monoPushout {A B : SSet} (i : A ‚ü∂ B) [Mono i] :=
  IsPushout.of_hasPushout (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i)

-- cocone with pt. `Œî[2] ‚äó B` given by `i`
noncomputable
def B_cocone {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    Limits.PushoutCocone (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i) :=
  Limits.PushoutCocone.mk (Œî[2] ‚óÅ i) (hornInclusion 2 1 ‚ñ∑ B) rfl

-- induced morphism from the pushout to `Œî[2] ‚äó B` given by `B_cocone`
noncomputable
def to_B {A B : SSet} (i : A ‚ü∂ B) [Mono i] : (monoPushout i).cocone.pt ‚ü∂ Œî[2] ‚äó B :=
  (monoPushout i).isColimit.desc (B_cocone i)

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    innerAnodyne (to_B i) := by sorry

-- `007F` (b)
-- inner Anodyne morphisms are generated by the pushout maps given in `to_Œî`
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet) (hS : WeaklySaturated S) :
    (‚àÄ m, S (to_B (boundaryInclusion m))) ‚Üî (‚àÄ {X Y : SSet} (p : X ‚ü∂ Y) (hp : innerAnodyne p), S p) := by
  refine ‚ü®sorry, fun h m ‚Ü¶ h _ (monoPushout_innerAnodyne (boundaryInclusion m))‚ü©
