import Quasicategory.Basic
import Mathlib.CategoryTheory.Adhesive
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Quasicategory.InternalHom
import Quasicategory.Terminal
import Quasicategory.SimplicialSet
import Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit

namespace SSet

open CategoryTheory Simplicial MorphismProperty MonoidalCategory

-- boundary inclusions are monomorphisms
instance boundaryInclusion_mono (n : ‚Ñï) : Mono (boundaryInclusion n) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((boundaryInclusion n).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

-- B ‚äó ‚àÇŒî[n] ‚ü∂ B ‚äó Œî[n] is a monomorphism
open MonoidalCategory in
instance boundaryInclusion_whisker_mono (B : SSet) (n : ‚Ñï) : Mono (B ‚óÅ (boundaryInclusion n)) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((B ‚óÅ boundaryInclusion n).app k) := by
    intro k
    rw [mono_iff_injective]
    rintro ‚ü®b, x‚ü© ‚ü®b', x'‚ü© h
    apply Prod.ext_iff.1 at h
    apply Prod.ext
    ¬∑ exact h.1
    ¬∑ simp only [boundaryInclusion, whiskerLeft_app_apply] at h ‚ä¢
      apply (Set.injective_codRestrict Subtype.property).mp
      exact fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
      exact h.2
  apply NatTrans.mono_of_mono_app

-- inner horn inclusions are monomorphisms
instance inner_horn_mono ‚¶Én : ‚Ñï‚¶Ñ ‚¶Éi : Fin (n+3)‚¶Ñ (_h0 : 0 < i) (_hn : i < Fin.last (n+2)) :
    monomorphisms SSet (hornInclusion (n+2) i) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((hornInclusion (n + 2) i).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

instance monomorphisms.StableUnderCobaseChange : StableUnderCobaseChange (monomorphisms SSet) := by
  intro A B A' B' f s f' t P hf
  letI _ : Mono f := hf
  letI _ : Adhesive SSet := adhesive_functor
  exact Adhesive.mono_of_isPushout_of_mono_right P

section mono_proof

variable {Œ≤ : Type*} [h1 : LinearOrder Œ≤] [h2 : IsWellOrder Œ≤ (¬∑ < ¬∑)] [h3 : OrderBot Œ≤]

variable {F : Œ≤ ‚•§ SSet} [h : F.WellOrderContinuous]
  (hF : ‚àÄ (a : Œ≤) (_ : a < wellOrderSucc a), (monomorphisms SSet) (F.toPrefunctor.map (homOfLE (self_le_wellOrderSucc a))))
  {c : Limits.Cocone F} (hc : Limits.IsColimit c)

variable (Œ≥ : Œ≤)

instance has_bot (not_bot : Œ≥ ‚â† ‚ä•) : OrderBot {b | b < Œ≥} where
  bot := ‚ü®‚ä•, Ne.bot_lt' (id (Ne.symm not_bot))‚ü© -- only if Œ≥ is not ‚ä•
  bot_le _ := OrderBot.bot_le _

instance has_bot' [IsWellOrderLimitElement Œ≥] : OrderBot {b | b < Œ≥} :=
  has_bot Œ≥ (IsWellOrderLimitElement.neq_bot Œ≥)

example [IsWellOrderLimitElement Œ≥] :
    (F.map (homOfLE bot_le)) = ((F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) Œ≥).functorToOver).Œπ.app ‚ä•) := rfl

instance isfilt [hŒ≥ : IsWellOrderLimitElement Œ≥] : IsFiltered {b | b < Œ≥} where
  cocone_objs := by
    intro ‚ü®x, hx‚ü© ‚ü®y, hy‚ü©
    cases h2.trichotomous x y with
    | inl h =>
      obtain ‚ü®z, hz‚ü© := hŒ≥.not_succ y hy
      refine ‚ü®‚ü®z, hz.2‚ü©, homOfLE ?_, (le_of_lt hz.1).hom, trivial‚ü©
      convert (le_of_lt (lt_trans h hz.1))
    | inr h =>
      cases h with
      | inl h =>
        obtain ‚ü®z, hz‚ü© := hŒ≥.not_succ y hy
        refine ‚ü®‚ü®z, hz.2‚ü©, homOfLE ?_, (le_of_lt hz.1).hom, trivial‚ü©
        have := le_of_lt hz.1
        rw [‚Üê h] at this
        exact this
      | inr h =>
        obtain ‚ü®z, hz‚ü© := hŒ≥.not_succ x hx
        refine ‚ü®‚ü®z, hz.2‚ü©, (le_of_lt hz.1).hom, homOfLE ?_, trivial‚ü©
        convert (le_of_lt (lt_trans h hz.1))
  cocone_maps := fun ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© _ _ ‚Ü¶ by
    obtain ‚ü®z, hz‚ü© := hŒ≥.not_succ y hy
    refine ‚ü®‚ü®z, hz.2‚ü©, ‚ü®(le_of_lt hz.1).hom, rfl‚ü©‚ü©
  nonempty := by simp [IsWellOrderLimitElement.not_bot]

-- when `x : Œ≤` is a limit element, `Over.forgetCocone x` is a colimit
def forgetCoconeColimit (x : Œ≤) (h : IsWellOrderLimitElement x) : Limits.IsColimit (Over.forgetCocone x) where
  desc c := {
    down := {
      down := by
        by_contra h'
        rw [not_le] at h'
        obtain ‚ü®y, hy1, hy2‚ü© := h.not_succ _ h'
        have := (c.Œπ.app (Over.mk (le_of_lt hy2).hom)).le
        dsimp at this
        rw [‚Üê not_le] at hy1
        exact hy1 this } }

-- show that F(‚ä•) ‚ü∂ F(Œ≥) is a monomorphism for all (Œ≥ : Œ≤)
instance monoaux1 : monomorphisms SSet (F.map (bot_le (a := Œ≥).hom)) := by
  apply WellFounded.induction h2.wf Œ≥
  intro x ih
  cases eq_bot_or_eq_succ_or_isWellOrderLimitElement x with
  | inl h0 =>
    have : monomorphisms SSet (F.map (bot_le (a := ‚ä•)).hom) := by
      simp only [homOfLE_refl, CategoryTheory.Functor.map_id, monomorphisms.iff]
      exact instMonoId (F.obj ‚ä•)
    convert this
  | inr h =>
    cases h with
    | inl hsucc =>
      obtain ‚ü®b, ‚ü®hb1, hb2‚ü©‚ü© := hsucc
      rw [hb1] at hb2 ih
      have := @mono_comp SSet _ _ _ _ _ (ih b hb2) _ (hF b hb2)
      rw [‚Üê Functor.map_comp, homOfLE_comp] at this
      convert this
    | inr hlim =>
      let filt := ((PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver ‚ãô Over.forget x ‚ãô F) --functor
      let cocone : Limits.Cocone filt := (F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver) --cocone over functor
      obtain ‚ü®hd : Limits.IsColimit cocone‚ü© := h.nonempty_isColimit (PrincipalSeg.ofElement (¬∑ < ¬∑) x) --filtered colimit
      --change monomorphisms SSet ((cocone).Œπ.app ‚ä•)
      --change monomorphisms SSet ((F.mapCocone (Over.forgetCocone x)).Œπ.app (Over.mk bot_le.hom))
      sorry

instance monomorphisms.isStableUnderTransfiniteCompositionOfShape :
    (monomorphisms SSet).IsStableUnderTransfiniteCompositionOfShape Œ≤ where
  condition F h hF c hc := by
    have := monoaux1 hF
    sorry

end mono_proof

instance monomorphisms.IsStableUnderTransfiniteComposition :
    IsStableUnderTransfiniteComposition (monomorphisms SSet) where
  id_mem _ := instMonoId _
  comp_mem f g hf hg := @mono_comp _ _ _ _ _ f hf g hg
  isStableUnderTransfiniteCompositionOfShape _ :=
    monomorphisms.isStableUnderTransfiniteCompositionOfShape

-- `0077` (a) monomorphisms are weakly saturated
instance monomorphisms.WeaklySaturated : WeaklySaturated (monomorphisms SSet) :=
  ‚ü® monomorphisms.StableUnderCobaseChange,
    monomorphisms.StableUnderRetracts,
    monomorphisms.IsStableUnderTransfiniteComposition‚ü©

-- need skeleta pushout construction for this, this is showing B(k - 1) ‚Ü™ B(k) is a mono
open SimplicialSubset GrothendieckTopology in
lemma succ_mem_thing (S : MorphismProperty SSet) (hS : S.WeaklySaturated) (h : ‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
    {A B : SSet} (i : A ‚ü∂ B) [hi : Mono i] :
    ‚àÄ a < wellOrderSucc a, S ((skeleton_union_functor' B (imagePresheaf i)).map (homOfLE (self_le_wellOrderSucc a))) := by
  intro a ha
  dsimp [skeleton_union_functor, skeleton_union_functor', sset_functor]
  sorry

open SimplicialSubset GrothendieckTopology in
-- `0077` (b) monomorphisms are generated by boundary inclusions
lemma contains_mono_iff_contains_boundaryInclusion
    (S : MorphismProperty SSet.{0}) (hS : WeaklySaturated.{0, 1, 0} S) :
    (‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
      ‚Üî ‚àÄ {A B : SSet} (i : A ‚ü∂ B) [Mono i], S i := by
  refine ‚ü®?_, fun h n ‚Ü¶ h (boundaryInclusion n)‚ü©
  intro h A B i hi
  have := (hS.IsStableUnderTransfiniteComposition.isStableUnderTransfiniteCompositionOfShape ‚Ñï).condition
    (skeleton_union_functor' B (imagePresheaf i)) (succ_mem_thing S hS h i) (skeleton_union_cocone B (imagePresheaf i)) (skeleton_union_cocone_iscolimit B (imagePresheaf i))
  dsimp [SSet.skeleton_union_cocone] at this
  have H : S (Subpresheaf.Œπ (imagePresheaf i)) := by
    convert this
    swap
    rw [empty_union_image i]
    dsimp [skeleton_union_functor, sset_functor, skeleton_union_functor']
    congr
    rw [empty_union_image i]
  change S ((mono_iso i).hom ‚â´ (imagePresheaf i).Œπ)
  exact hS.IsStableUnderTransfiniteComposition.comp_mem (mono_iso i).hom (imagePresheaf i).Œπ
    (WeaklySaturated_contains_iso S (mono_iso i).hom (isomorphisms.infer_property (mono_iso i).hom)) H

/- `006Y` trivial Kan fibration iff rlp wrt all monomorphisms -/
lemma trivialKanFibration_eq_rlp_monomorphisms :
    trivialKanFibration.{0} = (monomorphisms SSet).rlp:= by
  ext X Y p
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    rw [class_rlp_iff_llp_morphism]
    apply (contains_mono_iff_contains_boundaryInclusion
      (MorphismClass p).llp (llp_weakly_saturated _)).1
    intro n _ _ p hp
    induction hp
    exact h (.mk n)
  ¬∑ intro h _ _ p hp
    induction hp
    exact h (boundaryInclusion_mono _)

-- `006Z`(a), trivial Kan fibrations admit sections
noncomputable
def trivialKanFibration_section {X Y : SSet} (p : X ‚ü∂ Y)
    (hp : trivialKanFibration p) : Y ‚ü∂ X := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.l

-- the above map is a section
lemma trivialKanFibration_section_comp {X Y : SSet} (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    trivialKanFibration_section p hp ‚â´ p = ùüô Y := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.fac_right

-- `050J` (1)
instance kanComplex_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    KanComplex X ‚Üí KanComplex Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- `050J` (3)
instance quasicategory_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    Quasicategory X ‚Üí Quasicategory Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ h0 hn
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n + 2, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n + 2, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling h0 hn œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- innerAnodyne is generated by inner horn inclusions, which are monos and monos are saturated,
-- thus innerAnodynes are monos
lemma innerAnodyne_mono {X Y : SSet.{0}} (p : X ‚ü∂ Y) (hp : innerAnodyne p) :
    monomorphisms SSet p :=
  (contains_innerAnodyne_iff_contains_inner_horn.{0,1}
    (monomorphisms SSet) monomorphisms.WeaklySaturated).1 inner_horn_mono p hp

-- the pushout in `007F` (a)
def monoPushout {A B : SSet} (i : A ‚ü∂ B) [Mono i] :=
  IsPushout.of_hasPushout (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i)

-- cocone with pt. `Œî[2] ‚äó B` given by `i`
noncomputable
def B_cocone {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    Limits.PushoutCocone (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i) :=
  Limits.PushoutCocone.mk (Œî[2] ‚óÅ i) (hornInclusion 2 1 ‚ñ∑ B) rfl

-- induced morphism from the pushout to `Œî[2] ‚äó B` given by `B_cocone`
noncomputable
def to_B {A B : SSet} (i : A ‚ü∂ B) [Mono i] : (monoPushout i).cocone.pt ‚ü∂ Œî[2] ‚äó B :=
  (monoPushout i).isColimit.desc (B_cocone i)

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ‚ü∂ B) [Mono i] :
    innerAnodyne (to_B i) := by sorry

-- `007F` (b)
-- inner Anodyne morphisms are generated by the pushout maps given in `to_Œî`
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet) (hS : WeaklySaturated S) :
    (‚àÄ m, S (to_B (boundaryInclusion m))) ‚Üî (‚àÄ {X Y : SSet} (p : X ‚ü∂ Y) (hp : innerAnodyne p), S p) := by
  refine ‚ü®sorry, fun h m ‚Ü¶ h _ (monoPushout_innerAnodyne (boundaryInclusion m))‚ü©
