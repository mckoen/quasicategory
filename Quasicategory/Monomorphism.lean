import Quasicategory.Basic
import Mathlib.CategoryTheory.Adhesive
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Quasicategory.InternalHom
import Quasicategory.Terminal
import Quasicategory.SimplicialSet
import Mathlib.CategoryTheory.Limits.FilteredColimitCommutesFiniteLimit

namespace SSet

open CategoryTheory Simplicial MorphismProperty MonoidalCategory

-- boundary inclusions are monomorphisms
instance boundaryInclusion_mono (n : ‚Ñï) : Mono (boundaryInclusion n) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((boundaryInclusion n).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

instance hornInclusion_mono (n : ‚Ñï) (i : Fin (n + 1)) : Mono (hornInclusion n i) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((hornInclusion n i).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

-- B ‚äó ‚àÇŒî[n] ‚ü∂ B ‚äó Œî[n] is a monomorphism
open MonoidalCategory in
instance boundaryInclusion_whisker_mono (B : SSet) (n : ‚Ñï) : Mono (B ‚óÅ (boundaryInclusion n)) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((B ‚óÅ boundaryInclusion n).app k) := by
    intro k
    rw [mono_iff_injective]
    rintro ‚ü®b, x‚ü© ‚ü®b', x'‚ü© h
    apply Prod.ext_iff.1 at h
    apply Prod.ext
    ¬∑ exact h.1
    ¬∑ simp only [boundaryInclusion, whiskerLeft_app_apply] at h ‚ä¢
      apply (Set.injective_codRestrict Subtype.property).mp
      exact fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
      exact h.2
  apply NatTrans.mono_of_mono_app

-- inner horn inclusions are monomorphisms
instance inner_horn_mono ‚¶Én : ‚Ñï‚¶Ñ ‚¶Éi : Fin (n+3)‚¶Ñ (_h0 : 0 < i) (_hn : i < Fin.last (n+2)) :
    monomorphisms SSet (hornInclusion (n+2) i) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((hornInclusion (n + 2) i).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

instance monomorphisms.StableUnderCobaseChange : StableUnderCobaseChange (monomorphisms SSet) := by
  intro A B A' B' f s f' t P hf
  letI _ : Mono f := hf
  letI _ : Adhesive SSet := adhesive_functor
  exact Adhesive.mono_of_isPushout_of_mono_right P

section mono_proof

variable {Œ≤ : Type*} [h1 : LinearOrder Œ≤] [h2 : IsWellOrder Œ≤ (¬∑ < ¬∑)] [h3 : OrderBot Œ≤]

variable {F : Œ≤ ‚•§ SSet} [h : F.WellOrderContinuous]
  (hF : ‚àÄ (a : Œ≤) (_ : a < wellOrderSucc a), (monomorphisms SSet) (F.toPrefunctor.map (homOfLE (self_le_wellOrderSucc a))))
  {c : Limits.Cocone F} (hc : Limits.IsColimit c)

variable (Œ≥ : Œ≤)

instance has_bot (not_bot : Œ≥ ‚â† ‚ä•) : OrderBot {b | b < Œ≥} where
  bot := ‚ü®‚ä•, Ne.bot_lt' (id (Ne.symm not_bot))‚ü© -- only if Œ≥ is not ‚ä•
  bot_le _ := OrderBot.bot_le _

instance has_bot' [IsWellOrderLimitElement Œ≥] : OrderBot {b | b < Œ≥} :=
  has_bot Œ≥ (IsWellOrderLimitElement.neq_bot Œ≥)

example [IsWellOrderLimitElement Œ≥] :
    (F.map (homOfLE bot_le)) = ((F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) Œ≥).functorToOver).Œπ.app ‚ä•) := rfl

instance [hŒ≥ : IsWellOrderLimitElement Œ≥] : IsDirected {b | b < Œ≥} (¬∑ ‚â§ ¬∑) where
  directed a b := by
    cases h2.trichotomous a b with
    | inl h =>
      obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ b.property
      exact ‚ü®‚ü®c, hc.2‚ü©, ‚ü®(le_of_lt h).trans (le_of_lt hc.1), le_of_lt hc.1‚ü©‚ü©
    | inr h =>
      cases h with
      | inl h =>
        obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ b.property
        refine ‚ü®‚ü®c, hc.2‚ü©, ‚ü®(by rw [h]; exact le_of_lt hc.1 : a ‚â§ c), le_of_lt hc.1‚ü©‚ü©
      | inr h =>
        obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ a.property
        exact ‚ü®‚ü®c, hc.2‚ü©, ‚ü®le_of_lt hc.1, (le_of_lt h).trans (le_of_lt hc.1)‚ü©‚ü©

instance isfilt [IsWellOrderLimitElement Œ≥] : IsFiltered {b | b < Œ≥} := isFiltered_of_directed_le_nonempty _

-- when `Œ≥ : Œ≤` is a limit element, `Over.forgetCocone Œ≥` is a colimit
def forgetCoconeColimit (h : IsWellOrderLimitElement Œ≥) : Limits.IsColimit (Over.forgetCocone Œ≥) where
  desc c := ‚ü®‚ü® by
    by_contra h'
    rw [not_le] at h'
    obtain ‚ü®y, hy1, hy2‚ü© := h.not_succ _ h'
    have := (c.Œπ.app (Over.mk (le_of_lt hy2).hom)).le
    dsimp at this
    rw [‚Üê not_le] at hy1
    exact hy1 this ‚ü©‚ü©

-- show that F(‚ä•) ‚ü∂ F(Œ≥) is a monomorphism for all (Œ≥ : Œ≤)
-- prove for ordinals by lurie
-- genl using
-- Ordinal.limitRecOn
/-
instance monoaux1 : monomorphisms SSet (F.map (bot_le (a := Œ≥).hom)) := by
  apply WellFounded.induction h2.wf Œ≥
  intro x ih
  cases eq_bot_or_eq_succ_or_isWellOrderLimitElement x with
  | inl h0 =>
    have : monomorphisms SSet (F.map (bot_le (a := ‚ä•)).hom) := by
      simp only [homOfLE_refl, CategoryTheory.Functor.map_id, monomorphisms.iff]
      exact instMonoId (F.obj ‚ä•)
    convert this
  | inr h =>
    cases h with
    | inl hsucc =>
      obtain ‚ü®b, ‚ü®hb1, hb2‚ü©‚ü© := hsucc
      rw [hb1] at hb2 ih
      have := @mono_comp SSet _ _ _ _ _ (ih b hb2) _ (hF b hb2)
      rw [‚Üê Functor.map_comp, homOfLE_comp] at this
      convert this
    | inr hlim =>
      let filt := ((PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver ‚ãô Over.forget x ‚ãô F) --functor
      let cocone : Limits.Cocone filt := (F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver) --cocone over functor
      obtain ‚ü®hd : Limits.IsColimit cocone‚ü© := h.nonempty_isColimit (PrincipalSeg.ofElement (¬∑ < ¬∑) x) --filtered colimit
      --change Mono ((cocone).Œπ.app ‚ä•)
      --change Mono ((F.mapCocone (Over.forgetCocone x)).Œπ.app (Over.mk bot_le.hom))
      sorry
-/

-- show for all Œ≥ satisfying same thing as Œ≥, whisker by Œ≥ ‚•§ Œ≤, then bot Œ≥ ‚Ü¶ bot Œ≤ from << (ordinal equivalence), conclude with special case Œ≤ = Œ≥
instance monomorphisms.isStableUnderTransfiniteCompositionOfShape :
    (monomorphisms SSet).IsStableUnderTransfiniteCompositionOfShape Œ≤ where
  condition F h hF c hc := by
    sorry

end mono_proof

instance monomorphisms.IsStableUnderTransfiniteComposition :
    IsStableUnderTransfiniteComposition (monomorphisms SSet) where
  id_mem _ := instMonoId _
  comp_mem f g hf hg := @mono_comp _ _ _ _ _ f hf g hg
  isStableUnderTransfiniteCompositionOfShape _ :=
    monomorphisms.isStableUnderTransfiniteCompositionOfShape

-- `0077` (a) monomorphisms are weakly saturated
instance monomorphisms.WeaklySaturated : WeaklySaturated (monomorphisms SSet) :=
  ‚ü® monomorphisms.StableUnderCobaseChange,
    monomorphisms.StableUnderRetracts,
    monomorphisms.IsStableUnderTransfiniteComposition‚ü©

-- need skeleta pushout construction for this, this is showing B(k - 1) ‚Ü™ B(k) is contained in S
open SimplicialSubset GrothendieckTopology in
lemma succ_mem_thing (S : MorphismProperty SSet) (hS : S.WeaklySaturated) (h : ‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
    {A B : SSet} (i : A ‚ü∂ B) [hi : Mono i] :
    ‚àÄ a < wellOrderSucc a, S ((skeleton_union_functor' B (imagePresheaf i)).map (homOfLE (self_le_wellOrderSucc a))) := by
  intro a ha
  dsimp [skeleton_union_functor, skeleton_union_functor', sset_functor]
  sorry

open SimplicialSubset GrothendieckTopology in
-- `0077` (b) monomorphisms are generated by boundary inclusions
lemma contains_mono_iff_contains_boundaryInclusion
    (S : MorphismProperty SSet.{0}) (hS : WeaklySaturated.{0} S) :
    (‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
      ‚Üî ‚àÄ {A B : SSet} (i : A ‚ü∂ B) [Mono i], S i := by
  refine ‚ü®?_, fun h n ‚Ü¶ h (boundaryInclusion n)‚ü©
  intro h A B i hi
  have := (hS.IsStableUnderTransfiniteComposition.isStableUnderTransfiniteCompositionOfShape ‚Ñï).condition
    (skeleton_union_functor' B (imagePresheaf i)) (succ_mem_thing S hS h i) (skeleton_union_cocone B (imagePresheaf i)) (skeleton_union_cocone_iscolimit B (imagePresheaf i))
  dsimp [SSet.skeleton_union_cocone] at this
  have H : S (Subpresheaf.Œπ (imagePresheaf i)) := by
    convert this
    swap
    rw [empty_union_image i]
    dsimp [skeleton_union_functor, sset_functor, skeleton_union_functor']
    congr
    rw [empty_union_image i]
  change S ((mono_iso i).hom ‚â´ (imagePresheaf i).Œπ)
  exact hS.IsStableUnderTransfiniteComposition.comp_mem (mono_iso i).hom (imagePresheaf i).Œπ
    (WeaklySaturated_contains_iso S (mono_iso i).hom (isomorphisms.infer_property (mono_iso i).hom)) H

/- `006Y` trivial Kan fibration iff rlp wrt all monomorphisms -/
lemma trivialKanFibration_eq_rlp_monomorphisms :
    trivialKanFibration.{0} = (monomorphisms SSet).rlp:= by
  ext X Y p
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    rw [class_rlp_iff_llp_morphism]
    apply (contains_mono_iff_contains_boundaryInclusion
      (MorphismClass p).llp (llp_weakly_saturated _)).1
    intro n _ _ p hp
    induction hp
    exact h (.mk n)
  ¬∑ intro h _ _ p hp
    induction hp
    exact h (boundaryInclusion_mono _)

-- `006Z`(a), trivial Kan fibrations admit sections
noncomputable
def trivialKanFibration_section {X Y : SSet} (p : X ‚ü∂ Y)
    (hp : trivialKanFibration p) : Y ‚ü∂ X := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.l

-- the above map is a section
lemma trivialKanFibration_section_comp {X Y : SSet} (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    trivialKanFibration_section p hp ‚â´ p = ùüô Y := by
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.fac_right

-- `050J` (1)
instance kanComplex_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    KanComplex X ‚Üí KanComplex Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- `050J` (3)
instance quasicategory_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    Quasicategory X ‚Üí Quasicategory Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ h0 hn
  rw [trivialKanFibration_eq_rlp_monomorphisms] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n + 2, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp (initial_mono Œõ[n + 2, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling h0 hn œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

-- innerAnodyne is generated by inner horn inclusions, which are monos and monos are saturated,
-- thus innerAnodynes are monos
lemma innerAnodyne_mono {X Y : SSet.{0}} (p : X ‚ü∂ Y) (hp : innerAnodyne p) :
    monomorphisms SSet p :=
  (contains_innerAnodyne_iff_contains_inner_horn.{0, 1}
    (monomorphisms SSet) monomorphisms.WeaklySaturated).1 inner_horn_mono p hp

-- the pushout in `007F` (a) given by a morphism `A ‚ü∂ B`
def generalPushout {A B : SSet} (i : A ‚ü∂ B) :=
  IsPushout.of_hasPushout (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i)

-- cocone with pt. `Œî[2] ‚äó B` given by `i`
noncomputable
def B_cocone {A B : SSet} (i : A ‚ü∂ B) :
    Limits.PushoutCocone (hornInclusion 2 1 ‚ñ∑ A) (Œõ[2, 1] ‚óÅ i) :=
  Limits.PushoutCocone.mk (Œî[2] ‚óÅ i) (hornInclusion 2 1 ‚ñ∑ B) rfl

-- induced morphism from the pushout to `Œî[2] ‚äó B`
noncomputable
def to_B {A B : SSet} (i : A ‚ü∂ B) : (generalPushout i).cocone.pt ‚ü∂ Œî[2] ‚äó B :=
  (generalPushout i).desc (Œî[2] ‚óÅ i) (hornInclusion 2 1 ‚ñ∑ B) rfl

----------------
-- pushout in `0079`,
-- inclusions of this into `Œî[2] ‚äó Œî[m]` generate the WSC of inner anodyne morphisms (`007F` (b))
def Œî_pushout (m : ‚Ñï) :=
  generalPushout (boundaryInclusion m)

-- the cocone with point `Œî[2] ‚äó Œî[m]` given by boundary inclusions
noncomputable
def Œî_cocone (m : ‚Ñï) := B_cocone (boundaryInclusion m)

-- induced morphism from pushout to `Œî[2] ‚äó Œî[m]` given by `Œî_cocone`
noncomputable
def to_Œî (m : ‚Ñï) : (Œî_pushout m).cocone.pt ‚ü∂ Œî[2] ‚äó Œî[m] :=
  (Œî_pushout m).isColimit.desc (Œî_cocone m)
----------------


-- pushout in proof `0079` (for retract diagram)
def Œõ_pushout (m : ‚Ñï) (i : Fin (m + 1)) :=
  generalPushout (hornInclusion m i)


-- induced morphism from pushout to `Œî[2] ‚äó Œî[m]` given by `Œõ_cocone`
noncomputable
def to_Œõ (m : ‚Ñï) (i : Fin (m + 1)) : (Œõ_pushout m i).cocone.pt ‚ü∂ Œî[2] ‚äó Œî[m] :=
  to_B (hornInclusion m i)

inductive bdryPushout : {X Y : SSet} ‚Üí (X ‚ü∂ Y) ‚Üí Prop
  | mk ‚¶Ém : ‚Ñï‚¶Ñ : bdryPushout (to_Œî m)

/-- the class inclusions from pushouts to `Œî[2] ‚äó Œî[m]` -/
def bdryPushoutClass : MorphismProperty SSet := fun _ _ p ‚Ü¶ bdryPushout p

section _007F

namespace _007F

-- T = WeaklySaturatedOf bdryPushoutClass
-- S is the class of all morphism `i : A ‚Üí B` such that the induced pushout is in T
def S : MorphismProperty SSet := fun _ _ i ‚Ü¶ (WeaklySaturatedClassOf.{0} bdryPushoutClass) (to_B i)

lemma S_contains_bdry_incl : ‚àÄ (n : ‚Ñï), S (boundaryInclusion n) := fun _ ‚Ü¶ by
  apply WeaklySaturatedOf.of
  apply bdryPushout.mk

-- S is weakly saturated because T is. closure under retracts and pushouts can be shown,
-- not sure about composition
instance S_WeaklySaturated : WeaklySaturated S := sorry

lemma S_contains_monos : ‚àÄ {A B : SSet.{0}} (i : A ‚ü∂ B) [Mono i], S i := by
  have := S_contains_bdry_incl
  rw [contains_mono_iff_contains_boundaryInclusion S S_WeaklySaturated] at this
  intro _ _ i _
  exact this i

lemma innerAnodyne_eq_innerHorn : innerAnodyne.{0} = (WeaklySaturatedClassOf.{0} InnerHornInclusions) := sorry

-- [n] ‚ü∂ [2] by j ‚Ü¶
-- 0 if j < i
-- 1 if j = i
-- 2 if j > i
def s_aux (i : Fin (n + 1)) : Fin (n + 1) ‚Üío Fin 3 where
  toFun j :=   if _ : (j : ‚Ñï) < i then 0 else if _ : (j : ‚Ñï) = i then 1 else 2
  monotone' j k h := by
    dsimp only [dite_eq_ite]
    cases Nat.lt.isWellOrder.trichotomous j i with
    | inl h' => simp only [h', ‚ÜìreduceIte, Fin.isValue, Fin.zero_le]
    | inr h' => cases h' with
    | inl h' =>
      have : (i : ‚Ñï) ‚â§ k := le_of_eq_of_le (id (Eq.symm h')) h
      rw [‚Üê not_lt] at this
      simp only [h', lt_self_iff_false, ‚ÜìreduceIte, Fin.isValue, this, ge_iff_le]
      aesop
    | inr h' =>
      have a : ¬¨ (j : ‚Ñï) < i := Nat.not_lt_of_gt h'
      have b : ¬¨ (j : ‚Ñï) = i := Nat.ne_of_lt' h'
      have c : ¬¨ (k : ‚Ñï) < i := by
        by_contra p
        exact a (lt_of_le_of_lt (h : (j : ‚Ñï) ‚â§ k) p)
      have d : ¬¨ (k : ‚Ñï) = i := by
        by_contra p
        apply Nat.not_le_of_lt h'
        have : (j : ‚Ñï) ‚â§ k := h
        rw [p] at this
        exact this
      simp only [a, ‚ÜìreduceIte, b, Fin.isValue, c, d, le_refl]

def standard_map (n : ‚Ñï) (i : Fin (n + 1)) : Œî[n] ‚ü∂ Œî[2] :=
  standardSimplex.map (SimplexCategory.mkHom (s_aux i))

-- the above map restricted to the horn
def horn_map (n : ‚Ñï) (i : Fin (n + 1)) : Œõ[n, i] ‚ü∂ Œî[2] :=
  (hornInclusion n i) ‚â´ (standard_map n i)

-- on vertices j maps to
-- (j, 0) if j < i
-- (j, 1) if j = i
-- (j, 2) if j > i
def s (n : ‚Ñï) (i : Fin (n + 1)) : Œî[n] ‚ü∂ Œî[2] ‚äó Œî[n] :=
  FunctorToTypes.prod.lift (standard_map n i) (ùüô _)

def s_restricted (n : ‚Ñï) (i : Fin (n + 1)) : Œõ[n, i] ‚ü∂ Œî[2] ‚äó Œõ[n, i]  :=
  FunctorToTypes.prod.lift (horn_map n i) (ùüô _)

noncomputable
def horn_to_pushout (n : ‚Ñï) (i : Fin (n + 1)) : Œõ[n, i] ‚ü∂ (Œõ_pushout n i).cocone.pt :=
  s_restricted n i ‚â´ (Limits.pushout.inl (hornInclusion 2 1 ‚ñ∑ Œõ[n, i]) (Œõ[2, 1] ‚óÅ hornInclusion n i))

lemma leftSqCommAux (n : ‚Ñï) (i : Fin (n + 1)) :
    s_restricted n i ‚â´ Œî[2] ‚óÅ (hornInclusion n i) = (hornInclusion n i) ‚â´ s n i := rfl

lemma leftSqComm (n : ‚Ñï) (i : Fin (n + 1)) : horn_to_pushout n i ‚â´ to_Œõ n i = (hornInclusion n i) ‚â´ s n i := by
  rw [‚Üê leftSqCommAux]
  dsimp [horn_to_pushout, to_Œõ, to_B]
  rw [Category.assoc, IsPushout.inl_desc]

def r_aux (i : Fin (n + 1)) : Fin 3 √ó Fin (n + 1) ‚Üío Fin (n + 1) where
  toFun := fun ‚ü®k, j‚ü© ‚Ü¶
    if _ : ((j : ‚Ñï) < i ‚àß k = 0) ‚à® ((j : ‚Ñï) > i ‚àß k = 2) then j else i
  monotone' := by
    intro ‚ü®k, j‚ü© ‚ü®k', j'‚ü© ‚ü®(hk : k ‚â§ k'), (hj : j ‚â§ j')‚ü©
    cases Nat.lt.isWellOrder.trichotomous j i with
    | inl h =>
      have : ¬¨ i < j := Lean.Omega.Fin.not_lt.mpr (Fin.le_of_lt h)
      fin_cases k; all_goals fin_cases k'
      all_goals simp only [Fin.val_fin_lt, Fin.mk_one, Fin.isValue, one_ne_zero, and_false, gt_iff_lt,
        Fin.reduceEq, or_self, ‚ÜìreduceDIte, Fin.reduceFinMk, and_true, false_or, dite_eq_ite,
        ge_iff_le, this]
      pick_goal 6
      ¬∑ by_cases i < j'; all_goals rename_i h'; simp only [h', ‚ÜìreduceIte, le_refl, le_of_lt]
      pick_goal 8
      ¬∑ by_cases i < j'; all_goals rename_i h'; simp only [h', ‚ÜìreduceIte, le_refl, le_of_lt]
      all_goals aesop
    | inr h => cases h with
    | inl h => have := Fin.eq_of_val_eq h; aesop
    | inr h =>
      have : i < j' := lt_of_lt_of_le h hj
      have : i ‚â§ j' := le_of_lt this
      fin_cases k; all_goals fin_cases k'
      all_goals simp only [Fin.mk_one, one_ne_zero, le_refl,Fin.val_fin_lt,
        Lean.Omega.Fin.not_lt.mpr (Fin.le_of_lt h), Fin.zero_eta, Fin.isValue, and_true, gt_iff_lt, Fin.reduceEq,
        and_false, or_self, ‚ÜìreduceDIte, Fin.reduceFinMk, or_false, false_or, dite_eq_ite, ge_iff_le, h]
      pick_goal 3
      ¬∑ by_cases i < j'; all_goals rename_i h'; aesop
      pick_goal 5
      ¬∑ by_cases i < j'; all_goals rename_i h'; aesop
      all_goals aesop

open standardSimplex SimplexCategory in
def map_mk_from_prod (f : Fin (n + 1) √ó Fin (m + 1) ‚Üío Fin (k + 1)) : Œî[n] ‚äó Œî[m] ‚ü∂ Œî[k] := by
  refine ‚ü®fun x ‚ü®c, d‚ü© ‚Ü¶ ‚ü®mkHom ‚ü®fun a ‚Ü¶ f ((asOrderHom c) a, (asOrderHom d) a), ?_‚ü©‚ü©, ?_‚ü©
  ¬∑ intro j k hjk
    exact f.monotone ‚ü®(asOrderHom c).monotone hjk, (asOrderHom d).monotone hjk‚ü©
  ¬∑ aesop

-- on vertices j k map to
-- j if (j < i) ‚àß (k = 0)
-- j if (j > i) ‚àß (k = 2)
-- i if (j = i) ‚à® (k = 1)
def r (n : ‚Ñï) (i : Fin (n + 1)) : Œî[2] ‚äó Œî[n] ‚ü∂ Œî[n] := map_mk_from_prod (r_aux i)

variable (n : ‚Ñï) (i : Fin (n + 1)) (h0 : 0 < i) (hn : i < Fin.last n)

-- r restricted along Œõ[2, 1]
noncomputable
def r_restrict_horn_2 : Œõ[2, 1] ‚äó Œî[n] ‚ü∂ Œõ[n, i] where
  app k := by
    intro ‚ü®‚ü®x, hx‚ü©, y‚ü©
    refine ‚ü®((hornInclusion 2 1) ‚ñ∑ Œî[n] ‚â´ r n i).app k ‚ü®‚ü®x, hx‚ü©, y‚ü©, ?_‚ü©
    rw [Set.ne_univ_iff_exists_not_mem] at hx ‚ä¢
    obtain ‚ü®a, ha‚ü© := hx
    fin_cases a
    ¬∑ simp only [Nat.reduceAdd, Fin.zero_eta, Fin.isValue, Set.union_singleton, Set.mem_insert_iff,
        zero_ne_one, Set.mem_range, false_or, not_exists] at ha
      use 0
      simp only [Fin.isValue, Nat.reduceAdd, ne_eq, Set.union_singleton, Set.mem_insert_iff,
        Set.mem_range, not_or, not_exists]
      refine ‚ü®Fin.ne_of_lt h0, fun j h ‚Ü¶ ?_‚ü©
      change (fun a ‚Ü¶
                if (asOrderHom y) a < i ‚àß (asOrderHom x) a = 0 ‚à® i < (asOrderHom y) a ‚àß (asOrderHom x) a = 2 then
                  (asOrderHom y) a
                else i) j = 0 at h
      by_cases (asOrderHom y) j < i; all_goals rename_i h'
      ¬∑ by_cases (asOrderHom x) j = 0; all_goals rename_i h''
        ¬∑ exact ha j h''
        ¬∑ aesop
      ¬∑ aesop
    ¬∑ aesop
    ¬∑ simp only [Nat.reduceAdd, Fin.reduceFinMk, Fin.isValue, Set.union_singleton,
        Set.mem_insert_iff, Fin.reduceEq, Set.mem_range, false_or, not_exists] at ha
      use Fin.last n
      simp only [Fin.isValue, Nat.reduceAdd, ne_eq, Set.union_singleton, Set.mem_insert_iff,
        Set.mem_range, not_or, not_exists]
      refine ‚ü®Fin.ne_of_gt hn, fun j h ‚Ü¶ ?_‚ü©
      change (fun a ‚Ü¶
                if (asOrderHom y) a < i ‚àß (asOrderHom x) a = 0 ‚à® i < (asOrderHom y) a ‚àß (asOrderHom x) a = 2 then
                  (asOrderHom y) a
                else i) j = Fin.last n at h
      by_cases (asOrderHom y) j < i; all_goals rename_i h'
      ¬∑ by_cases (asOrderHom x) j = 0; all_goals rename_i h''
        ¬∑ simp only [h', Nat.reduceAdd, h'', Fin.isValue, and_self, Fin.reduceEq, and_false,
          or_false, ‚ÜìreduceIte, Fin.natCast_eq_last] at h
          rw [h] at h'
          exact absurd (lt_trans h' hn) (Fin.not_lt.mpr (Fin.le_last _))
        ¬∑ simp_all only [Nat.reduceAdd, Fin.isValue, Set.union_singleton, ne_eq, Fin.natCast_eq_last, and_false,
          or_self, ‚ÜìreduceIte, lt_self_iff_false]
      ¬∑ simp_all only [Nat.reduceAdd, Fin.isValue, Set.union_singleton, ne_eq, Fin.natCast_eq_last, false_and,
        and_false, or_self, ‚ÜìreduceIte, not_lt, Fin.last_le_iff, lt_self_iff_false]

-- r restricted along Œõ[n, i]
noncomputable
def r_restrict_horn_n : Œî[2] ‚äó Œõ[n, i] ‚ü∂ Œõ[n, i] where
  app k := by
    intro ‚ü®x, ‚ü®y, hy‚ü©‚ü©
    refine ‚ü®(Œî[2] ‚óÅ (hornInclusion n i) ‚â´ r n i).app k ‚ü®x, ‚ü®y, hy‚ü©‚ü©, ?_‚ü©
    sorry

open standardSimplex SimplexCategory in
noncomputable
def pushout_to_horn : (Œõ_pushout n i).cocone.pt ‚ü∂ Œõ[n, i] :=
  Limits.pushout.desc (r_restrict_horn_n n i) (r_restrict_horn_2 n i h0 hn) rfl

lemma rightSqComm : pushout_to_horn n i h0 hn ‚â´ hornInclusion n i = to_Œõ n i ‚â´ r n i := by
  dsimp [pushout_to_horn, to_Œõ, to_B]
  apply Limits.pushout.hom_ext; all_goals aesop

lemma r_comp_s (n : ‚Ñï) (i : Fin (n + 1)) : s n i ‚â´ r n i = ùüô Œî[n] := by
  let r' := r_aux i
  let s' : Fin (n + 1) ‚Üío Fin 3 √ó Fin (n + 1) := (s_aux i).prod (OrderHom.id)
  let f : Fin (n + 1) ‚Üío Fin (n + 1) := OrderHom.comp r' s'
  have a : f = OrderHom.id := by
    ext x
    simp [f, r', s', s_aux, r_aux]
    cases Nat.lt.isWellOrder.trichotomous x i with
    | inl h => aesop
    | inr h => cases h with
    | inl h => aesop
    | inr h =>
      simp_all only [Fin.val_fin_lt, Fin.isValue, true_and]
      split
      next h_1 =>
        simp_all only [Fin.isValue, one_ne_zero, imp_false, not_le, and_self]
        split
        next h_2 => simp_all only [Fin.isValue, Fin.reduceEq, or_false, ‚ÜìreduceIte]
        next h_2 =>
          simp_all only [not_lt, Fin.isValue, Fin.reduceEq, or_false]
          split
          next h_3 => simp_all only
          next h_3 => simp_all only [not_lt]
      next
        h_1 =>
        simp_all only [Fin.isValue, Fin.reduceEq, imp_false, not_le, and_self, ite_eq_right_iff, not_lt]
        split
        next h_2 => simp_all only
        next h_2 =>
          simp_all only [not_or, not_le]
          obtain ‚ü®left, right‚ü© := h_2
          exfalso
          exact left right
  have : s n i ‚â´ r n i = standardSimplex.map (SimplexCategory.mkHom f) := rfl
  rw [this, a]
  aesop

lemma restricted_r_comp_s : horn_to_pushout n i ‚â´ pushout_to_horn n i h0 hn = ùüô Œõ[n, i] := by
  dsimp [horn_to_pushout, pushout_to_horn]
  rw [Category.assoc, Limits.pushout.inl_desc]
  ext k ‚ü®x, hx‚ü©
  change (r_restrict_horn_n n i).app k ((horn_map n i).app k ‚ü®x, hx‚ü©, ‚ü®x, hx‚ü©) = ‚ü®x, hx‚ü©
  simp [r_restrict_horn_n]
  congr
  have := congr_fun (congr_app (r_comp_s n i) k) x
  aesop

noncomputable
instance hornRetract : IsRetract (hornInclusion n i) (to_Œõ n i) where
  i := {
    left := horn_to_pushout n i
    right := s n i
    w := leftSqComm n i
  }
  r := {
    left := pushout_to_horn n i h0 hn
    right := r n i
    w := rightSqComm n i h0 hn
  }
  retract := Arrow.hom_ext _ _ (restricted_r_comp_s n i h0 hn) (r_comp_s n i)

-- need to show inner anodyne = wsc generated by inner horn inclusions
-- the class inner anodyne morphisms is the weakly saturated class generated by the pushout maps given in `to_Œî`
lemma innerAnodyne_eq_T : innerAnodyne.{0} = (WeaklySaturatedClassOf.{0} bdryPushoutClass) := by
  rw [innerAnodyne_eq_innerHorn]
  ext X Y f
  refine ‚ü®?_, sorry‚ü© -- other direction is more technical
  intro h
  refine minimalWeaklySaturated.{0} (WeaklySaturatedClassOf bdryPushoutClass) InnerHornInclusions ?_ (by infer_instance) _ h
  intro A B g hg
  induction hg with
  | @mk n i h0 hn =>
    apply WeaklySaturatedOf.retract -- reduces to showing horn inclusion is a retract of a boundary pushout maps
    ¬∑ exact hornRetract (n + 2) i h0 hn
    ¬∑ exact S_contains_monos (hornInclusion (n + 2) i)

-- `007F` (a)
lemma monoPushout_innerAnodyne {A B : SSet} (i : A ‚ü∂ B) [hi : Mono i] :
    innerAnodyne.{0} (to_B i) := by
  rw [innerAnodyne_eq_T]
  apply S_contains_monos

-- `007F` (b)
-- inner Anodyne morphisms are generated by the pushout maps given in `to_Œî`
lemma contains_innerAnodyne_iff_contains_pushout_maps
    (S : MorphismProperty SSet.{0}) (hS : WeaklySaturated.{0} S) :
    (‚àÄ m, S (to_B (boundaryInclusion m))) ‚Üî (‚àÄ {X Y : SSet} (p : X ‚ü∂ Y) (_ : innerAnodyne p), S p) := by
  refine ‚ü®?_, fun h m ‚Ü¶ h _ (monoPushout_innerAnodyne (boundaryInclusion m))‚ü©
  intro h X Y p hp
  rw [innerAnodyne_eq_T] at hp
  refine minimalWeaklySaturated.{0} S bdryPushoutClass ?_ hS _ hp
  intro _ _ _ hf
  induction hf with
  | @mk m => exact h m

end _007F
