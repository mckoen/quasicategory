import Quasicategory.Basic
import Quasicategory.InternalHom
import Quasicategory.SimplicialSet

/-!

Some results about monomorphisms, and the proof of `0077`.

# TODO

 - show monomorphisms are stable under transfinite composition.

 - finish proof of `0077` which relies on `SimplicialSubset` API.

 - generalize a lot of statements, rewrite most of this

-/

universe w

namespace SSet

open CategoryTheory Simplicial MorphismProperty MonoidalCategory

/-- boundary inclusions are monomorphisms. -/
instance boundaryInclusion_mono (n : ‚Ñï) : Mono (boundaryInclusion n) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((boundaryInclusion n).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

/-- horn inclusions are monomorphisms. -/
instance hornInclusion_mono (n : ‚Ñï) (i : Fin (n + 1)) : Mono (hornInclusion n i) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((hornInclusion n i).app k) := fun _ ‚Ü¶ by
    rw [mono_iff_injective]
    exact (Set.injective_codRestrict Subtype.property).mp fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
  apply NatTrans.mono_of_mono_app

-- inner horn inclusions are monomorphisms
instance innerHornInclusion_mono ‚¶Én : ‚Ñï‚¶Ñ ‚¶Éi : Fin (n + 3)‚¶Ñ (_h0 : 0 < i) (_hn : i < Fin.last (n+2)) :
    monomorphisms SSet (hornInclusion (n + 2) i) := hornInclusion_mono _ _

open MonoidalCategory in
/-- B ‚äó ‚àÇŒî[n] ‚ü∂ B ‚äó Œî[n] is a monomorphism. Should be generalized. -/
instance boundaryInclusion_whisker_mono (B : SSet) (n : ‚Ñï) : Mono (B ‚óÅ (boundaryInclusion n)) := by
  have : ‚àÄ (k : SimplexCategory·µí·µñ), Mono ((B ‚óÅ boundaryInclusion n).app k) := by
    intro k
    rw [mono_iff_injective]
    rintro ‚ü®b, x‚ü© ‚ü®b', x'‚ü© h
    apply Prod.ext_iff.1 at h
    apply Prod.ext
    ¬∑ exact h.1
    ¬∑ simp only [boundaryInclusion, whiskerLeft_app_apply] at h ‚ä¢
      apply (Set.injective_codRestrict Subtype.property).mp
      exact fun ‚¶Éa‚ÇÅ a‚ÇÇ‚¶Ñ a ‚Ü¶ a
      exact h.2
  apply NatTrans.mono_of_mono_app

instance IsStableUnderCobaseChange.monomorphisms : IsStableUnderCobaseChange (monomorphisms SSet) := by
  refine ‚ü®?_‚ü©
  intro A B A' B' f s f' t P hf
  letI _ : Mono f := hf
  letI _ : Adhesive SSet := adhesive_functor
  exact Adhesive.mono_of_isPushout_of_mono_right P

/-
section mono_proof

variable {Œ≤ : Type*} [h1 : LinearOrder Œ≤] [h2 : IsWellOrder Œ≤ (¬∑ < ¬∑)] [h3 : OrderBot Œ≤]

variable {F : Œ≤ ‚•§ SSet} [h : F.WellOrderContinuous]
  (hF : ‚àÄ (a : Œ≤) (_ : a < wellOrderSucc a), (monomorphisms SSet) (F.toPrefunctor.map (homOfLE (self_le_wellOrderSucc a))))
  {c : Limits.Cocone F} (hc : Limits.IsColimit c)

variable (Œ≥ : Œ≤)

instance has_bot (not_bot : Œ≥ ‚â† ‚ä•) : OrderBot {b | b < Œ≥} where
  bot := ‚ü®‚ä•, Ne.bot_lt' (id (Ne.symm not_bot))‚ü©
  bot_le _ := OrderBot.bot_le _

instance has_bot' [IsWellOrderLimitElement Œ≥] : OrderBot {b | b < Œ≥} :=
  has_bot Œ≥ (IsWellOrderLimitElement.neq_bot Œ≥)

example [IsWellOrderLimitElement Œ≥] :
    (F.map (homOfLE bot_le)) = ((F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) Œ≥).functorToOver).Œπ.app ((has_bot' Œ≥).bot)) := rfl

instance [hŒ≥ : IsWellOrderLimitElement Œ≥] : IsDirected {b | b < Œ≥} (¬∑ ‚â§ ¬∑) where
  directed a b := by
    cases h2.trichotomous a b with
    | inl h =>
      obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ b.property
      exact ‚ü®‚ü®c, hc.2‚ü©, ‚ü®(le_of_lt h).trans (le_of_lt hc.1), le_of_lt hc.1‚ü©‚ü©
    | inr h =>
      cases h with
      | inl h =>
        obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ b.property
        refine ‚ü®‚ü®c, hc.2‚ü©, ‚ü®(by rw [h]; exact le_of_lt hc.1 : a ‚â§ c), le_of_lt hc.1‚ü©‚ü©
      | inr h =>
        obtain ‚ü®c, hc‚ü© := hŒ≥.not_succ _ a.property
        exact ‚ü®‚ü®c, hc.2‚ü©, ‚ü®le_of_lt hc.1, (le_of_lt h).trans (le_of_lt hc.1)‚ü©‚ü©

instance isfilt [IsWellOrderLimitElement Œ≥] : IsFiltered {b | b < Œ≥} := isFiltered_of_directed_le_nonempty _

-- when `Œ≥ : Œ≤` is a limit element, `Over.forgetCocone Œ≥` is a colimit
def forgetCoconeColimit (h : IsWellOrderLimitElement Œ≥) : Limits.IsColimit (Over.forgetCocone Œ≥) where
  desc c := ‚ü®‚ü® by
    by_contra h'
    rw [not_le] at h'
    obtain ‚ü®y, hy1, hy2‚ü© := h.not_succ _ h'
    have := (c.Œπ.app (Over.mk (le_of_lt hy2).hom)).le
    dsimp at this
    rw [‚Üê not_le] at hy1
    exact hy1 this ‚ü©‚ü©

-- show that F(‚ä•) ‚ü∂ F(Œ≥) is a monomorphism for all (Œ≥ : Œ≤)
-- prove for ordinals by lurie
-- genl using
-- Ordinal.limitRecOn
/-
instance monoaux1 : monomorphisms SSet (F.map (bot_le (a := Œ≥).hom)) := by
  apply WellFounded.induction h2.wf Œ≥
  intro x ih
  cases eq_bot_or_eq_succ_or_isWellOrderLimitElement x with
  | inl h0 =>
    have : monomorphisms SSet (F.map (bot_le (a := ‚ä•)).hom) := by
      simp only [homOfLE_refl, CategoryTheory.Functor.map_id, monomorphisms.iff]
      exact instMonoId (F.obj ‚ä•)
    convert this
  | inr h =>
    cases h with
    | inl hsucc =>
      obtain ‚ü®b, ‚ü®hb1, hb2‚ü©‚ü© := hsucc
      rw [hb1] at hb2 ih
      have := @mono_comp SSet _ _ _ _ _ (ih b hb2) _ (hF b hb2)
      rw [‚Üê Functor.map_comp, homOfLE_comp] at this
      convert this
    | inr hlim =>
      let filt := ((PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver ‚ãô Over.forget x ‚ãô F) --functor
      let cocone : Limits.Cocone filt := (F.coconeOfFunctorToOver (PrincipalSeg.ofElement (¬∑ < ¬∑) x).functorToOver) --cocone over functor
      obtain ‚ü®hd : Limits.IsColimit cocone‚ü© := h.nonempty_isColimit (PrincipalSeg.ofElement (¬∑ < ¬∑) x) --filtered colimit
      --change Mono ((cocone).Œπ.app ‚ä•)
      --change Mono ((F.mapCocone (Over.forgetCocone x)).Œπ.app (Over.mk bot_le.hom))
      sorry
-/

-- show for all Œ≥ satisfying same thing as Œ≥, whisker by Œ≥ ‚•§ Œ≤, then bot Œ≥ ‚Ü¶ bot Œ≤ from << (ordinal equivalence), conclude with special case Œ≤ = Œ≥
instance monomorphisms.isStableUnderTransfiniteCompositionOfShape :
    (monomorphisms SSet).IsStableUnderTransfiniteCompositionOfShape Œ≤ where
  condition F h hF c hc := by
    sorry

end mono_proof
-/

instance IsStableUnderTransfiniteComposition.monomorphisms :
    IsStableUnderTransfiniteComposition (monomorphisms SSet) where
  id_mem _ := instMonoId _
  comp_mem f g hf hg := @mono_comp _ _ _ _ _ f hf g hg
  isStableUnderTransfiniteCompositionOfShape _ := sorry

-- `0077` (a) monomorphisms are weakly saturated
instance monomorphisms.WeaklySaturated : WeaklySaturated (monomorphisms SSet) :=
  ‚ü® IsStableUnderCobaseChange.monomorphisms,
    IsStableUnderRetracts.monomorphisms,
    IsStableUnderTransfiniteComposition.monomorphisms‚ü©

/-
-- need skeleta pushout construction for this, this is showing B(k - 1) ‚Ü™ B(k) is contained in S
open SimplicialSubset GrothendieckTopology in
lemma succ_mem_thing (S : MorphismProperty SSet) (hS : S.WeaklySaturated) (h : ‚àÄ (n : ‚Ñï), S (boundaryInclusion n))
    {A B : SSet} (i : A ‚ü∂ B) [hi : Mono i] :
    ‚àÄ a < wellOrderSucc a, S ((skeleton_union_functor' B (imagePresheaf i)).map (homOfLE (self_le_wellOrderSucc a)))
  := by
  intro a ha
  dsimp [skeleton_union_functor, skeleton_union_functor', sset_functor]
  sorry
-/

open SimplicialSubset GrothendieckTopology in
/-- `0077` (b) monomorphisms are generated by boundary inclusions. -/
lemma mono_eq_bdryInclusions : monomorphisms SSet = WeaklySaturatedClassOf BoundaryInclusions := sorry

/-
by
  ext A B i
  refine ‚ü®?_, fun h ‚Ü¶ minimalWeaklySaturated _ _ (fun _ _ _ h ‚Ü¶ by induction h with | mk => exact boundaryInclusion_mono _) monomorphisms.WeaklySaturated i h‚ü©
  intro h
  letI hS : WeaklySaturated (WeaklySaturatedClassOf BoundaryInclusions) := by infer_instance
  letI : Mono i := h
  have := (hS.IsStableUnderTransfiniteComposition.isStableUnderTransfiniteCompositionOfShape ‚Ñï).condition
    (skeleton_union_functor' B (imagePresheaf i)) (succ_mem_thing _ hS (fun n ‚Ü¶ .of _ (.mk n)) i) (skeleton_union_cocone B (imagePresheaf i)) (skeleton_union_cocone_iscolimit B (imagePresheaf i))
  dsimp [SSet.skeleton_union_cocone] at this
  have H : BoundaryInclusions.WeaklySaturatedClassOf (Subpresheaf.Œπ (imagePresheaf i)) := by
    convert this
    swap
    rw [empty_union_image i]
    dsimp [skeleton_union_functor, sset_functor, skeleton_union_functor']
    congr
    rw [empty_union_image i]
  change BoundaryInclusions.WeaklySaturatedClassOf ((mono_iso i).hom ‚â´ (imagePresheaf i).Œπ)
  exact hS.IsStableUnderTransfiniteComposition.comp_mem (mono_iso i).hom (imagePresheaf i).Œπ
    (WeaklySaturated_contains_iso _ (mono_iso i).hom (isomorphisms.infer_property (mono_iso i).hom)) H
-/

/-- `006Y` trivial Kan fibration iff rlp wrt all monomorphisms -/
lemma trivialKanFibration_eq_rlp_monomorphisms :
    trivialKanFibration = (monomorphisms SSet).rlp:= by
  ext X Y p
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    rw [class_rlp_iff_llp_morphism, mono_eq_bdryInclusions]
    intro _ _ i hi
    refine minimalWeaklySaturated (MorphismClass p).llp BoundaryInclusions ?_ (llp.WeaklySaturated.{_, _, w} _) i hi
    intro _ _ _ hf _ _ _ hg
    induction hg with | mk => exact h _ hf
  ¬∑ intro h _ _ p hp
    induction hp
    exact h _ (boundaryInclusion_mono _)

/-- `006Z`(a), trivial Kan fibrations admit sections -/
noncomputable
def trivialKanFibration_section {X Y : SSet} (p : X ‚ü∂ Y)
    (hp : trivialKanFibration p) : Y ‚ü∂ X := by
  rw [trivialKanFibration_eq_rlp_monomorphisms.{w}] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp _ (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.l

/-- the above map is a section -/
lemma trivialKanFibration_section_comp {X Y : SSet} (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    trivialKanFibration_section p hp ‚â´ p = ùüô Y := by
  rw [trivialKanFibration_eq_rlp_monomorphisms.{w}] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Y) ‚â´ (ùüô Y) :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  exact ((hp _ (initial_mono Y emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some.fac_right

/-- `050J` (1) -/
instance kanComplex_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    KanComplex X ‚Üí KanComplex Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ
  rw [trivialKanFibration_eq_rlp_monomorphisms.{w}] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp _ (initial_mono Œõ[n, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

/-- `050J` (3) --/
instance quasicategory_of_trivialKanFibration {X Y : SSet.{0}}
    (p : X ‚ü∂ Y) (hp : trivialKanFibration p) :
    Quasicategory X ‚Üí Quasicategory Y := by
  intro h
  constructor
  intro n i œÉ‚ÇÄ h0 hn
  rw [trivialKanFibration_eq_rlp_monomorphisms.{w}] at hp
  dsimp [rlp] at hp
  have : (emptyIsInitial.to X) ‚â´ p = (emptyIsInitial.to Œõ[n + 2, i]) ‚â´ œÉ‚ÇÄ :=
    Limits.IsInitial.hom_ext emptyIsInitial _ _
  have œÑ‚ÇÄ := ((hp _ (initial_mono Œõ[n + 2, i] emptyIsInitial)).sq_hasLift (CommSq.mk (this))).exists_lift.some
  obtain ‚ü®œÑ, hœÑ‚ü© := h.hornFilling h0 hn œÑ‚ÇÄ.l
  use œÑ ‚â´ p
  rw [‚Üê Category.assoc, ‚Üê hœÑ, œÑ‚ÇÄ.fac_right]

/-- inner anodyne morphisms are monomorphisms -/
lemma innerAnodyne_mono : innerAnodyne ‚â§ monomorphisms SSet := by
  rw [innerAnodyne_eq.{w}]
  refine minimalWeaklySaturated (monomorphisms SSet) InnerHornInclusions ?_ monomorphisms.WeaklySaturated.{_, w}
  intro _ _ _ h
  induction h with | mk => exact hornInclusion_mono _ _

end SSet
