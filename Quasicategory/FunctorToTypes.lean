/-
Copyright (c) 2024 Jack McKoen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jack McKoen
-/
import Mathlib.CategoryTheory.ChosenFiniteProducts.FunctorCategory
import Mathlib.CategoryTheory.Closed.Cartesian
import Mathlib.CategoryTheory.Monoidal.FunctorCategory
import Mathlib.CategoryTheory.Monoidal.Types.Basic
import Mathlib.Tactic.ApplyFun

/-!
# Functors to Type are closed.

Show that `C ‚•§ Type max w v u` is monoidal closed for `C` a category in `Type u` with morphisms in
`Type v`, where `u`, `v`, and `w` are arbitrary universes.

## TODO
It should be shown that `C ‚•§ Type max w v u` is also cartesian closed.
-/


namespace CategoryTheory

universe w v' v u u'

open MonoidalCategory

variable {C : Type u} [Category.{v} C]

namespace Functor

variable {D : Type u'} [Category.{v'} D]

@[ext]
structure Hom‚ÇÇ (F G : C ‚•§ D) (A : C ‚•§ Type w) where
  app (c : C) (a : A.obj c) : F.obj c ‚ü∂ G.obj c
  naturality {c d : C} (f : c ‚ü∂ d) (a : A.obj c) :
    F.map f ‚â´ app d (A.map f a) = app c a ‚â´ G.map f := by aesop_cat

namespace Hom‚ÇÇ

variable (F G : C ‚•§ D)

attribute [reassoc (attr := simp)] naturality

variable {F G} in
lemma congr_app {A : C ‚•§ Type w} {f g : Hom‚ÇÇ F G A} (h : f = g) (X : C)
    (a : A.obj X) : f.app X a = g.app X a := by subst h; rfl

@[simps]
def id (A : C ‚•§ Type w) : Hom‚ÇÇ F F A where
  app _ _ := ùüô _

variable {F G}

variable {A : C ‚•§ Type w}

@[simps]
def comp {M : C ‚•§ D} (f : Hom‚ÇÇ F G A) (g : Hom‚ÇÇ G M A) : Hom‚ÇÇ F M A where
  app X a := f.app X a ‚â´ g.app X a

/-- -/
@[simps]
def map (x : Hom‚ÇÇ F G A) {A' : C ‚•§ Type w} (f : A' ‚ü∂ A) : Hom‚ÇÇ F G A' where
  app Œî a := x.app Œî (f.app Œî a)
  naturality {Œî Œî'} œÜ a := by
    dsimp
    rw [‚Üê x.naturality œÜ (f.app Œî a), FunctorToTypes.naturality _ _ f œÜ a]

@[simps]
def ofNatTrans (f : F ‚ü∂ G) : Hom‚ÇÇ F G A where
  app X _ := f.app X

end Hom‚ÇÇ

@[simps!]
def hom‚ÇÇFunctor (F G : C ‚•§ D) : (C ‚•§ Type w)·µí·µñ ‚•§ Type max w v' u where
  obj A := Hom‚ÇÇ F G A.unop
  map f x := x.map f.unop

def ihom (F G : C ‚•§ D) : C ‚•§ Type max u v v' := coyoneda.rightOp ‚ãô hom‚ÇÇFunctor.{v} F G

variable {F G} in
@[ext]
lemma ihom_ext {X : C} {x y : (ihom F G).obj X}
    (h : ‚àÄ (Y : C) (f : X ‚ü∂ Y), x.app Y f = (@Hom‚ÇÇ.app C _ D _ F G _ y Y f)) : x = y :=
  Hom‚ÇÇ.ext (by ext; apply h)

end Functor

namespace FunctorToTypes

/-
/-- The ulift functor `(C ‚•§ Type v) ‚•§ C ‚•§ Type max w v u` on functors to Type. -/
def uliftFunctor : (C ‚•§ Type v) ‚•§ C ‚•§ Type max w v u :=
  (whiskeringRight _ _ _).obj CategoryTheory.uliftFunctor.{max w v u}

/-- the co-Yoneda embedding ulifted from `Type v` to `Type max w v u` -/
def coyoneda {C : Type u} [Category.{v} C] : C·µí·µñ ‚•§ C ‚•§ Type max w v u :=
    CategoryTheory.coyoneda ‚ãô uliftFunctor.{w}

/-- The internal hom of two functors `C ‚•§ Type max w v u`. -/
def ihom (F G : C ‚•§ Type max w v u) : C ‚•§ Type max w v u where
  obj c := coyoneda.obj (.op c) ‚äó F ‚ü∂ G
  map := fun f g ‚Ü¶ coyoneda.map (.op f) ‚ñ∑ F ‚â´ g
-/

/-- Given a morphism `f : G ‚ü∂ H`, and object `(c : C)`, and an element of `(F.ihom G).obj c`,
construct an element of `(F.ihom H).obj c`. -/
def rightAdj_map {F G H : C ‚•§ Type (max w v u)} (f : G ‚ü∂ H) (c : C) (a : (F.ihom G).obj c) :
    (F.ihom H).obj c where
      app := fun d b ‚Ü¶ (a.app d b) ‚â´ (f.app d)
      naturality g h := by
        have := a.naturality g h
        change (F.map g ‚â´ a.app _ (h ‚â´ g)) ‚â´ _ = _
        aesop

/-- A right adjoint of `tensorLeft F`. -/
def rightAdj (F : C ‚•§ Type max w v u) : (C ‚•§ Type max w v u) ‚•§ C ‚•§ Type max w v u where
  obj G := F.ihom G
  map f := { app := rightAdj_map f }

variable {F G H : C ‚•§ Type max w v u}

/-- Given a morphism `F ‚äó G ‚ü∂ H`, an object `(c : C)` and an element of `G.obj c`, construct an
element of `(F.ihom H).obj c`. Used to construct a morphism `G ‚ü∂ F.ihom H`. -/
def homEquiv_toFun_app (f : F ‚äó G ‚ü∂ H) (c : C) (y : G.obj c) :
    (F.ihom H).obj c where
  app d g x := f.app d (x, G.map g y)
  naturality g h := by
    ext x
    have := f.naturality g
    apply_fun (fun f ‚Ü¶ f (x, G.map h y)) at this
    aesop

@[ext]
lemma homEquiv_toFun_app_ext {c : C} (f g : (F.ihom G).obj c) :
    f.app = g.app ‚Üí f = g := Functor.Hom‚ÇÇ.ext

/-- Given a morphism `F ‚äó G ‚ü∂ H`, construct a morphism `G ‚ü∂ F.ihom H`. -/
def homEquiv_toFun (f : F ‚äó G ‚ü∂ H) : G ‚ü∂ F.ihom H where
  app := homEquiv_toFun_app f
  naturality _ _ _ := by
    ext _
    dsimp [homEquiv_toFun_app, Functor.ihom, Functor.hom‚ÇÇFunctor]
    aesop

@[ext]
lemma homEquiv_toFun_ext (f g : G ‚ü∂ F.ihom H) :
    f.app = g.app ‚Üí f = g := NatTrans.ext

/-- Given a morphism `G ‚ü∂ F.ihom H`, construct a morphism `F ‚äó G ‚ü∂ H`. -/
def homEquiv_invFun (f : G ‚ü∂ F.ihom H) : F ‚äó G ‚ü∂ H where
  app c x := (f.app c x.2).app c (ùüô c) x.1
  naturality c d g := by
    ext ‚ü®x, y‚ü©
    have h := f.naturality g
    apply_fun (fun f ‚Ü¶ (f y).app d (ùüô d) (F.map g x)) at h
    have h' := (f.app c y).naturality g (ùüô c)
    apply_fun (fun f ‚Ü¶ f x) at h'
    dsimp at h h' ‚ä¢
    rw [h, ‚Üê h']
    dsimp [Functor.ihom, Functor.hom‚ÇÇFunctor]
    aesop

@[ext]
lemma homEquiv_invFun_ext (f g : F ‚äó G ‚ü∂ H) :
    f.app = g.app ‚Üí f = g := NatTrans.ext

/-- The bijection between morphisms `F ‚äó G ‚ü∂ H` and morphisms `G ‚ü∂ F.ihom H`. -/
def homEquiv (F G H : C ‚•§ Type max w v u) : (F ‚äó G ‚ü∂ H) ‚âÉ (G ‚ü∂ F.ihom H) where
  toFun := homEquiv_toFun
  invFun := homEquiv_invFun
  left_inv _ := by ext; dsimp only [homEquiv_invFun, homEquiv_toFun, homEquiv_toFun_app]; aesop
  right_inv f := by
    ext c y d g x
    have b := f.naturality g
    apply_fun (fun f ‚Ü¶ (f y).app d (ùüô d) x) at b
    dsimp only [Functor.ihom, Functor.hom‚ÇÇFunctor] at b ‚ä¢
    aesop

/-- The adjunction `tensorLeft F ‚ä£ rightAdj F`. -/
def adj (F : C ‚•§ Type max w v u) : tensorLeft F ‚ä£ rightAdj F where
  homEquiv := homEquiv F
  unit := {
    app := fun G ‚Ü¶ homEquiv_toFun (ùüô _)
    naturality := fun G H f ‚Ü¶ by
      ext c y
      dsimp [rightAdj, homEquiv_toFun, homEquiv_toFun_app]
      ext d
      dsimp only [Monoidal.tensorObj_obj, comp, Monoidal.whiskerLeft_app, whiskerLeft_apply]
      rw [Eq.symm (FunctorToTypes.naturality G H f _ y)]
      rfl
  }
  counit := { app := fun G ‚Ü¶ homEquiv_invFun (ùüô _) }

instance closed (F : C ‚•§ Type max w v u) : Closed F where
  adj := adj F

instance monoidalClosed : MonoidalClosed (C ‚•§ Type max w v u) where

end FunctorToTypes

end CategoryTheory
