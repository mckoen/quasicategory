import Quasicategory._007F
import Quasicategory.Quasicategory
import Quasicategory.InternalHom
import Mathlib.CategoryTheory.LiftingProperties.ParametrizedAdjunction

universe w

namespace SSet

open CategoryTheory Simplicial MorphismProperty MonoidalCategory MonoidalClosed Limits PushoutProduct

variable {S : SSet} {m : ‚Ñï}

noncomputable
def hornFromPullbackPower (S : SSet) : internalHom.PullbackObjObj Œõ[2, 1].Œπ (isTerminalZero.from S) :=
  Functor.PullbackObjObj.ofHasPullback ..

noncomputable
def pullback_ihom_terminal_iso {S : SSet} :
    pullback ((ihom Œõ[2, 1].toSSet).map (isTerminalZero.from S)) ((pre Œõ[2, 1].Œπ).app Œî[0]) ‚âÖ
      (ihom Œõ[2, 1].toSSet).obj S where
  hom := pullback.fst _ _
  inv := pullback.lift (ùüô _) ((isTerminalZeroPow isTerminalZero).from _) rfl

noncomputable
def hornFromPullbackPower_œÄ_arrowIso :
    Arrow.mk (S.hornFromPullbackPower.œÄ) ‚âÖ Arrow.mk ((internalHom.map Œõ[2, 1].Œπ.op).app S) := by
  dsimp [hornFromPullbackPower]
  refine Arrow.isoMk (Iso.refl _) pullback_ihom_terminal_iso ?_
  simp [pullback_ihom_terminal_iso, Functor.PullbackObjObj.œÄ]

-- `0079`
open HasLiftingProperty ParametrizedAdjunction in
/-- `S` is a quasi-category iff `ihom(Œî[2], S) ‚ü∂ ihom(Œõ[2, 1], S)` is a trivial fibration. -/
instance quasicategory_iff_internalHom_horn_trivialFibration (S : SSet) :
    Quasicategory S ‚Üî
      trivialFibration ((internalHom.map Œõ[2, 1].Œπ.op).app S) := by
  rw [quasicategory_iff_from_innerAnodyne_rlp, morphism_rlp_iff,
    ‚Üê contains_innerAnodyne_iff_contains_pushout_maps, le_llp_iff_le_rlp, morphism_le_iff]
  constructor
  ¬∑ intro h _ _ _ ‚ü®m‚ü©
    rw [‚Üê iff_of_arrow_iso_right _ hornFromPullbackPower_œÄ_arrowIso,
      ‚Üê hasLiftingProperty_iff internalHomAdjunction‚ÇÇ _ _]
    exact h _ ‚ü®m‚ü©
  ¬∑ intro h _ _ _ ‚ü®m‚ü©
    rw [hasLiftingProperty_iff internalHomAdjunction‚ÇÇ,
      iff_of_arrow_iso_right _ hornFromPullbackPower_œÄ_arrowIso]
    exact h _ ‚ü®m‚ü©

/-- `0071` (special case of `0070`) if `p : X ‚ü∂ Y` is a trivial fibration, then `ihom(B, X) ‚ü∂ ihom(B, Y)` is -/
instance trivialFibration_of_ihom_map_trivialFibration {X Y : SSet} (B : SSet) (p : X ‚ü∂ Y) (hp: trivialFibration p) :
    trivialFibration ((ihom B).map p) := by
  intro _ _ i ‚ü®n‚ü©
  rw [trivialFibration_eq_rlp_monomorphisms] at hp
  have := hp _ ((tensorLeft_PreservesMonomorphisms B).preserves ‚àÇŒî[n].Œπ)
  constructor
  intro f g sq
  exact (CommSq.left_adjoint_hasLift_iff sq (FunctorToTypes.adj B)).1
      (this.sq_hasLift (sq.left_adjoint (Closed.adj)))

open MonoidalClosed in
/-- if `D` is a quasi-category, then the restriction map
  `ihom(Œî[2], ihom(S, D)) ‚ü∂ ihom(Œõ[2, 1], ihom(S, D))` is a trivial fibration. -/
def aux (S D : SSet) [Quasicategory D] :
    trivialFibration ((internalHom.map Œõ[2, 1].Œπ.op).app ((ihom S).obj D)) := by
  intro _ _ i ‚ü®n‚ü©
  have := (quasicategory_iff_internalHom_horn_trivialFibration D).1 (by infer_instance)
  have := (trivialFibration_of_ihom_map_trivialFibration S ((internalHom.map Œõ[2, 1].Œπ.op).app D)) this _ (.mk n)
  dsimp at this
  have H : Arrow.mk ((ihom S).map ((pre Œõ[2, 1].Œπ).app D)) ‚âÖ
      Arrow.mk ((internalHom.map Œõ[2, 1].Œπ.op).app ((ihom S).obj D)) :=
    CategoryTheory.Comma.isoMk (ihom_ihom_symm_iso _ _ _) (ihom_ihom_symm_iso _ _ _)
  exact HasLiftingProperty.of_arrow_iso_right ‚àÇŒî[n].Œπ H

section _00J8

variable {A B X Y : SSet} (f : A ‚ü∂ B) {g : X ‚ü∂ Y} [hf : Mono f]

inductive hornMonoPushout : {X Y : SSet} ‚Üí (X ‚ü∂ Y) ‚Üí Prop
  | mk {X Y : SSet} (i : X ‚ü∂ Y) (hi : Mono i) : hornMonoPushout (Œõ[2, 1].Œπ ‚ñ° i)

def hornMonoPushouts : MorphismProperty SSet := fun _ _ p ‚Ü¶ hornMonoPushout p

lemma saturation_hornMonoPushouts_eq : saturation.{w} hornMonoPushouts = innerAnodyne.{w} := by
  apply le_antisymm
  ¬∑ rw [‚Üê Saturated.le_iff]
    intro _ _ _ ‚ü®i, _‚ü©
    exact hornMonoPushout_innerAnodyne i
  ¬∑ rw [innerAnodyne_eq_T, ‚Üê Saturated.le_iff]
    intro _ _ _ ‚ü®m‚ü©
    exact .of _ (.mk _ (instMonoŒπ _))

lemma innerAnodyne_le_T : innerAnodyne ‚â§ (innerAnodyne.pushoutProduct f) := by
  rw [‚Üê saturation_hornMonoPushouts_eq, ‚Üê Saturated.le_iff,
    saturation_hornMonoPushouts_eq]
  intro _ _ _ ‚ü®i, _‚ü©
  have : Arrow.mk (f ‚ñ° Œõ[2, 1].Œπ ‚ñ° i) ‚âÖ Arrow.mk (Œõ[2, 1].Œπ ‚ñ° f ‚ñ° i) :=
    (comm_iso _ _) ‚â™‚â´
    (PushoutProduct.associator _ _ _) ‚â™‚â´
    (iso_of_arrow_iso Œõ[2, 1].Œπ _ _ (comm_iso i f))
  dsimp only [MorphismProperty.pushoutProduct]
  rw [innerAnodyne.arrow_mk_iso_iff this]
  sorry--exact hornMonoPushout_innerAnodyne (f ‚ñ° i)

lemma _00J8 (hg : innerAnodyne g) :
    innerAnodyne (f ‚ñ° g) := innerAnodyne_le_T _ _ hg

end _00J8

open ParametrizedAdjunction in
lemma _01BT {X S A B : SSet} (p : X ‚ü∂ S) (i : A ‚ü∂ B)
    (hp : innerFibration p) [hi : Mono i] :
    innerFibration (Functor.PullbackObjObj.ofHasPullback internalHom i p).œÄ := by
  rw [innerFibration_eq_rlp_innerAnodyne] at hp ‚ä¢
  intro _ _ f hf
  rw [‚Üê hasLiftingProperty_iff internalHomAdjunction‚ÇÇ]
  exact hp _ (_00J8 i hf)

end SSet
