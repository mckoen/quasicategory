import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Closed.FunctorToTypes
import Mathlib.CategoryTheory.Limits.Shapes.FunctorToTypes
import Quasicategory.TopCatModelCategory.SSet.Monoidal

/-!

Some isomorphisms of internal homs, used in `0066`.

-/

open CategoryTheory Simplicial MonoidalCategory MonoidalClosed

namespace SSet

instance : MonoidalClosed SSet := by infer_instance

noncomputable
abbrev Fun : SSet·µí·µñ ‚•§ SSet ‚•§ SSet := internalHom

open FunctorToTypes

/-- If an initial object `I` exists in a CCC, then `A ‚®Ø I ‚âÖ I`. -/
@[simps]
noncomputable
def zeroMul {I : SSet} (t : Limits.IsInitial I) : A ‚äó I ‚âÖ I where
  hom := prod.snd
  inv := t.to _
  hom_inv_id := by
    have : (prod.snd : A ‚äó I ‚ü∂ I) = MonoidalClosed.uncurry (t.to _) := by
      rw [‚Üê curry_eq_iff]
      apply t.hom_ext
    rw [this, ‚Üê uncurry_natural_right, ‚Üê eq_curry_iff]
    apply t.hom_ext
  inv_hom_id := t.hom_ext _ _

instance prod.mono_lift_of_mono_left {W X Y : SSet} (f : W ‚ü∂ X) (g : W ‚ü∂ Y)
    [Mono f] : Mono (prod.lift f g) :=
  mono_of_mono_fac <| prod.lift_fst _ _

instance prod.mono_lift_of_mono_right {W X Y : SSet} (f : W ‚ü∂ X) (g : W ‚ü∂ Y)
    [Mono g] : Mono (prod.lift f g) :=
  mono_of_mono_fac <| prod.lift_snd _ _

theorem strict_initial {A I : SSet} (t : Limits.IsInitial I) (f : A ‚ü∂ I) : IsIso f := by
  haveI : Mono (prod.lift (ùüô A) f ‚â´ (zeroMul t).hom) := mono_comp _ _
  rw [zeroMul_hom, prod.lift_snd] at this
  haveI : IsSplitEpi f := IsSplitEpi.mk' ‚ü®t.to _, t.hom_ext _ _‚ü©
  apply isIso_of_mono_of_isSplitEpi

theorem initial_mono {I : SSet} (B : SSet) (t : Limits.IsInitial I) : Mono (t.to B) :=
  ‚ü®fun g h _ => by
    haveI := strict_initial t g
    haveI := strict_initial t h
    exact eq_of_inv_eq_inv (t.hom_ext _ _)‚ü©

noncomputable section

@[ext]
lemma ihom_ext (Y Z : SSet) (n : SimplexCategory·µí·µñ)
    (a b : (((ihom Y).obj Z)).obj n) : a.app = b.app ‚Üí a = b := fun h ‚Ü¶ by
  apply Functor.functorHom_ext
  intro m f; exact congr_fun (congr_fun h m) f

@[ext]
lemma ihom_ihom_ext (X Y Z : SSet) (n : SimplexCategory·µí·µñ)
    (a b : ((ihom X).obj ((ihom Y).obj Z)).obj n) : a.app = b.app ‚Üí a = b := fun h ‚Ü¶ by
  apply Functor.functorHom_ext
  intro m f; exact congr_fun (congr_fun h m) f

def ihom_iso_hom (X Y Z : SSet) : (ihom X).obj ((ihom Y).obj Z) ‚ü∂ (ihom (X ‚äó Y)).obj Z where
  app := fun n x ‚Ü¶ by
    refine ‚ü®fun m f ‚ü®Xm, Ym‚ü© ‚Ü¶ (x.app m f Xm).app m (ùüô m) Ym, ?_‚ü©
    ¬∑ intro m l f g
      ext ‚ü®Xm, Ym‚ü©
      change
        (x.app l (g ‚â´ f) (X.map f Xm)).app l (ùüô l) (Y.map f Ym) =
          Z.map f ((x.app m g Xm).app m (ùüô m) Ym)
      have := (congr_fun (x.naturality f g) Xm)
      simp at this
      rw [this]
      exact congr_fun ((x.app m g Xm).naturality f (ùüô m)) Ym

def ihom_iso_inv (X Y Z : SSet) : (ihom (X ‚äó Y)).obj Z ‚ü∂ (ihom X).obj ((ihom Y).obj Z) where
  app := fun n x ‚Ü¶ by
    refine ‚ü®?_, ?_‚ü©
    ¬∑ intro m f Xm
      refine ‚ü®fun l g Yl ‚Ü¶ x.app l (f ‚â´ g) (X.map g Xm, Yl), ?_‚ü©
      ¬∑ intro l k g h
        ext Yl
        have := congr_fun (x.naturality g (f ‚â´ h)) (X.map h Xm, Yl)
        simp at this ‚ä¢
        exact this
    ¬∑ intro m l f g
      ext
      simp [ihom, Closed.rightAdj, FunctorToTypes.rightAdj, Functor.functorHom, Functor.homObjFunctor]

/- [X, [Y, Z]] ‚âÖ [X ‚äó Y, Z] -/
def ihom_iso (X Y Z : SSet) : (ihom X).obj ((ihom Y).obj Z) ‚âÖ (ihom (X ‚äó Y)).obj Z where
  hom := ihom_iso_hom X Y Z
  inv := ihom_iso_inv X Y Z
  hom_inv_id := by
    ext n x m f Xm l g Yl
    change (x.app l (f ‚â´ g) (X.map g Xm)).app l (ùüô l) Yl = (x.app m f Xm).app l g Yl
    have := congr_fun (x.naturality g f) Xm
    dsimp [ihom, Closed.rightAdj, FunctorToTypes.rightAdj, Functor.functorHom,
      Functor.homObjFunctor] at this
    rw [this]
    aesop
  inv_hom_id := by
    ext n x m f ‚ü®Xm, Ym‚ü©
    change ((X.ihom_iso_hom Y Z).app n ((X.ihom_iso_inv Y Z).app n x)).app m f (Xm, Ym) =
      x.app m f (Xm, Ym)
    simp [ihom_iso_hom, ihom_iso_inv]

@[simp]
lemma ihom_braid_hom_eq {X Y Z : SSet} {n m : SimplexCategory·µí·µñ} {f : n ‚ü∂ m}
    (a : ((ihom (Y ‚äó X)).obj Z).obj n) :
    (((MonoidalClosed.pre (Œ≤_ X Y).hom).app Z).app n a).app m f =
      (Œ≤_ X Y).hom.app m ‚â´ a.app m f := by
  ext ‚ü®Xm, Ym‚ü©
  change (((Y ‚äó X).functorHom Z).map f a).app m (ùüô m) (Ym, Xm) = a.app m f (Ym, Xm)
  simp [Functor.functorHom]

@[simp]
lemma ihom_braid_inv_eq {X Y Z : SSet} {n m : SimplexCategory·µí·µñ} {f : n ‚ü∂ m}
    (a : ((ihom (X ‚äó Y)).obj Z).obj n) :
    (((MonoidalClosed.pre (Œ≤_ X Y).inv).app Z).app n a).app m f = (Œ≤_ X Y).inv.app m ‚â´ a.app m f := by
  ext ‚ü®Ym, Xm‚ü©
  change (((X ‚äó Y).functorHom Z).map f a).app m (ùüô m) (Xm, Ym) = a.app m f (Xm, Ym)
  simp [Functor.functorHom]

/- [X ‚äó Y, Z] ‚âÖ [Y ‚äó X, Z] -/
def ihom_braid_iso (X Y Z : SSet) : (ihom (X ‚äó Y)).obj Z ‚âÖ (ihom (Y ‚äó X)).obj Z where
  hom := (MonoidalClosed.pre (Œ≤_ X Y).inv).app Z
  inv := (MonoidalClosed.pre (Œ≤_ X Y).hom).app Z
  hom_inv_id := by
    ext n x m f ‚ü®Xm, Ym‚ü©
    change ((
      (MonoidalClosed.pre (Œ≤_ X Y).hom).app Z).app n
      (((MonoidalClosed.pre (Œ≤_ X Y).inv).app Z).app n x)).app m f (Xm, Ym) = _
    rw [ihom_braid_hom_eq, ihom_braid_inv_eq]
    rfl
  inv_hom_id := by
    ext n x m f ‚ü®Ym, Xm‚ü©
    change ((
      (MonoidalClosed.pre (Œ≤_ X Y).inv).app Z).app n
      (((MonoidalClosed.pre (Œ≤_ X Y).hom).app Z).app n x)).app m f (Ym, Xm) = _
    rw [ihom_braid_inv_eq, ihom_braid_hom_eq]
    rfl

/- [X, [Y, Z]] ‚âÖ [X ‚äó Y, Z] ‚âÖ [Y ‚äó X, Z] ‚âÖ [Y, [X, Z]] -/
def ihom_iso' (X Y Z : SSet) : (ihom X).obj ((ihom Y).obj Z) ‚âÖ (ihom Y).obj ((ihom X).obj Z) :=
  (ihom_iso X Y Z) ‚â™‚â´ (ihom_braid_iso X Y Z) ‚â™‚â´ (ihom_iso Y X Z).symm

end

end SSet
