/-
Copyright (c) 2024 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/
import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.AlgebraicTopology.SimplicialSet.Horn
import Mathlib.AlgebraicTopology.SimplicialSet.Boundary
import Mathlib.CategoryTheory.Sites.Subsheaf
import Mathlib.CategoryTheory.Limits.Preserves.Shapes.Multiequalizer
import Mathlib.CategoryTheory.MorphismProperty.Limits
import Quasicategory.TopCatModelCategory.ColimitsType
import Quasicategory.TopCatModelCategory.CommSq
import Quasicategory.TopCatModelCategory.SSet.Basic


/-!
# Subcomplexes of simplicial sets

-/

universe u

open CategoryTheory MonoidalCategory Simplicial Limits Opposite

/-namespace CategoryTheory
-- GrothendieckTopology.Subpresheaf should be moved...

variable {C : Type*} [Category C] (P : C·µí·µñ ‚•§ Type*)

instance : CompleteLattice (Subpresheaf P) where
  sup F G :=
    { obj U := F.obj U ‚äî G.obj U
      map _ _ := by
        rintro (h|h)
        ¬∑ exact Or.inl (F.map _ h)
        ¬∑ exact Or.inr (G.map _ h) }
  le_sup_left _ _ _ := by simp
  le_sup_right _ _ _ := by simp
  sup_le F G H h‚ÇÅ h‚ÇÇ U := by
    rintro x (h|h)
    ¬∑ exact h‚ÇÅ _ h
    ¬∑ exact h‚ÇÇ _ h
  inf S T :=
    { obj U := S.obj U ‚äì T.obj U
      map _ _ h := ‚ü®S.map _ h.1, T.map _ h.2‚ü©}
  inf_le_left _ _ _ _ h := h.1
  inf_le_right _ _ _ _ h := h.2
  le_inf _ _ _ h‚ÇÅ h‚ÇÇ _ _ h := ‚ü®h‚ÇÅ _ h, h‚ÇÇ _ h‚ü©
  sSup S :=
    { obj U := sSup (Set.image (fun T ‚Ü¶ T.obj U) S)
      map f x hx := by
        obtain ‚ü®_, ‚ü®F, h, rfl‚ü©, h'‚ü© := hx
        simp only [Set.sSup_eq_sUnion, Set.sUnion_image, Set.preimage_iUnion,
          Set.mem_iUnion, Set.mem_preimage, exists_prop]
        exact ‚ü®_, h, F.map f h'‚ü© }
  le_sSup _ _ _ _ _ := by aesop
  sSup_le _ _ _ _ _ := by aesop
  sInf S :=
    { obj U := sInf (Set.image (fun T ‚Ü¶ T.obj U) S)
      map f x hx := by
        rintro _ ‚ü®F, h, rfl‚ü©
        exact F.map f (hx _ ‚ü®_, h, rfl‚ü©) }
  sInf_le _ _ _ _ _ := by aesop
  le_sInf _ _ _ _ _ := by aesop
  bot :=
    { obj U := ‚ä•
      map := by simp }
  le_top _ _ := le_top
  bot_le _ _ := bot_le

namespace Subpresheaf

@[simp] lemma top_obj (i : C·µí·µñ) : (‚ä§ : Subpresheaf P).obj i = ‚ä§ := rfl
@[simp] lemma bot_obj (i : C·µí·µñ) : (‚ä• : Subpresheaf P).obj i = ‚ä• := rfl

variable {P}

lemma sSup_obj (S : Set (Subpresheaf P)) (U : C·µí·µñ) :
    (sSup S).obj U = sSup (Set.image (fun T ‚Ü¶ T.obj U) S) := rfl

@[simp]
lemma iSup_obj {Œπ : Type*} (S : Œπ ‚Üí Subpresheaf P) (U : C·µí·µñ) :
    (iSup S).obj U = iSup (fun i ‚Ü¶ (S i).obj U) := by
  simp [iSup, sSup_obj]

lemma sInf_obj (S : Set (Subpresheaf P)) (U : C·µí·µñ) :
    (sInf S).obj U = sInf (Set.image (fun T ‚Ü¶ T.obj U) S) := rfl

@[simp]
lemma iInf_obj {Œπ : Type*} (S : Œπ ‚Üí Subpresheaf P) (U : C·µí·µñ) :
    (iInf S).obj U = iInf (fun i ‚Ü¶ (S i).obj U) := by
  simp [iInf, sInf_obj]

lemma le_def (S T : Subpresheaf P) : S ‚â§ T ‚Üî ‚àÄ U, S.obj U ‚â§ T.obj U := Iff.rfl

@[simp]
lemma max_obj (S T : Subpresheaf P) (i : C·µí·µñ) :
    (S ‚äî T).obj i = S.obj i ‚à™ T.obj i := rfl

@[simp]
lemma min_obj (S T : Subpresheaf P) (i : C·µí·µñ) :
    (S ‚äì T).obj i = S.obj i ‚à© T.obj i := rfl

lemma max_min (S‚ÇÅ S‚ÇÇ T : Subpresheaf P) :
    (S‚ÇÅ ‚äî S‚ÇÇ) ‚äì T = (S‚ÇÅ ‚äì T) ‚äî (S‚ÇÇ ‚äì T) := by
  aesop

lemma min_max (S‚ÇÅ S‚ÇÇ T : Subpresheaf P) :
    T ‚äì (S‚ÇÅ ‚äî S‚ÇÇ) = (T ‚äì S‚ÇÅ) ‚äî (T ‚äì S‚ÇÇ) := by
  aesop

lemma iSup_min {Œπ : Type*} (S : Œπ ‚Üí Subpresheaf P) (T : Subpresheaf P) :
    iSup S ‚äì T = ‚®Ü i, S i ‚äì T := by
  aesop

lemma min_iSup {Œπ : Type*} (S : Œπ ‚Üí Subpresheaf P) (T : Subpresheaf P) :
    T ‚äì iSup S = ‚®Ü i, T ‚äì S i := by
  aesop

end Subpresheaf

end CategoryTheory-/

namespace SSet

variable {X Y : SSet.{u}}

@[simp]
lemma braiding_hom_apply_fst {n : SimplexCategory·µí·µñ} (x : (X ‚äó Y).obj n) :
    ((Œ≤_ X Y).hom.app n x).1 = x.2 := rfl

@[simp]
lemma braiding_hom_apply_snd {n : SimplexCategory·µí·µñ} (x : (X ‚äó Y).obj n) :
    ((Œ≤_ X Y).hom.app n x).2 = x.1 := rfl

@[simp]
lemma braiding_inv_apply_fst {n : SimplexCategory·µí·µñ} (x : (Y ‚äó X).obj n) :
    ((Œ≤_ X Y).inv.app n x).1 = x.2 := rfl

@[simp]
lemma braiding_inv_apply_snd {n : SimplexCategory·µí·µñ} (x : (Y ‚äó X).obj n) :
    ((Œ≤_ X Y).inv.app n x).2 = x.1 := rfl

variable (X Y)

--protected abbrev Subcomplex := Subpresheaf X

namespace Subcomplex

/-instance : CompleteLattice X.Subcomplex :=
  inferInstance-/

variable {X Y}

variable (S : X.Subcomplex) (T : Y.Subcomplex)

--instance : CoeOut X.Subcomplex SSet.{u} where
--  coe := fun S ‚Ü¶ S.toPresheaf

variable (X)

@[simps!]
def topIso : ((‚ä§ : X.Subcomplex) : SSet) ‚âÖ X :=
  NatIso.ofComponents (fun n ‚Ü¶ (Equiv.Set.univ (X.obj n)).toIso)

@[reassoc (attr := simp)]
lemma topIso_inv_Œπ : (topIso X).inv ‚â´ Subpresheaf.Œπ _ = ùüô _ := rfl

def isInitialBot : IsInitial ((‚ä• : X.Subcomplex) : SSet.{u}) :=
  IsInitial.ofUniqueHom (fun P ‚Ü¶
    { app i := fun ‚ü®x, hx‚ü© ‚Ü¶ by simp at hx
      naturality i j f := by ext ‚ü®x, hx‚ü©; simp at hx })
    (fun _ _ ‚Ü¶ by ext _ ‚ü®x, hx‚ü©; simp at hx)

variable {X}

/-variable {S} in
@[ext]
lemma coe_ext {Œî : SimplexCategory·µí·µñ} {x y : S.obj Œî} (h : x.val = y.val) : x = y := by
  Subtype.ext h

lemma sSup_obj (S : Set X.Subcomplex) (n : SimplexCategory·µí·µñ) :
    (sSup S).obj n = sSup (Set.image (fun T ‚Ü¶ T.obj n) S) := rfl

@[simp]
lemma iSup_obj {Œπ : Type*} (S : Œπ ‚Üí X.Subcomplex) (n : SimplexCategory·µí·µñ) :
    (iSup S).obj n = iSup (fun i ‚Ü¶ (S i).obj n) := by
  simp [iSup, sSup_obj]-/

lemma iSup_inf {Œπ : Type*} (S : Œπ ‚Üí X.Subcomplex) (T : X.Subcomplex):
    (‚®Ü i, S i) ‚äì T = ‚®Ü i, (S i ‚äì T)  := by
  aesop

/-instance :
    letI src : SSet := S
    letI f : src ‚ü∂ _ := S.Œπ
    Mono f := by
  change Mono S.Œπ
  infer_instance

@[simp]
lemma Œπ_app {Œî : SimplexCategory·µí·µñ} (x : S.obj Œî) :
    S.Œπ.app Œî x = x.val := rfl-/

instance : Mono S.Œπ := by
  infer_instance

@[simps]
noncomputable def prod : (X ‚äó Y).Subcomplex where
  obj Œî := (S.obj Œî).prod (T.obj Œî)
  map i _ hx := ‚ü®S.map i hx.1, T.map i hx.2‚ü©

lemma prod_monotone {S‚ÇÅ S‚ÇÇ : X.Subcomplex} (hX : S‚ÇÅ ‚â§ S‚ÇÇ) {T‚ÇÅ T‚ÇÇ : Y.Subcomplex} (hY : T‚ÇÅ ‚â§ T‚ÇÇ) :
    S‚ÇÅ.prod T‚ÇÅ ‚â§ S‚ÇÇ.prod T‚ÇÇ :=
  fun _ _ hx => ‚ü®hX _ hx.1, hY _ hx.2‚ü©

example : PartialOrder X.Subcomplex := inferInstance
example : SemilatticeSup X.Subcomplex := inferInstance

section

variable {S‚ÇÅ S‚ÇÇ : X.Subcomplex} (h : S‚ÇÅ ‚â§ S‚ÇÇ)

def homOfLE : (S‚ÇÅ : SSet.{u}) ‚ü∂ (S‚ÇÇ : SSet.{u}) := Subpresheaf.homOfLe h

@[reassoc]
lemma homOfLE_comp {S‚ÇÉ : X.Subcomplex} (h' : S‚ÇÇ ‚â§ S‚ÇÉ) :
    homOfLE h ‚â´ homOfLE h' = homOfLE (h.trans h') := rfl

variable (S‚ÇÅ) in
@[simp]
lemma homOfLE_refl : homOfLE (by rfl : S‚ÇÅ ‚â§ S‚ÇÅ) = ùüô _ := rfl

@[simp]
lemma homOfLE_app_val (Œî : SimplexCategory·µí·µñ) (x : S‚ÇÅ.obj Œî) :
    ((homOfLE h).app Œî x).val = x.val := rfl

@[reassoc (attr := simp)]
lemma homOfLE_Œπ : homOfLE h ‚â´ S‚ÇÇ.Œπ = S‚ÇÅ.Œπ := rfl

instance mono_homOfLE : Mono (homOfLE h) := mono_of_mono_fac (homOfLE_Œπ h)

end

@[simps]
def toPresheafFunctor : X.Subcomplex ‚•§ SSet.{u} where
  obj S := S
  map h := homOfLE (leOfHom h)

section

variable {S‚ÇÅ S‚ÇÇ : X.Subcomplex} (h : S‚ÇÅ = S‚ÇÇ)

@[simps]
def isoOfEq : (S‚ÇÅ : SSet.{u}) ‚âÖ (S‚ÇÇ : SSet.{u}) where
  hom := homOfLE (by rw [h])
  inv := homOfLE (by rw [h])

end

variable (X) in
@[simps]
def forget : X.Subcomplex ‚•§ SSet.{u} where
  obj S := S
  map f := homOfLE (leOfHom f)

noncomputable def unionProd : (X ‚äó Y).Subcomplex := ((‚ä§ : X.Subcomplex).prod T) ‚äî (S.prod ‚ä§)

lemma mem_unionProd_iff {n : SimplexCategory·µí·µñ} (x : (X ‚äó Y).obj n) :
    x ‚àà (unionProd S T).obj _ ‚Üî x.1 ‚àà S.obj _ ‚à® x.2 ‚àà T.obj _ := by
  dsimp [unionProd, Set.prod]
  aesop

lemma top_prod_le_unionProd : (‚ä§ : X.Subcomplex).prod T ‚â§ S.unionProd T := le_sup_left

lemma prod_top_le_unionProd : (S.prod ‚ä§) ‚â§ S.unionProd T := le_sup_right

lemma prod_le_top_prod : S.prod T ‚â§ (‚ä§ : X.Subcomplex).prod T :=
  prod_monotone le_top (by rfl)

lemma prod_le_prod_top : S.prod T ‚â§ S.prod ‚ä§ :=
  prod_monotone (by rfl) le_top

lemma prod_le_unionProd : S.prod T ‚â§ S.unionProd T :=
  (prod_le_prod_top S T).trans (prod_top_le_unionProd S T)

end Subcomplex

/-def subcomplexBoundary (n : ‚Ñï) : (Œî[n] : SSet.{u}).Subcomplex where
  obj _ s := ¬¨Function.Surjective (stdSimplex.asOrderHom s)
  map œÜ s hs := ((boundary n).map œÜ ‚ü®s, hs‚ü©).2

lemma subcomplexBoundary_toSSet (n : ‚Ñï) : subcomplexBoundary.{u} n = ‚àÇŒî[n] := rfl

lemma subcomplexBoundary_Œπ (n : ‚Ñï) :
    (subcomplexBoundary.{u} n).Œπ = boundaryInclusion n := rfl

@[simps]
def subcomplexHorn (n : ‚Ñï) (i : Fin (n + 1)) : (Œî[n] : SSet.{u}).Subcomplex where
  obj _ s := Set.range (asOrderHom s) ‚à™ {i} ‚â† Set.univ
  map œÜ s hs := ((horn n i).map œÜ ‚ü®s, hs‚ü©).2

lemma mem_subcomplexHorn_iff {n : ‚Ñï} (i : Fin (n + 1)) {m : SimplexCategory·µí·µñ}
    (x : (Œî[n] : SSet.{u}).obj m) :
    x ‚àà (subcomplexHorn n i).obj m ‚Üî Set.range (asOrderHom x) ‚à™ {i} ‚â† Set.univ := Iff.rfl

lemma subcomplexHorn_toSSet (n : ‚Ñï) (i : Fin (n + 1)) :
    subcomplexHorn.{u} n i = Œõ[n, i] := rfl

lemma subcomplexHorn_Œπ (n : ‚Ñï) (i : Fin (n + 1)) :
    (subcomplexHorn.{u} n i).Œπ = hornInclusion n i := rfl-/

lemma mem_horn_iff {n : ‚Ñï} (i : Fin (n + 1)) {m : SimplexCategory·µí·µñ}
    (x : (Œî[n] : SSet.{u}).obj m) :
    x ‚àà (horn n i).obj m ‚Üî Set.range (stdSimplex.asOrderHom x) ‚à™ {i} ‚â† Set.univ := Iff.rfl

@[simp]
lemma boundary_zero : boundary.{u} 0 = ‚ä• := by
  ext m x
  simp [boundary]
  intro x
  fin_cases x
  refine ‚ü®0, ?_‚ü©
  apply Subsingleton.elim

section

variable {X Y}
variable (f : X ‚ü∂ Y)

attribute [local simp] FunctorToTypes.naturality

abbrev Subcomplex.range : Y.Subcomplex := Subpresheaf.range f

/-@[simps]
def Subcomplex.range : Y.Subcomplex where
  obj Œî := Set.range (f.app Œî)
  map := by
    rintro Œî Œî' œÜ _ ‚ü®x, rfl‚ü©
    exact ‚ü®X.map œÜ x, by simp‚ü©-/

@[simp]
lemma Subcomplex.range_Œπ (A : X.Subcomplex) :
    Subpresheaf.range A.Œπ = A := by
  rw [Subpresheaf.range_Œπ]

abbrev toRangeSubcomplex : X ‚ü∂ Subcomplex.range f := Subpresheaf.toRange f

@[simp]
lemma toRangeSubcomplex_apply_val {Œî : SimplexCategory·µí·µñ} (x : X.obj Œî) :
    ((toRangeSubcomplex f).app Œî x).val = f.app Œî x := rfl

@[reassoc (attr := simp)]
lemma toRangeSubcomplex_Œπ : toRangeSubcomplex f ‚â´ (Subcomplex.range f).Œπ = f := rfl

instance : Epi (toRangeSubcomplex f) := by
  change Epi (Subpresheaf.toRange f)
  infer_instance

instance : Balanced SSet.{u} :=
  inferInstanceAs (Balanced (SimplexCategory·µí·µñ ‚•§ Type u))

instance {X Y : SSet.{u}} (f : X ‚ü∂ Y) [Mono f] : IsIso (toRangeSubcomplex f) := by
  have := mono_of_mono_fac (toRangeSubcomplex_Œπ f)
  apply isIso_of_mono_of_epi

lemma Subcomplex.range_eq_top_iff : Subcomplex.range f = ‚ä§ ‚Üî Epi f := by
  rw [NatTrans.epi_iff_epi_app, Subpresheaf.ext_iff, funext_iff]
  simp only [epi_iff_surjective, Subpresheaf.range_obj, Subpresheaf.top_obj, Set.top_eq_univ,
    Set.range_eq_univ]

lemma Subcomplex.range_eq_top [Epi f] : Subcomplex.range f = ‚ä§ := by
  rwa [range_eq_top_iff]

end

namespace Subcomplex

variable {X}
def Sq (A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ : X.Subcomplex) := Lattice.BicartSq A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ

namespace Sq

variable {A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ : X.Subcomplex} (sq : Sq A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ)

include sq

lemma le‚ÇÅ‚ÇÇ : A‚ÇÅ ‚â§ A‚ÇÇ := by rw [‚Üê sq.min_eq]; exact inf_le_left
lemma le‚ÇÅ‚ÇÉ : A‚ÇÅ ‚â§ A‚ÇÉ := by rw [‚Üê sq.min_eq]; exact inf_le_right
lemma le‚ÇÇ‚ÇÑ : A‚ÇÇ ‚â§ A‚ÇÑ := by rw [‚Üê sq.max_eq]; exact le_sup_left
lemma le‚ÇÉ‚ÇÑ : A‚ÇÉ ‚â§ A‚ÇÑ := by rw [‚Üê sq.max_eq]; exact le_sup_right

-- the associated commutative square in `SSet`, which is both pushout and pullback
lemma commSq : CommSq (homOfLE sq.le‚ÇÅ‚ÇÇ) (homOfLE sq.le‚ÇÅ‚ÇÉ)
    (homOfLE sq.le‚ÇÇ‚ÇÑ) (homOfLE sq.le‚ÇÉ‚ÇÑ) := ‚ü®rfl‚ü©

lemma obj (n : SimplexCategory·µí·µñ) :
    Lattice.BicartSq (A‚ÇÅ.obj n) (A‚ÇÇ.obj n) (A‚ÇÉ.obj n) (A‚ÇÑ.obj n) where
  max_eq := by
    rw [‚Üê sq.max_eq]
    rfl
  min_eq := by
    rw [‚Üê sq.min_eq]
    rfl

lemma isPushout : IsPushout (homOfLE sq.le‚ÇÅ‚ÇÇ) (homOfLE sq.le‚ÇÅ‚ÇÉ)
    (homOfLE sq.le‚ÇÇ‚ÇÑ) (homOfLE sq.le‚ÇÉ‚ÇÑ) where
  w := rfl
  isColimit' := ‚ü®by
    refine evaluationJointlyReflectsColimits _ (fun n ‚Ü¶ ?_)
    exact (PushoutCocone.isColimitMapCoconeEquiv _ _).2
      (Types.isColimitPushoutCoconeOfBicartSqOfSets (sq.obj n))‚ü©

end Sq

section

variable {Y}
@[simps]
def preimage (A : X.Subcomplex) (p : Y ‚ü∂ X) : Y.Subcomplex where
  obj n := p.app n ‚Åª¬π' (A.obj n)
  map f := (Set.preimage_mono (A.map f)).trans (by
    simp only [Set.preimage_preimage, FunctorToTypes.naturality _ _ p f]
    rfl)

@[simp]
lemma preimage_max (A B : X.Subcomplex) (p : Y ‚ü∂ X) :
    (A ‚äî B).preimage p = A.preimage p ‚äî B.preimage p := rfl

@[simp]
lemma preimage_min (A B : X.Subcomplex) (p : Y ‚ü∂ X) :
    (A ‚äì B).preimage p = A.preimage p ‚äì B.preimage p := rfl

@[simp]
lemma preimage_iSup {Œπ : Type*} (A : Œπ ‚Üí X.Subcomplex) (p : Y ‚ü∂ X) :
    (‚®Ü i, A i).preimage p = ‚®Ü i, (A i).preimage p := by aesop

@[simp]
lemma preimage_iInf {Œπ : Type*} (A : Œπ ‚Üí X.Subcomplex) (p : Y ‚ü∂ X) :
    (‚®Ö i, A i).preimage p = ‚®Ö i, (A i).preimage p := by aesop

@[simps]
def fromPreimage (A : X.Subcomplex) (p : Y ‚ü∂ X) :
    (A.preimage p : SSet) ‚ü∂ (A : SSet) where
  app Œî y := ‚ü®p.app _ y.1, y.2‚ü©
  naturality _ _ f := by
    ext ‚ü®y, hy‚ü©
    dsimp
    ext
    exact FunctorToTypes.naturality _ _ p f y

lemma ofSimplex_eq_range {X : SSet.{u}} {n : ‚Ñï} (x : X _‚¶ãn‚¶å) :
    Subcomplex.ofSimplex x = range (yonedaEquiv.symm x) := by
  simp only [Subcomplex.range_eq_ofSimplex, Equiv.apply_symm_apply]

@[simp]
lemma preimage_Œπ {X : SSet.{u}} (A : X.Subcomplex) :
    A.preimage A.Œπ = ‚ä§ := by
  aesop

/-def ofSimplex {n : ‚Ñï} (x : X _[n]) : X.Subcomplex :=
  range ((X.yonedaEquiv (.mk n)).symm x)-/

--@[simp]
--lemma range_eq_ofSimplex {n : ‚Ñï} (f : Œî[n] ‚ü∂ X) :
--    range f = ofSimplex (X.yonedaEquiv _ f) := by
--  simp [ofSimplex]

/-lemma mem_ofSimplex_obj {n : ‚Ñï} (x : X _[n]) : x ‚àà (ofSimplex x).obj _ := by
  refine ‚ü®standardSimplex.objMk .id, ?_‚ü©
  obtain ‚ü®x, rfl‚ü© := (X.yonedaEquiv _).surjective x
  rw [Equiv.symm_apply_apply]
  rfl

lemma ofSimplex_le_iff {n : ‚Ñï} (x : X _[n]) (A : X.Subcomplex) :
    ofSimplex x ‚â§ A ‚Üî x ‚àà A.obj _ := by
  constructor
  ¬∑ intro h
    apply h
    apply mem_ofSimplex_obj
  ¬∑ rintro h m _ ‚ü®y, rfl‚ü©
    obtain ‚ü®f, rfl‚ü© := (standardSimplex.objEquiv _ _).symm.surjective y
    exact A.map f.op h-/

lemma mem_ofSimplex_obj_iff {n : ‚Ñï} (x : X _‚¶ãn‚¶å) {m : SimplexCategory·µí·µñ} (y : X.obj m) :
    y ‚àà (ofSimplex x).obj m ‚Üî ‚àÉ (f : m.unop ‚ü∂ ‚¶ãn‚¶å), X.map f.op x = y := by
  simp [ofSimplex, Subpresheaf.ofSection]
  aesop

lemma le_ofSimplex_iff (x : X _‚¶ã0‚¶å) (A : X.Subcomplex) :
    A ‚â§ ofSimplex x ‚Üî A.Œπ = const x := by
  constructor
  ¬∑ intro h
    ext m ‚ü®x, hx‚ü©
    obtain ‚ü®f, rfl‚ü© := h _ hx
    obtain rfl : f = (SimplexCategory.const _ _ 0).op := Quiver.Hom.unop_inj (by aesop)
    simp
  ¬∑ intro h
    simp only [‚Üê A.range_Œπ, h]
    rintro m _ ‚ü®y, rfl‚ü©
    rw [const_app]
    exact Subpresheaf.map _ _ (mem_ofSimplex_obj x)

end

section

variable {Y} (S : X.Subcomplex) (f : X ‚ü∂ Y)

abbrev image : Y.Subcomplex := Subpresheaf.image S f

lemma image_le_iff (Z : Y.Subcomplex) :
    S.image f ‚â§ Z ‚Üî S ‚â§ Z.preimage f := by
  simp [Subpresheaf.le_def]

lemma image_top : (‚ä§ : X.Subcomplex).image f = range f := by aesop

lemma image_comp {Z : SSet.{u}} (g : Y ‚ü∂ Z) :
    S.image (f ‚â´ g) = (S.image f).image g := by aesop

lemma range_comp {Z : SSet.{u}} (g : Y ‚ü∂ Z) :
    Subcomplex.range (f ‚â´ g) = (Subcomplex.range f).image g := by
  simp only [‚Üê image_top, image_comp]

lemma image_eq_range : S.image f = range (S.Œπ ‚â´ f) := by
  simp only [range_comp, Subpresheaf.range_Œπ]

lemma image_iSup {Œπ : Type*} (S : Œπ ‚Üí X.Subcomplex) (f : X ‚ü∂ Y) :
    image (‚®Ü i, S i) f = ‚®Ü i, (S i).image f := by
  aesop

@[simp]
lemma preimage_range : (range f).preimage f = ‚ä§ :=
  le_antisymm (by simp) (by rw [‚Üê image_le_iff, image_top])

lemma image_le_range : S.image f ‚â§ range f := by
  simp only [image_le_iff, preimage_range, le_top]

@[simp]
lemma image_ofSimplex {n : ‚Ñï} (x : X _‚¶ãn‚¶å) (f : X ‚ü∂ Y) :
    (ofSimplex x).image f = ofSimplex (f.app _ x) := by
  apply le_antisymm
  ¬∑ rw [image_le_iff, ofSimplex_le_iff, preimage_obj, Set.mem_preimage]
    apply mem_ofSimplex_obj
  ¬∑ rw [ofSimplex_le_iff]
    exact ‚ü®x, mem_ofSimplex_obj _, rfl‚ü©

def toImage : (S : SSet) ‚ü∂ (S.image f : SSet) :=
  (S.image f).lift (S.Œπ ‚â´ f) (by simp [Subpresheaf.range_comp])

@[reassoc (attr := simp)]
lemma toImage_Œπ : S.toImage f ‚â´ (S.image f).Œπ = S.Œπ ‚â´ f := rfl

instance : Epi (S.toImage f) := by
  rw [‚Üê range_eq_top_iff]
  apply le_antisymm (by simp)
  rintro m ‚ü®_, ‚ü®y, hy, rfl‚ü©‚ü© _
  exact ‚ü®‚ü®y, hy‚ü©, rfl‚ü©

end

section

lemma _root_.Set.preimage_eq_iff {X Y : Type*} (f : X ‚Üí Y)
    (hf : Function.Injective f) (A : Set X) (B : Set Y) :
    B.preimage f = A ‚Üî B ‚äì Set.range f = A.image f := by
  constructor
  ¬∑ aesop
  ¬∑ intro h
    ext x
    constructor
    ¬∑ intro hx
      obtain ‚ü®y, hy, hx‚ü© : f x ‚àà f '' A := by
        rw [‚Üê h]
        exact ‚ü®hx, by aesop‚ü©
      simpa only [‚Üê hf hx] using hy
    ¬∑ intro hx
      have : f '' A ‚â§ B := by
        rw [‚Üê h]
        exact inf_le_left
      apply this
      aesop

lemma preimage_eq_iff {X Y : SSet.{u}}
    (f : X ‚ü∂ Y) (A : X.Subcomplex) (B : Y.Subcomplex) [Mono f] :
    B.preimage f = A ‚Üî B ‚äì Subcomplex.range f = A.image f := by
  simp only [Subpresheaf.ext_iff, funext_iff]
  apply forall_congr'
  intro i
  apply Set.preimage_eq_iff
  rw [‚Üê mono_iff_injective]
  infer_instance

lemma preimage_eq_top_iff {X Y : SSet.{u}}
    (f : X ‚ü∂ Y) (B : Y.Subcomplex) :
    B.preimage f = ‚ä§ ‚Üî range f ‚â§ B := by
  constructor
  ¬∑ rintro h _ x ‚ü®y, rfl‚ü©
    exact h.symm.le _ (by simp)
  ¬∑ aesop

@[simp]
lemma preimage_image_of_isIso {X Y : SSet.{u}} (f : X ‚ü∂ Y) (B : Y.Subcomplex) [IsIso f] :
    (B.preimage f).image f = B := by
  apply le_antisymm
  ¬∑ rw [image_le_iff]
  ¬∑ intro n y hy
    exact ‚ü®(inv f).app _ y, by simpa [‚Üê FunctorToTypes.comp]‚ü©

@[simp]
lemma image_preimage_of_isIso {X Y : SSet.{u}} (f : X ‚ü∂ Y) (A : X.Subcomplex) [IsIso f] :
    (A.image f).preimage f = A := by
  rw [preimage_eq_iff]
  apply le_antisymm
  ¬∑ exact inf_le_left
  ¬∑ apply le_inf le_rfl (image_le_range A f)

end

section

variable {Y} (f : X ‚ü∂ Y) {B : Y.Subcomplex} (hf : B.preimage f = ‚ä§)

def lift : X ‚ü∂ B :=
  (topIso X).inv ‚â´ homOfLE (by simp [hf]) ‚â´ B.fromPreimage f

@[reassoc (attr := simp)]
lemma lift_Œπ : lift f hf ‚â´ B.Œπ = f := rfl

@[simp]
lemma lift_app_coe {n : SimplexCategory·µí·µñ} (x : X.obj n) :
    ((lift f g).app _ x).1 = f.app _ x := rfl

end

section

variable {n : ‚Ñï} (x : X _‚¶ãn‚¶å)

def toOfSimplex : Œî[n] ‚ü∂ ofSimplex x :=
  Subcomplex.lift (yonedaEquiv.symm x) (by
    apply le_antisymm (by simp)
    simp only [‚Üê image_le_iff, image_top, range_eq_ofSimplex,
      Equiv.apply_symm_apply, le_refl])

@[reassoc (attr := simp)]
lemma toOfSimplex_Œπ :
    toOfSimplex x ‚â´ (ofSimplex x).Œπ = yonedaEquiv.symm x := rfl

instance : Epi (toOfSimplex x) := by
  rw [‚Üê range_eq_top_iff]
  ext m ‚ü®_, u, rfl‚ü©
  simp only [Subpresheaf.toPresheaf_obj, range_eq_ofSimplex, Subpresheaf.top_obj, Set.top_eq_univ,
    Set.mem_univ, iff_true]
  refine ‚ü®u, ?_‚ü©
  dsimp
  ext
  conv_rhs => rw [‚Üê yonedaEquiv.right_inv x]
  rfl

lemma isIso_toOfSimplex_iff :
    IsIso (toOfSimplex x) ‚Üî Mono (yonedaEquiv.symm x) := by
  constructor
  ¬∑ intro
    rw [‚Üê toOfSimplex_Œπ]
    infer_instance
  ¬∑ intro h
    have := mono_of_mono_fac (toOfSimplex_Œπ x)
    apply isIso_of_mono_of_epi

end

section

variable {Y} (f : Y ‚ü∂ X) (A B : X.Subcomplex) (A' B' : Y.Subcomplex)
    (hA' : A' = A.preimage f ‚äì B')
    (hB : B = A ‚äî B'.image f)

namespace pushoutCoconeOfPullback

variable {f A A' B'}

@[simps!]
def g‚ÇÅ : (A' : SSet) ‚ü∂ (A : SSet) :=
  homOfLE (by simpa only [hA'] using inf_le_left) ‚â´ A.fromPreimage f

@[simps!]
def g‚ÇÇ : (A' : SSet) ‚ü∂ (B' : SSet) :=
  homOfLE (by simpa only [hA'] using inf_le_right)

end pushoutCoconeOfPullback

open pushoutCoconeOfPullback

@[simps!]
def pushoutCoconeOfPullback : PushoutCocone (g‚ÇÅ hA') (g‚ÇÇ hA') :=
  PushoutCocone.mk (W := (B : SSet)) (homOfLE (by simpa only [hB] using le_sup_left))
    (homOfLE (by simpa only [‚Üê image_le_iff, hB] using le_sup_right) ‚â´ B.fromPreimage f) rfl

noncomputable def isColimitPushoutCoconeOfPullback [hf : Mono f] :
    IsColimit (pushoutCoconeOfPullback f A B A' B' hA' hB) :=
  evaluationJointlyReflectsColimits _ (fun n ‚Ü¶
    (PushoutCocone.isColimitMapCoconeEquiv _ _).2
      (Types.isColimitPushoutCoconeOfPullbackSets (f := f.app n)
      (A.obj n) (B.obj n) (A'.obj n) (B'.obj n) (by rw [hA']; rfl) (by rw [hB]; rfl)
        (by
          rw [NatTrans.mono_iff_mono_app] at hf
          simp only [mono_iff_injective] at hf
          rintro ‚ü®x‚ÇÅ, _‚ü© ‚ü®x‚ÇÇ, _‚ü© h
          simpa only [Subtype.mk.injEq] using hf n h)))

end

variable {Y} in
noncomputable def prodIso (S : X.Subcomplex) (T : Y.Subcomplex) :
    (S.prod T : SSet) ‚âÖ (S : SSet) ‚äó (T : SSet) where
  hom := ChosenFiniteProducts.lift
    (lift ((S.prod T).Œπ ‚â´ ChosenFiniteProducts.fst _ _) (by
      ext n ‚ü®x, h‚ü©
      simpa using h.1))
    (lift ((S.prod T).Œπ ‚â´ ChosenFiniteProducts.snd _ _) (by
      ext n ‚ü®x, h‚ü©
      simpa using h.2))
  inv := lift (S.Œπ ‚äó T.Œπ) (by
    ext n ‚ü®x, y‚ü©
    dsimp
    simp only [Set.mem_preimage, tensorHom_app_apply, Subpresheaf.Œπ_app,
      Set.mem_univ, iff_true]
    exact ‚ü®x.2, y.2‚ü©)

namespace unionProd

variable {Y} (S : X.Subcomplex) (T : Y.Subcomplex)

noncomputable def Œπ‚ÇÅ : X ‚äó T ‚ü∂ unionProd S T :=
  lift (X ‚óÅ T.Œπ) (by
    ext m ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©
    simp [unionProd, Set.prod]
    exact Or.inl x‚ÇÇ.2)

noncomputable def Œπ‚ÇÇ : (S : SSet.{u}) ‚äó Y ‚ü∂ (unionProd S T : SSet.{u}) :=
  lift (S.Œπ ‚ñ∑ Y) (by
    ext m ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©
    simp [unionProd, Set.prod]
    exact Or.inr x‚ÇÅ.2)

@[reassoc (attr := simp)]
lemma Œπ‚ÇÅ_Œπ : Œπ‚ÇÅ S T ‚â´ (unionProd S T).Œπ = X ‚óÅ T.Œπ := rfl

@[reassoc (attr := simp)]
lemma Œπ‚ÇÇ_Œπ : Œπ‚ÇÇ S T ‚â´ (unionProd S T).Œπ = S.Œπ ‚ñ∑ Y := rfl

lemma sq : Sq (S.prod T) ((‚ä§ : X.Subcomplex).prod T) (S.prod ‚ä§) (unionProd S T) where
  max_eq := rfl
  min_eq := by
    ext n ‚ü®x, y‚ü©
    change _ ‚àß _ ‚Üî _
    simp [prod, Set.prod, Membership.mem, Set.Mem, setOf]
    tauto

lemma isPushout : IsPushout (S.Œπ ‚ñ∑ (T : SSet)) ((S : SSet) ‚óÅ T.Œπ)
    (unionProd.Œπ‚ÇÅ S T) (unionProd.Œπ‚ÇÇ S T) :=
  (sq S T).isPushout.of_iso
    (Subcomplex.prodIso _ _)
    (Subcomplex.prodIso _ _ ‚â™‚â´ MonoidalCategory.whiskerRightIso (topIso X) _)
    (Subcomplex.prodIso _ _ ‚â™‚â´ MonoidalCategory.whiskerLeftIso _ (topIso Y))
    (Iso.refl _) rfl rfl rfl rfl

@[simp]
lemma preimage_Œ≤_hom : (unionProd S T).preimage (Œ≤_ _ _).hom = unionProd T S := by
  ext n ‚ü®x, y‚ü©
  simp only [mem_unionProd_iff, preimage_obj, Set.mem_preimage,
    braiding_hom_apply_fst, braiding_hom_apply_snd]
  tauto

@[simp]
lemma preimage_Œ≤_inv : (unionProd S T).preimage (Œ≤_ _ _).inv = unionProd T S := by
  apply preimage_Œ≤_hom

@[simp]
lemma image_Œ≤_hom : (unionProd S T).image (Œ≤_ _ _).hom = unionProd T S := by
  rw [‚Üê preimage_Œ≤_hom, preimage_image_of_isIso]

@[simp]
lemma image_Œ≤_inv : (unionProd S T).image (Œ≤_ _ _).hom = unionProd T S := by
  apply image_Œ≤_hom


noncomputable def symmIso : (unionProd S T : SSet) ‚âÖ (unionProd T S : SSet) where
  hom := lift ((unionProd S T).Œπ ‚â´ (Œ≤_ _ _).hom) (by
    simp only [Subcomplex.preimage_eq_top_iff, range_comp, Subpresheaf.range_Œπ, image_Œ≤_hom,
      le_refl])
  inv := lift ((unionProd T S).Œπ ‚â´ (Œ≤_ _ _).hom) (by
    simp only [Subcomplex.preimage_eq_top_iff, range_comp, Subpresheaf.range_Œπ, image_Œ≤_hom,
      le_refl])

end unionProd

section multicoequalizer

variable {A : X.Subcomplex} {Œπ : Type*}
  {U : Œπ ‚Üí X.Subcomplex} {V : Œπ ‚Üí Œπ ‚Üí X.Subcomplex}
  (h : CompleteLattice.MulticoequalizerDiagram A U V)

noncomputable def multicoforkIsColimit :
    IsColimit (h.multicofork.map toPresheafFunctor) :=
  evaluationJointlyReflectsColimits _ (fun n ‚Ü¶ by
    have h' : CompleteLattice.MulticoequalizerDiagram (A.obj n) (fun i ‚Ü¶ (U i).obj n)
        (fun i j ‚Ü¶ (V i j).obj n) :=
      { min_eq := by simp [‚Üê h.min_eq]
        iSup_eq := by simp [‚Üê h.iSup_eq] }
    exact (Multicofork.isColimitMapEquiv _ _).2 (Types.isColimitMulticoforkMapSetToTypes h'))

noncomputable def multicoforkIsColimit' [LinearOrder Œπ] :
    IsColimit (h.multicofork.toLinearOrder.map toPresheafFunctor) :=
  Multicofork.isColimitToLinearOrder _ (multicoforkIsColimit h)
    { iso i j := toPresheafFunctor.mapIso (eqToIso (by
        dsimp
        rw [‚Üê h.min_eq, ‚Üê h.min_eq, inf_comm]))
      iso_hom_fst _ _ := rfl
      iso_hom_snd _ _ := rfl
      fst_eq_snd _ := rfl }

end multicoequalizer

section

variable {Y}

lemma hom_ext (B : Y.Subcomplex) {f g : X ‚ü∂ B} (h : f ‚â´ B.Œπ = g ‚â´ B.Œπ): f = g := by
  simpa only [cancel_mono] using h

lemma hom_ext_of_eq_bot {A : X.Subcomplex} (h : A = ‚ä•) {f g : (A : SSet) ‚ü∂ Y} : f = g := by
  ext _ ‚ü®x, hx‚ü©
  simp [h] at hx

end

lemma preimage_preimage {X Y Z : SSet.{u}} (A : Z.Subcomplex) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    A.preimage (f ‚â´ g) = (A.preimage g).preimage f := rfl

lemma preimage_Œπ_comp_eq_top_iff {X Y : SSet.{u}} (B : Y.Subcomplex) (A : X.Subcomplex) (f : X ‚ü∂ Y) :
    B.preimage (A.Œπ ‚â´ f) = ‚ä§ ‚Üî A ‚â§ B.preimage f := by
  simp only [‚Üê top_le_iff, preimage_preimage, ‚Üê Subcomplex.image_le_iff, image_top,
    Subpresheaf.range_Œπ]

section

variable {X : SSet.{u}} {A B : X.Subcomplex} (h : A = B)

@[reassoc (attr := simp)]
lemma isoOfEq_hom_Œπ : (isoOfEq h).hom ‚â´ B.Œπ = A.Œπ := rfl

@[reassoc (attr := simp)]
lemma isoOfEq_inv_Œπ : (isoOfEq h).inv ‚â´ A.Œπ = B.Œπ := rfl

end

@[simp]
lemma iSup_obj {Œπ : Sort*} (S : Œπ ‚Üí X.Subcomplex) (U : SimplexCategory·µí·µñ) :
    (‚®Ü i, S i).obj U = ‚ãÉ i, (S i).obj U := by
  simp [iSup, Subpresheaf.sSup_obj]

instance : Subsingleton ((‚ä• : X.Subcomplex).toSSet ‚ü∂ Y) where
  allEq f g := by
    ext _ ‚ü®x, hx‚ü©
    simp at hx

instance : Inhabited ((‚ä• : X.Subcomplex).toSSet ‚ü∂ Y) where
  default :=
    { app _ := fun ‚ü®_, hx‚ü© ‚Ü¶ by simp at hx
      naturality _ _ _ := by
        ext ‚ü®_, hx‚ü©
        simp at hx }

instance : Unique ((‚ä• : X.Subcomplex).toSSet ‚ü∂ Y) where
  uniq _ := Subsingleton.elim _ _

def botIsInitial : IsInitial (‚ä• : X.Subcomplex).toSSet :=
  IsInitial.ofUnique _

end Subcomplex

end SSet
