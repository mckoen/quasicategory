import Quasicategory.TopCatModelCategory.Fin
import Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal
import Mathlib.CategoryTheory.Limits.FunctorCategory.EpiMono

universe u

open CategoryTheory Opposite Simplicial

@[simp]
lemma SimplexCategory.mkOfSucc_zero :
    mkOfSucc (0 : Fin 1) = ùüô _ := by
  ext i
  fin_cases i <;> rfl

namespace SSet

variable {X Y : SSet.{u}} (f : X ‚ü∂ Y)

lemma œÉ_injective {n : ‚Ñï} (i : Fin (n + 1)) : Function.Injective (X.œÉ i) := fun x‚ÇÅ x‚ÇÇ h ‚Ü¶ by
  rw [‚Üê Œ¥_comp_œÉ_self_apply i x‚ÇÅ, ‚Üê Œ¥_comp_œÉ_self_apply i x‚ÇÇ, h]

lemma mono_iff_of_strictSegal [StrictSegal X] :
    Mono f ‚Üî Function.Injective (f.app (op (.mk 1))) := by
  rw [NatTrans.mono_iff_mono_app]
  simp only [mono_iff_injective]
  refine ‚ü®fun hf ‚Ü¶ hf _, fun hf ‚ü®k‚ü© ‚Ü¶ ?_‚ü©
  induction' k using SimplexCategory.rec with k
  obtain _ | k := k
  ¬∑ intro x y h
    apply œÉ_injective 0
    apply StrictSegal.spineInjective
    ext i
    fin_cases i
    apply hf
    dsimp [StrictSegal.spineEquiv]
    simp only [Fin.isValue, SimplexCategory.mkOfSucc_zero, op_id, FunctorToTypes.map_id_apply,
      œÉ_naturality_apply, h]
  ¬∑ intro x y h
    apply StrictSegal.spineInjective
    ext i
    apply hf
    dsimp [StrictSegal.spineEquiv]
    simp only [FunctorToTypes.naturality, h]

end SSet
