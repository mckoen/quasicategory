import Mathlib.AlgebraicTopology.SimplicialSet.Monoidal
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq
import Mathlib.Combinatorics.Quiver.ReflQuiver
import Mathlib.AlgebraicTopology.SimplicialSet.Horn
import Mathlib.AlgebraicTopology.SimplicialSet.Boundary
import Mathlib.CategoryTheory.LiftingProperties.ParametrizedAdjunction
import Mathlib.CategoryTheory.MorphismProperty.TransfiniteComposition
import Quasicategory.MorphismProperty

universe w v v' u u'

open CategoryTheory MonoidalCategory Limits

namespace CategoryTheory.PushoutProduct

variable {C : Type u} [Category.{v} C] [MonoidalCategory C] [HasPushouts C]

section Defs

variable {A B X Y : C} (f : A ‚ü∂ B) (g : X ‚ü∂ Y)

@[simp]
noncomputable
abbrev pt : C := (Functor.PushoutObjObj.ofHasPushout (curriedTensor C) f g).pt

/-- The pushout-product of `f` and `g`. -/
@[simp]
noncomputable
abbrev pushoutProduct : pushout (f ‚ñ∑ X) (A ‚óÅ g) ‚ü∂ B ‚äó Y :=
  (Functor.PushoutObjObj.ofHasPushout (curriedTensor C) f g).Œπ

/-- Notation for the pushout-product. -/
scoped infixr:80 " ‚ñ° " => PushoutProduct.pushoutProduct

end Defs

section Functor

variable (h : Arrow C) {f g : Arrow C} (sq : f ‚ü∂ g)

@[simp]
noncomputable
def leftFunctor_map_left  :
    pt h.hom f.hom ‚ü∂ pt h.hom g.hom :=
  pushout.map _ _ _ _
    (h.right ‚óÅ sq.left) (h.left ‚óÅ sq.right) (h.left ‚óÅ sq.left)
    (whisker_exchange _ _).symm (by simp [‚Üê MonoidalCategory.whiskerLeft_comp, Arrow.w])

@[simp]
noncomputable
def leftFunctor_map :
    Arrow.mk (h.hom ‚ñ° f.hom) ‚ü∂ Arrow.mk (h.hom ‚ñ° g.hom) where
  left := leftFunctor_map_left h sq
  right := h.right ‚óÅ sq.right
  w := by
    dsimp [Functor.PushoutObjObj.Œπ]
    apply pushout.hom_ext
    ¬∑ simp [‚Üê MonoidalCategory.whiskerLeft_comp, Arrow.w]
    ¬∑ simp [‚Üê whisker_exchange]

@[simp]
noncomputable
def leftFunctor : Arrow C ‚•§ Arrow C where
  obj f := h.hom ‚ñ° f.hom
  map := leftFunctor_map h

@[simp]
noncomputable
def leftBifunctor_map_left :
    pt f.hom h.hom ‚ü∂ pt g.hom h.hom :=
  pushout.map _ _ _ _
    (sq.right ‚ñ∑ h.left) (sq.left ‚ñ∑ h.right) (sq.left ‚ñ∑ h.left)
    (by simp [‚Üê MonoidalCategory.comp_whiskerRight, Arrow.w]) (whisker_exchange sq.left h.hom)

@[simp]
noncomputable
def leftBifunctor_map :
    leftFunctor f ‚ü∂ leftFunctor g where
  app h := {
    left := leftBifunctor_map_left h sq
    right := sq.right ‚ñ∑ h.right
    w := by
      dsimp [Functor.PushoutObjObj.Œπ]
      apply pushout.hom_ext
      ¬∑ simp [whisker_exchange]
      ¬∑ simp [‚Üê MonoidalCategory.comp_whiskerRight, Arrow.w] }
  naturality f' g' sq' := by
    apply Arrow.hom_ext
    ¬∑ apply pushout.hom_ext
      all_goals simp [‚Üê whisker_exchange_assoc]
    ¬∑ exact (whisker_exchange _ _)

@[simps!]
noncomputable
def leftBifunctor : Arrow C ‚•§ Arrow C ‚•§ Arrow C where
  obj := leftFunctor
  map := leftBifunctor_map

end Functor

section NatTrans

variable {D : Type u'} [Category.{v'} D]

variable {F G : D ‚•§ C} (h : F ‚ü∂ G)

variable {X Y : C} (g : X ‚ü∂ Y)

/-- `(A : D) ‚Ü¶ (h.app A : F.obj A ‚ü∂ G.obj A)` -/
@[simps!]
def _root_.CategoryTheory.NatTrans.arrowFunctor : D ‚•§ Arrow C where
  obj A := Arrow.mk (h.app A)
  map f := Arrow.homMk' _ _ (h.naturality f)

@[simps]
def _root_.CategoryTheory.NatTrans.arrowFunctor_NatTrans {G' : D ‚•§ C} (h' : G ‚ü∂ G') :
    NatTrans.arrowFunctor h ‚ü∂ NatTrans.arrowFunctor (h ‚â´ h') where
  app X := Arrow.homMk' (ùüô _) (h'.app X)

/-- `(A : D) ‚Ü¶ pushout (g ‚ñ∑ F.obj A) (X ‚óÅ h.app A)` -/
@[simps!]
noncomputable
def natTransLeftFunctor : D ‚•§ C := NatTrans.arrowFunctor h ‚ãô leftFunctor g ‚ãô Arrow.leftFunc

-- include interactions with whiskering

@[simp]
noncomputable
def natTransLeftFunctor_comp {G' : D ‚•§ C} (h' : G ‚ü∂ G') :
    (natTransLeftFunctor h g) ‚ü∂ (natTransLeftFunctor (h ‚â´ h') g) :=
  whiskerRight (NatTrans.arrowFunctor_NatTrans h h') _

@[simps!]
noncomputable
def inlDescFunctor : (F ‚ãô tensorLeft Y) ‚ü∂ (natTransLeftFunctor h g) where
  app A := (Functor.PushoutObjObj.ofHasPushout (curriedTensor C) g (h.app A)).inl

@[simps!]
noncomputable
def inrDescFunctor : (G ‚ãô tensorLeft X) ‚ü∂ (natTransLeftFunctor h g) where
  app A := (Functor.PushoutObjObj.ofHasPushout (curriedTensor C) g (h.app A)).inr

@[simps!]
noncomputable
def descFunctor : (natTransLeftFunctor h g) ‚ü∂ (G ‚ãô tensorLeft Y) where
  app A := g ‚ñ° h.app A
  naturality _ _ _ := by
    dsimp [Functor.PushoutObjObj.Œπ]
    apply pushout.hom_ext
    ¬∑ simp [‚Üê MonoidalCategory.whiskerLeft_comp]
    ¬∑ simp [whisker_exchange]

end NatTrans

--variable (hp : IsColimit (PushoutCocone.mk _ _ h.w))

section

variable {A B X Y : C} {f : A ‚ü∂ B} {g : X ‚ü∂ Y} {s : X ‚ü∂ A} {t : Y ‚ü∂ B}

variable (S : C) [hS : PreservesColimitsOfSize (tensorLeft S)]

def whiskerPushoutAux (s : X ‚ü∂ A) (g : X ‚ü∂ Y) :
    IsPushout (S ‚óÅ s) (S ‚óÅ g) (S ‚óÅ (pushout.inl s g)) (S ‚óÅ (pushout.inr s g)) where
  w := by simp only [‚Üê MonoidalCategory.whiskerLeft_comp, pushout.condition]
  isColimit' := ‚ü®Limits.isColimitOfHasPushoutOfPreservesColimit (tensorLeft S) s g‚ü©

def whiskerPushout (h : IsPushout s g f t) :
    IsPushout (S ‚óÅ s) (S ‚óÅ g) (S ‚óÅ f) (S ‚óÅ t) :=
  (whiskerPushoutAux S s g).of_iso (Iso.refl _) (Iso.refl _) (Iso.refl _)
    (whiskerLeftIso S h.isoPushout).symm (by simp) (by simp)
    (by simp [‚Üê MonoidalCategory.whiskerLeft_comp, IsPushout.inl_isoPushout_inv])
    (by simp [‚Üê MonoidalCategory.whiskerLeft_comp, IsPushout.inl_isoPushout_inv])

end

section Pushout

variable {f g : Arrow C} (Œπ : Arrow C) (h : f ‚ü∂ g) (hp : IsColimit (PushoutCocone.mk _ _ h.w))

variable [hS : ‚àÄ S : C, PreservesColimitsOfSize (tensorLeft S)]

variable (s : PushoutCocone ((leftBifunctor.obj Œπ).map h).left ((leftBifunctor.obj Œπ).obj f).hom)

@[simp]
noncomputable
def temp_desc : ((leftFunctor Œπ).obj g).right ‚ü∂ s.pt :=
  (whiskerPushout Œπ.right (IsPushout.of_isColimit hp)).desc
    ((pushout.inl _ _) ‚â´ s.inl) s.inr
    (by simpa [pushout.inr_desc_assoc, Functor.PushoutObjObj.Œπ] using (pushout.inl _ _) ‚â´= s.condition)

def temp_fac_left : ((leftFunctor Œπ).obj g).hom ‚â´ temp_desc Œπ h hp s = s.inl := by
  simp [Functor.PushoutObjObj.Œπ]
  apply pushout.hom_ext
  ¬∑ simp
  ¬∑ apply (whiskerPushout _ (IsPushout.of_isColimit hp)).hom_ext
    ¬∑ simp [‚Üê pushout.condition_assoc, whisker_exchange_assoc]
    ¬∑ simp [whisker_exchange_assoc]
      have := pushout.inr _ _ ‚â´= s.condition
      simp [Functor.PushoutObjObj.Œπ] at this
      rw [this]

def temp_uniq (m : ((leftBifunctor.obj Œπ).obj g).right ‚ü∂ s.pt)
    (fac_left : ((leftBifunctor.obj Œπ).obj g).hom ‚â´ m = s.inl)
    (fac_right : ((leftBifunctor.obj Œπ).map h).right ‚â´ m = s.inr) : m = temp_desc Œπ h hp s := by
  apply (whiskerPushout _ (IsPushout.of_isColimit hp)).hom_ext
  ¬∑ simpa [Functor.PushoutObjObj.Œπ] using pushout.inl _ _ ‚â´= fac_left
  ¬∑ simpa

noncomputable
def leftFunctor_map_preserves_pushouts
      {f g : Arrow C} (Œπ : Arrow C) (h : f ‚ü∂ g) (hp : IsColimit (PushoutCocone.mk _ _ h.w)) :
    IsColimit (PushoutCocone.mk _ _ ((leftBifunctor.obj Œπ).map h).w) :=
  PushoutCocone.IsColimit.mk _ (temp_desc Œπ h hp) (temp_fac_left Œπ h hp)
    (by simp) (temp_uniq Œπ h hp)

def leftFunctor_map_preserves_pushouts' {A B X Y Z W : C} {f : A ‚ü∂ B} {g : X ‚ü∂ Y} {s : X ‚ü∂ A} {t : Y ‚ü∂ B}
      (Œπ : Z ‚ü∂ W) (h : IsPushout s g f t) :
    IsPushout ((leftBifunctor.obj (Arrow.mk Œπ)).map (Arrow.homMk' s t h.w)).left
      (Œπ ‚ñ° g)
      (Œπ ‚ñ° f)
      (W ‚óÅ t) := by
  apply IsPushout.of_isColimit' ‚ü®((leftBifunctor.obj (Arrow.mk Œπ)).map (Arrow.homMk' _ _ h.w)).w‚ü©
  apply leftFunctor_map_preserves_pushouts
  exact h.isColimit

end Pushout

section Transfinite

variable (J : Type w) [LinearOrder J] [SuccOrder J] [OrderBot J] [WellFoundedLT J]

variable {A B X Y : C} {f : A ‚ü∂ B} (Œπ : X ‚ü∂ Y) (h : TransfiniteCompositionOfShape J f)

variable [hX : PreservesColimitsOfSize (tensorLeft X)] [hY : PreservesColimitsOfSize (tensorLeft Y)]

noncomputable
def temp_isoBot : (natTransLeftFunctor h.incl Œπ).obj ‚ä• ‚âÖ pushout (Œπ ‚ñ∑ A) (X ‚óÅ f) := by
  have : Arrow.mk (h.incl.app ‚ä•) ‚âÖ Arrow.mk f :=
    Arrow.isoMk h.isoBot (Iso.refl _) (by simpa using (h.isoBot.inv_comp_eq.1 h.fac).symm)
  exact Comma.leftIso ((leftFunctor (Arrow.mk Œπ)).mapIso this)

noncomputable
def temp_isColimit {m : J} (hm : Order.IsSuccLimit m) :
    (IsColimit ((Set.principalSegIio m).cocone (natTransLeftFunctor h.incl Œπ))) where
  desc := by
    intro s
    refine pushout.desc
      ((isColimitOfPreserves (tensorLeft Y) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).desc <|
        Cocone.mk s.pt ((whiskerLeft ((Set.principalSegIio m).monotone.functor) (inlDescFunctor h.incl Œπ)) ‚â´ s.Œπ))
      (pushout.inr _ _ ‚â´ s.Œπ.app ‚ü®‚ä•, hm.bot_lt‚ü©) ?_
    ¬∑ apply (isColimitOfPreserves (tensorLeft X) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).hom_ext
      intro j
      have h‚ÇÅ := (s.Œπ.naturality (homOfLE <| (Subtype.coe_le_coe.mp bot_le : ‚ü®‚ä•, hm.bot_lt‚ü© ‚â§ j)))
      have h‚ÇÇ := ((isColimitOfPreserves (tensorLeft Y) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).fac <|
        Cocone.mk s.pt ((whiskerLeft ((Set.principalSegIio m).monotone.functor) (inlDescFunctor h.incl Œπ)) ‚â´ s.Œπ)) j
      simp only [Functor.comp_obj, Monotone.functor_obj, Set.principalSegIio_toRelEmbedding,
        natTransLeftFunctor_obj, Functor.const_obj_obj, homOfLE_leOfHom, Functor.comp_map,
        natTransLeftFunctor_map, Functor.const_obj_map, MonoidalCategory.whiskerLeft_id,
        Category.comp_id, tensorLeft_obj, Functor.mapCocone_pt, PrincipalSeg.cocone_pt,
        Set.principalSegIio_top, Functor.mapCocone_Œπ_app, PrincipalSeg.cocone_Œπ_app, tensorLeft_map,
        NatTrans.comp_app, whiskerLeft_app, inlDescFunctor_app] at h‚ÇÅ h‚ÇÇ
      simp only [Functor.comp_obj, Monotone.functor_obj, Set.principalSegIio_toRelEmbedding,
        tensorLeft_obj, Functor.mapCocone_pt, PrincipalSeg.cocone_pt, Set.principalSegIio_top,
        Functor.const_obj_obj, Functor.mapCocone_Œπ_app, PrincipalSeg.cocone_Œπ_app, homOfLE_leOfHom,
        tensorLeft_map, Arrow.mk_left, Functor.id_obj, NatTrans.arrowFunctor_obj_left,
        Arrow.mk_right, Arrow.mk_hom, whisker_exchange_assoc, h‚ÇÇ, NatTrans.arrowFunctor_obj_right,
        NatTrans.arrowFunctor_obj_hom, ‚Üê h‚ÇÅ, colimit.Œπ_desc_assoc, span_right,
        Functor.const_obj_map, PushoutCocone.mk_pt, PushoutCocone.mk_Œπ_app, Category.id_comp, ‚Üê
        MonoidalCategory.whiskerLeft_comp_assoc, NatTrans.naturality, Category.comp_id, ‚Üê
        pushout.condition_assoc]
  fac s j := by
    apply pushout.hom_ext
    ¬∑ simp
      apply (isColimitOfPreserves (tensorLeft Y) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).fac
    ¬∑ have := s.Œπ.naturality (homOfLE <| (Subtype.coe_le_coe.mp bot_le : ‚ü®‚ä•, hm.bot_lt‚ü© ‚â§ j))
      simp only [Functor.comp_obj, Monotone.functor_obj, Set.principalSegIio_toRelEmbedding,
        natTransLeftFunctor_obj, Functor.const_obj_obj, homOfLE_leOfHom, Functor.comp_map,
        natTransLeftFunctor_map, Functor.const_obj_map, MonoidalCategory.whiskerLeft_id,
        Category.comp_id] at this
      simp only [Arrow.mk_left, Functor.id_obj, Monotone.functor_obj,
        Set.principalSegIio_toRelEmbedding, NatTrans.arrowFunctor_obj_right, Functor.const_obj_obj,
        NatTrans.arrowFunctor_obj_left, Arrow.mk_right, Arrow.mk_hom, NatTrans.arrowFunctor_obj_hom,
        Functor.comp_obj, natTransLeftFunctor_obj, PrincipalSeg.cocone_pt, Set.principalSegIio_top,
        PrincipalSeg.cocone_Œπ_app, homOfLE_leOfHom, natTransLeftFunctor_map, Functor.const_obj_map,
        MonoidalCategory.whiskerLeft_id, ‚Üê this, colimit.Œπ_desc_assoc, span_right,
        PushoutCocone.mk_pt, PushoutCocone.mk_Œπ_app, Category.id_comp, colimit.Œπ_desc, span_zero]
  uniq s m' h' := by
    apply pushout.hom_ext
    ¬∑ apply (isColimitOfPreserves (tensorLeft Y) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).hom_ext
      intro j
      have h‚ÇÅ := h' j
      have h‚ÇÇ := (isColimitOfPreserves (tensorLeft Y) (h.isWellOrderContinuous.nonempty_isColimit m hm).some).fac
      simp only [Functor.comp_obj, Monotone.functor_obj, Set.principalSegIio_toRelEmbedding,
        natTransLeftFunctor_obj, Functor.const_obj_obj, PrincipalSeg.cocone_pt,
        Set.principalSegIio_top, PrincipalSeg.cocone_Œπ_app, homOfLE_leOfHom,
        natTransLeftFunctor_map, Functor.const_obj_map, MonoidalCategory.whiskerLeft_id,
        tensorLeft_obj, Functor.mapCocone_pt, Functor.mapCocone_Œπ_app, tensorLeft_map,
        Subtype.forall, Set.mem_Iio] at h‚ÇÅ h‚ÇÇ
      simp [h‚ÇÇ _ j.1 j.2, ‚Üê h‚ÇÅ]
    ¬∑ simp [‚Üê h' ‚ü®‚ä•, hm.bot_lt‚ü©]

instance temp_isWellOrderContinuous : (natTransLeftFunctor h.incl Œπ).IsWellOrderContinuous where
  nonempty_isColimit _ hm := ‚ü®temp_isColimit _ _ _ hm‚ü©

noncomputable
def temp_isColimit' : IsColimit ({ pt := Y ‚äó B, Œπ := descFunctor h.incl Œπ ‚â´ (Functor.constComp J B (tensorLeft Y)).hom } : Cocone (natTransLeftFunctor h.incl Œπ)) where
  desc s :=
    (Limits.isColimitOfPreserves (tensorLeft Y) h.isColimit).desc <| Cocone.mk s.pt ((inlDescFunctor h.incl Œπ) ‚â´ s.Œπ)
  fac s j := by
    simp [Functor.PushoutObjObj.Œπ]
    apply pushout.hom_ext
    ¬∑ simpa using (Limits.isColimitOfPreserves (tensorLeft Y) h.isColimit).fac (Cocone.mk s.pt ((inlDescFunctor h.incl Œπ) ‚â´ s.Œπ)) j
    ¬∑ apply (Limits.isColimitOfPreserves (tensorLeft X) h.isColimit).hom_ext
      intro k
      simp [whisker_exchange_assoc]
      have := (isColimitOfPreserves (tensorLeft Y) h.isColimit).fac (Cocone.mk s.pt ((inlDescFunctor h.incl Œπ) ‚â´ s.Œπ)) k
      simp at this
      rw [this, pushout.condition_assoc]
      by_cases hjk : j ‚â§ k
      ¬∑ have := (s.Œπ.naturality (homOfLE hjk))
        simp only [Functor.const_obj_obj, Category.comp_id, Functor.const_obj_map] at this
        simp [‚Üê this]
      ¬∑ have := (s.Œπ.naturality (homOfLE (not_le.1 hjk).le))
        simp only [Functor.const_obj_obj, Category.comp_id, Functor.const_obj_map] at this
        simp [‚Üê this]
  uniq s m hj := by
    apply (Limits.isColimitOfPreserves (tensorLeft Y) h.isColimit).hom_ext
    intro j
    have := (pushout.inl _ _) ‚â´= hj j
    simp [Functor.PushoutObjObj.Œπ] at this ‚ä¢
    rw [this]
    have := (Limits.isColimitOfPreserves (tensorLeft Y) h.isColimit).fac (Cocone.mk s.pt ((inlDescFunctor h.incl Œπ) ‚â´ s.Œπ)) j
    simp at this
    rw [this]

noncomputable
def leftFunctor_preserves_transfiniteComposition
      (Œπ : X ‚ü∂ Y) (f : A ‚ü∂ B) (h : TransfiniteCompositionOfShape J f) :
    TransfiniteCompositionOfShape J (Œπ ‚ñ° f) where
  F := natTransLeftFunctor h.incl Œπ
  isoBot := temp_isoBot ..
  incl := descFunctor h.incl Œπ ‚â´ ((tensorLeft Y).constComp J B).hom
  isColimit := temp_isColimit' ..
  fac := by
    apply pushout.hom_ext
    ¬∑ simp [Functor.PushoutObjObj.Œπ, temp_isoBot, ‚Üê MonoidalCategory.whiskerLeft_comp]
    ¬∑ simp [Functor.PushoutObjObj.Œπ, temp_isoBot]

variable (W : MorphismProperty C) (hf : W.TransfiniteCompositionOfShape J f)

/-
‚àÄ (j : J), ¬¨IsMax j ‚Üí
  W.saturation (Œõ[2, 1].Œπ ‚ñ° hf.F.map (homOfLE ‚ãØ))

‚àÄ (j : J), ¬¨IsMax j ‚Üí
  W.saturation ((natTransLeftFunctor hf.incl Œõ[2, 1].Œπ).map (homOfLE ‚ãØ))
-/

lemma mflakdw (j : J) (hj : ¬¨IsMax j)
      (hW : ‚àÄ (j : J), ¬¨IsMax j ‚Üí W (Œπ ‚ñ° hf.F.map (homOfLE (Order.le_succ j)))) :
    W.saturation ((natTransLeftFunctor hf.incl Œπ).map (homOfLE (Order.le_succ j))) := by
  sorry

end Transfinite

section Coproduct

variable {A B : C} (f : A ‚ü∂ B)

open Limits in
noncomputable
def c‚ÇÅ' {J : Type*} {X‚ÇÅ X‚ÇÇ : Discrete J ‚•§ C}
    {c‚ÇÅ : Cocone X‚ÇÅ} (c‚ÇÇ : Cocone X‚ÇÇ)
    (h‚ÇÅ : IsColimit c‚ÇÅ) (f' : X‚ÇÅ ‚ü∂ X‚ÇÇ) :
    Cocone (natTransLeftFunctor f' f) := {
      pt := PushoutProduct.pt f (h‚ÇÅ.desc { pt := c‚ÇÇ.pt, Œπ := f' ‚â´ c‚ÇÇ.Œπ })
      Œπ :=
        {
        app j := by
          apply Limits.pushout.desc
            (_ ‚óÅ c‚ÇÅ.Œπ.app j ‚â´ (Limits.pushout.inl _ _))
            (_ ‚óÅ c‚ÇÇ.Œπ.app j ‚â´ (Limits.pushout.inr _ _))
          have := h‚ÇÅ.fac { pt := c‚ÇÇ.pt, Œπ := f' ‚â´ c‚ÇÇ.Œπ } j
          dsimp at this
          simp
          rw [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, ‚Üê this, MonoidalCategory.whiskerLeft_comp_assoc,
            ‚Üê Limits.pushout.condition, whisker_exchange_assoc]
        naturality := by
          intro j k s
          dsimp
          apply Limits.pushout.hom_ext
          ¬∑ simp
            rw [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, c‚ÇÅ.Œπ.naturality]
            simp
          ¬∑ simp
            rw [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, c‚ÇÇ.Œπ.naturality]
            simp } }

variable  {J : Type*} {X‚ÇÅ : Discrete J ‚•§ C}  {X‚ÇÇ : Discrete J ‚•§ C}
    [PreservesColimit X‚ÇÅ (tensorLeft A)] [PreservesColimit X‚ÇÅ (tensorLeft B)]
    [PreservesColimit X‚ÇÇ (tensorLeft A)]


set_option maxHeartbeats 800000 in
open Limits in
noncomputable
def c‚ÇÅ'_isColimit
    {c‚ÇÅ : Cocone X‚ÇÅ} (c‚ÇÇ : Cocone X‚ÇÇ)
    (h‚ÇÅ : IsColimit c‚ÇÅ) (h‚ÇÇ : IsColimit c‚ÇÇ) (f' : X‚ÇÅ ‚ü∂ X‚ÇÇ) : IsColimit (c‚ÇÅ' f c‚ÇÇ h‚ÇÅ f') where
  desc s := by
    dsimp [c‚ÇÅ']
    let s‚ÇÅ := Cocone.mk s.pt (inlDescFunctor f' f ‚â´ s.Œπ)
    let s‚ÇÇ := Cocone.mk s.pt (inrDescFunctor f' f ‚â´ s.Œπ)
    let hs‚ÇÅ := (isColimitOfPreserves (tensorLeft B) h‚ÇÅ)
    let hs‚ÇÇ := (isColimitOfPreserves (tensorLeft A) h‚ÇÇ)
    let hs‚ÇÅ' := (isColimitOfPreserves (tensorLeft A) h‚ÇÅ)
    apply pushout.desc (hs‚ÇÅ.desc s‚ÇÅ) (hs‚ÇÇ.desc s‚ÇÇ)
    apply hs‚ÇÅ'.hom_ext
    intro j
    let hs‚ÇÅ_fac := hs‚ÇÅ.fac s‚ÇÅ j
    let hs‚ÇÇ_fac := hs‚ÇÇ.fac s‚ÇÇ j
    simp [s‚ÇÅ, s‚ÇÇ, hs‚ÇÅ, hs‚ÇÇ] at hs‚ÇÅ_fac hs‚ÇÇ_fac ‚ä¢
    rw [whisker_exchange_assoc, ‚Üê MonoidalCategory.whiskerLeft_comp_assoc, hs‚ÇÅ_fac]
    simp [hs‚ÇÇ_fac, pushout.condition_assoc]
  fac s j := by
    simp [c‚ÇÅ']
    apply pushout.hom_ext
    ¬∑ simp
      exact (isColimitOfPreserves (tensorLeft _) h‚ÇÅ).fac { pt := s.pt, Œπ := inlDescFunctor f' f ‚â´ s.Œπ } j
    ¬∑ let s‚ÇÇ := Cocone.mk s.pt (inrDescFunctor f' f ‚â´ s.Œπ)
      let hs‚ÇÇ := (isColimitOfPreserves (tensorLeft A) h‚ÇÇ)
      let hs‚ÇÇ_fac := hs‚ÇÇ.fac s‚ÇÇ j
      simp [s‚ÇÇ] at hs‚ÇÇ_fac ‚ä¢
      rw [hs‚ÇÇ_fac]
  uniq s m hj := by
    simp
    apply pushout.hom_ext
    ¬∑ let s‚ÇÅ := Cocone.mk s.pt (inlDescFunctor f' f ‚â´ s.Œπ)
      let hs‚ÇÅ := (isColimitOfPreserves (tensorLeft B) h‚ÇÅ)
      apply hs‚ÇÅ.hom_ext
      intro j
      simp
      have := hs‚ÇÅ.fac s‚ÇÅ j
      dsimp [s‚ÇÅ, c‚ÇÅ'] at this
      rw [this, ‚Üê hj j]
      simp [c‚ÇÅ']
    ¬∑ let s‚ÇÇ := Cocone.mk s.pt (inrDescFunctor f' f ‚â´ s.Œπ)
      let hs‚ÇÇ := (isColimitOfPreserves (tensorLeft A) h‚ÇÇ)
      apply hs‚ÇÇ.hom_ext
      intro j
      simp
      have := hs‚ÇÇ.fac s‚ÇÇ j
      dsimp [s‚ÇÇ] at this
      rw [this, ‚Üê hj j]
      simp [c‚ÇÅ']

end Coproduct

end CategoryTheory.PushoutProduct
