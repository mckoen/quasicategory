import Quasicategory.PushoutProduct.Basic
import Mathlib.CategoryTheory.MorphismProperty.TransfiniteComposition
import Mathlib.CategoryTheory.Closed.FunctorToTypes
import Mathlib.CategoryTheory.SmallObject.Iteration.Basic

universe w v v' u u'

open CategoryTheory MonoidalCategory Simplicial SSet Limits

namespace CategoryTheory.PushoutProduct

variable {X Y A B : SSet} (f : A ‚ü∂ B) (g : X ‚ü∂ Y)

variable {J : Type w} [LinearOrder J] [SuccOrder J] [OrderBot J] [WellFoundedLT J]
  (F : J ‚•§ SSet) [F.IsWellOrderContinuous] (c : Cocone F) (hc : IsColimit c)


-- def natTransLeftFunctor : D ‚•§ C := (NatTrans.arrowFunctor h) ‚ãô leftFunctor g ‚ãô Arrow.leftFunc
@[simps!]
noncomputable
abbrev F' : J ‚•§ SSet := natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ

instance ll {S : SSet} : Functor.IsLeftAdjoint (tensorLeft S) where
  exists_rightAdjoint := ‚ü®FunctorToTypes.rightAdj S, ‚ü®FunctorToTypes.adj S‚ü©‚ü©

instance rr {S : SSet} : PreservesColimitsOfSize (tensorLeft S) :=
  Functor.instPreservesColimitsOfSizeOfIsLeftAdjoint _

noncomputable
instance {S : SSet} : PreservesColimitsOfSize (tensorRight S) := by
  apply preservesColimits_of_natIso (BraidedCategory.tensorLeftIsoTensorRight S)

variable {m : J}

@[simp]
def _root_.CategoryTheory.Functor.succ : J ‚•§ SSet :=
  Order.succ_mono.functor ‚ãô F

@[simp]
def temp_id_to_succ : (Functor.id J) ‚ü∂ Order.succ_mono.functor where
  app j := homOfLE (Order.le_succ j)

@[simp]
def _root_.CategoryTheory.Functor.succNatTrans : F ‚ü∂ Order.succ_mono.functor ‚ãô F :=
  temp_id_to_succ ‚ó´ (ùüô F)

@[simp]
noncomputable
abbrev P := natTransLeftFunctor F.succNatTrans Œõ[2, 1].Œπ

variable {G} (h : F ‚ü∂ G)

@[simp]
def natTransSucc : Order.succ_mono.functor ‚ãô F ‚ü∂ Order.succ_mono.functor ‚ãô G :=
  whiskerLeft Order.succ_mono.functor h

/-
@[simp]
def œÜaux : (F.succ) ‚ü∂ (Functor.const J).obj c.pt := natTransSucc F c.Œπ

omit [OrderBot J] [WellFoundedLT J] [F.IsWellOrderContinuous] in
@[simp]
lemma œÜaux' : (F.succNatTrans) ‚â´ (natTransSucc F c.Œπ) = c.Œπ := by
  ext
  simp

@[simp]
noncomputable
def œÜ_1 : P F ‚ü∂ natTransLeftFunctor (F.succNatTrans ‚â´ (natTransSucc F c.Œπ)) ((horn 2 1).Œπ) :=
  PushoutProduct.natTransLeftFunctor_comp (F.succNatTrans) ((horn 2 1).Œπ) (natTransSucc F c.Œπ)

@[simp]
noncomputable
def œÜ_2 : natTransLeftFunctor (F.succNatTrans ‚â´ (natTransSucc F c.Œπ)) ((horn 2 1).Œπ) ‚ü∂ (F' F c) :=
  eqToHom (by rw [œÜaux'])

@[simp]
noncomputable
def œÜ : (P F) ‚ü∂ (F' F c) :=
  PushoutProduct.natTransLeftFunctor_comp (F.succNatTrans) ((horn 2 1).Œπ) (natTransSucc F c.Œπ) ‚â´
    eqToHom (by rw [œÜaux'])
-/

omit [OrderBot J] [WellFoundedLT J] [F.IsWellOrderContinuous] in
lemma cocone_Œπ_facs : F.succNatTrans ‚â´ (whiskerLeft Order.succ_mono.functor c.Œπ) = c.Œπ := by
  ext : 2
  simp

@[simp]
noncomputable
def intermediateeqhom : (natTransLeftFunctor (F.succNatTrans ‚â´ (whiskerLeft Order.succ_mono.functor c.Œπ)) Œõ[2, 1].Œπ) ‚ü∂ (natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ) :=
  eqToHom (by rw [cocone_Œπ_facs])

@[simp]
noncomputable
def œÜ_j (j) : (natTransLeftFunctor F.succNatTrans Œõ[2, 1].Œπ).obj j ‚ü∂ (natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ).obj j := by
  apply pushout.desc
    (pushout.inl _ _)
    ((Œõ[2, 1] : SSet) ‚óÅ c.Œπ.app (Order.succ j) ‚â´ pushout.inr _ _)
  simp [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, c.Œπ.naturality, pushout.condition]
  /-
  natTransLeftFunctor_comp F.succNatTrans Œõ[2, 1].Œπ (natTransSucc F c.Œπ) ‚â´ (intermediateeqhom _ _)
  -/

--natTransLeftFunctor_comp

--set_option maxHeartbeats 300000 in
@[simp]
noncomputable
def œÜ : (natTransLeftFunctor F.succNatTrans Œõ[2, 1].Œπ) ‚ü∂ (natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ) :=
  natTransLeftFunctor_comp F.succNatTrans Œõ[2, 1].Œπ (whiskerLeft Order.succ_mono.functor c.Œπ) ‚â´ intermediateeqhom _ _

/-
where
  app := œÜ_j F c
  naturality k j f := by
    apply pushout.hom_ext
    ¬∑ simp only [Fin.isValue, Arrow.mk_right, Functor.id_obj, Functor.succ, homOfLE_leOfHom,
      Functor.succNatTrans, NatTrans.arrowFunctor_obj_left, natTransLeftFunctor_obj,
      Functor.const_obj_obj, Arrow.mk_left, NatTrans.arrowFunctor_obj_right, Arrow.mk_hom,
      NatTrans.arrowFunctor_obj_hom, natTransLeftFunctor_map, œÜ_j, pt,
      colimit.Œπ_desc_assoc, span_left, PushoutCocone.mk_pt, PushoutCocone.mk_Œπ_app, Category.assoc,
      colimit.Œπ_desc, Functor.const_obj_map, MonoidalCategory.whiskerLeft_id, Category.id_comp]
    ¬∑ simp [‚Üê MonoidalCategory.whiskerLeft_comp_assoc, c.Œπ.naturality, pushout.condition]
-/

omit [OrderBot J] [WellFoundedLT J] [F.IsWellOrderContinuous] in
lemma newSqComm {j} :
    (œÜ F c).app j ‚â´ ((natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ).map (homOfLE (Order.le_succ j))) =
    (Œõ[2, 1].Œπ ‚ñ° (F.map (homOfLE (Order.le_succ j)))) ‚â´
      pushout.inl _ _ := by
  apply pushout.hom_ext
  ¬∑ sorry
  ¬∑ sorry

noncomputable
def newPushoutCocone (j : J) : PushoutCocone
    ((œÜ F c).app j) (Œõ[2, 1].Œπ ‚ñ° (F.map (homOfLE (Order.le_succ j)))) :=
  PushoutCocone.mk _ _ (newSqComm F c)

@[simp]
noncomputable
def newPushoutIsColimit_desc {j} (s : PushoutCocone ((œÜ F c).app j) (Œõ[2, 1].Œπ ‚ñ° (F.map (homOfLE (Order.le_succ j))))) :
    (natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ).obj (Order.succ j) ‚ü∂ s.pt :=
  pushout.desc s.inr ((pushout.inr _ _) ‚â´ s.inl) (by sorry)-- simpa using ((pushout.inr _ _) ‚â´= s.condition).symm)

omit [OrderBot J] [WellFoundedLT J] [F.IsWellOrderContinuous] in
lemma newPushoutIsColimit_fac_left {j} (s : PushoutCocone ((œÜ F c).app j) (Œõ[2, 1].Œπ ‚ñ° F.map (homOfLE (Order.le_succ j)))) :
    (F' F c).map (homOfLE (Order.le_succ j)) ‚â´ newPushoutIsColimit_desc F c s = s.inl := by
  dsimp only [F', newPushoutIsColimit_desc, NatTrans.arrowFunctor, Arrow.mk, natTransLeftFunctor,
    Functor.comp_map, Arrow.homMk', leftFunctor, leftFunctor_map, Arrow.leftFunc_map,
    leftFunctor_map_left, Functor.id_obj, Functor.const, pushout.map]
  simp_rw [MonoidalCategory.whiskerLeft_id]
  sorry
  apply pushout.hom_ext
  ¬∑ sorry
    /-
    simpa only [Functor.succ, homOfLE_leOfHom, Functor.succNatTrans, Fin.isValue, pt,
    pushoutProduct, œÜ, natTransLeftFunctor, NatTrans.arrowFunctor, Arrow.mk, Functor.const_obj_obj,
    Functor.const_obj_map, œÜ_j, Functor.id_obj, pushout.inl, pushout.inr,
    PushoutCocone.Œπ_app_right, PushoutCocone.Œπ_app_left, pushout.inl_desc_assoc, Category.assoc,
    pushout.inl_desc] using ((pushout.inl _ _) ‚â´= s.condition).symm
    -/
  ¬∑ sorry --rw [pushout.inr_desc_assoc, pushout.inr_desc]

noncomputable
def newPushoutIsColimit {j} : IsColimit (newPushoutCocone F c j) := by
  refine PushoutCocone.IsColimit.mk _ (newPushoutIsColimit_desc F c) ?_ ?_ ?_
  ¬∑ exact newPushoutIsColimit_fac_left _ _
  ¬∑ intro
    simp only [newPushoutIsColimit_desc, pushout.inl_desc]
  ¬∑ intro _ _ h h'
    apply pushout.hom_ext
    ¬∑ dsimp only [Functor.id_obj, Arrow.mk, NatTrans.arrowFunctor, newPushoutIsColimit_desc]
      rw [pushout.inl_desc, ‚Üê h']
      dsimp only [NatTrans.arrowFunctor, Arrow.mk, Functor.id_obj]
    ¬∑ dsimp only [Functor.id_obj, Arrow.mk, NatTrans.arrowFunctor, newPushoutIsColimit_desc]
      rw [pushout.inr_desc, ‚Üê h]
      simp only [Fin.isValue, Functor.const_obj_obj, Functor.succ, homOfLE_leOfHom,
        Functor.succNatTrans, natTransLeftFunctor_obj, pushoutProduct, pt,
        natTransLeftFunctor_map, Functor.const_obj_map, MonoidalCategory.whiskerLeft_id,
        Category.id_comp, colimit.Œπ_desc_assoc, span_right, PushoutCocone.mk_pt,
        PushoutCocone.mk_Œπ_app]

def newPushoutIsPushout (j : J) : CategoryTheory.IsPushout
  ((œÜ F c).app j)
  (Œõ[2, 1].Œπ ‚ñ° F.map (homOfLE (Order.le_succ j)))
  ((natTransLeftFunctor c.Œπ Œõ[2, 1].Œπ).map (homOfLE (Order.le_succ j)))
  (pushout.inl _ _)
  := IsPushout.of_isColimit (newPushoutIsColimit F c (j := j))

end CategoryTheory.PushoutProduct
