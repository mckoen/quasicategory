import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.Sites.Subsheaf
import Quasicategory.Terminal
import Quasicategory.KInjective.WellOrderContinuous

open CategoryTheory GrothendieckTopology SimplicialObject Simplicial

namespace SSet

abbrev SimplicialSubset (S : SSet) := Subpresheaf S

namespace SimplicialSubset

variable (A B : SimplicialSubset S)

def empty (S : SSet) : SimplicialSubset S where
  obj _ := ‚àÖ
  map _ _ x := x

def top (S : SSet) : SimplicialSubset S where
  obj _ := Set.univ
  map _ _ x := x

--#synth Mono A.Œπ

def union : SimplicialSubset S where
  obj n := A.obj n ‚äî B.obj n
  map i _ h := by
    cases h with
    | inl h =>
      left
      apply A.map i h
    | inr h =>
      right
      apply B.map i h

def inter : SimplicialSubset S where
  obj n := A.obj n ‚äì B.obj n
  map i _ h := ‚ü®(A.map i) h.1, (B.map i) h.2‚ü©

instance : Lattice (SimplicialSubset S) where
  sup := union
  le A B := ‚àÄ n, A.obj n ‚â§ B.obj n
  le_refl := le_refl
  le_trans _ _ _ := le_trans
  le_antisymm _ _ := le_antisymm
  le_sup_left _ _ _ := le_sup_left
  le_sup_right _ _ _ := le_sup_right
  sup_le _ _ _ h‚ÇÅ h‚ÇÇ n _ h := by
    cases h with
    | inl h => exact h‚ÇÅ n h
    | inr h => exact h‚ÇÇ n h
  inf := inter
  inf_le_left _ _ _ := inf_le_left
  inf_le_right _ _ _:= inf_le_right
  le_inf _ _ _ h‚ÇÅ h‚ÇÇ n := le_inf (h‚ÇÅ n) (h‚ÇÇ n)

noncomputable
def mono_iso (f : S ‚ü∂ T) [h : Mono f] : S ‚âÖ (imagePresheaf f).toPresheaf where
  hom := {
    app := fun n x ‚Ü¶ ‚ü®f.app n x, by simp‚ü©
    naturality := by
      intros n m g
      ext x
      simp only [imagePresheaf, Subpresheaf.toPresheaf, types_comp_apply, Subtype.mk.injEq]
      exact FunctorToTypes.naturality S T f g x }
  inv := {
    app := fun n ‚ü®x, hx‚ü© ‚Ü¶ Exists.choose hx
    naturality := fun n m g ‚Ü¶ by
      ext x
      apply (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 h) m)
      dsimp only [types_comp_apply, Subpresheaf.toPresheaf_obj, imagePresheaf_obj,
        Subpresheaf.toPresheaf_map_coe]
      let a := ((imagePresheaf f).toPresheaf.map g x).property
      rw [a.choose_spec, ‚Üê types_comp_apply (S.map g) (f.app m),
        congr_fun (f.naturality g) x.property.choose, types_comp_apply, x.property.choose_spec]
      dsimp only [imagePresheaf_obj, Subpresheaf.toPresheaf_map_coe] }
  hom_inv_id := by
    ext n x
    apply (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 h) n)
    exact Exists.choose_spec (Set.mem_range_self x)
  inv_hom_id := by
    ext n x
    dsimp at x
    change
        ‚ü®f.app n (Exists.choose x.2), Set.mem_range_self (Exists.choose x.property)‚ü© = x
    congr
    exact Exists.choose_spec x.2

end SimplicialSubset

variable {S : SSet}

open SimplexCategory

-- how to prove things are degenerate?
inductive IsDegenerate : {n : ‚Ñï} ‚Üí (s : S _[n]) ‚Üí Prop
  | mk (n : ‚Ñï) (x : S _[n]) (i : Fin (n + 1)) : IsDegenerate (S.œÉ i x)

abbrev Nondegenerate {S : SSet} (s : S _[n]) : Prop := ¬¨ IsDegenerate s

-- `0013`
lemma image_degen_of_degen (f : S ‚ü∂ T) (s : S _[n]) (h : IsDegenerate s) :
    IsDegenerate (f.app _ s) := by
  induction h with
  | mk m s i =>
  sorry
  /-
  exists_simplex := by
    obtain ‚ü®x, hx‚ü© := h.exists_simplex
    use f.app _ x
    rw [hx]
    exact congr_fun (f.naturality (SimplexCategory.œÉ n).op) x
  -/

-- `0013`
lemma degen_of_image_degen_mono (f : S ‚ü∂ T) [hf : Mono f]
    (s : S _[n]) (h : IsDegenerate (f.app (.op [n]) s)) :
    IsDegenerate s := sorry
  /-
  exists_simplex := by
    obtain ‚ü®a, ha‚ü© := h.exists_simplex
    have := (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 hf) (Opposite.op [n + 1]))
    dsimp [œÉ] at ha ‚ä¢
    sorry
  -/

lemma _04ZN (f : S ‚ü∂ T) :
    (‚àÄ (n : ‚Ñï) (t : T _[n]) (ht : Nondegenerate t), t ‚àà Set.range (f.app _)) ‚Üí Epi f := sorry
  /-
  intro h
  rw [NatTrans.epi_iff_epi_app]
  intro m
  rw [epi_iff_surjective]
  intro Tm
  sorry
  -/

variable (S : SSet)

class dim_le (k : ‚Ñï) : Prop where
  condition : ‚àÄ (n : ‚Ñï) (s : S _[n]), k < n ‚Üí IsDegenerate s

/-
def hom_of_le (m k : ‚Ñï) (h : m ‚â§ k) :
    ([m] : SimplexCategory) ‚ü∂ [k] :=
  Hom.mk ‚ü®fun x ‚Ü¶ Fin.castLE (Nat.add_le_add_right h 1) x, fun _ _ h ‚Ü¶ h‚ü©
-/

-- want to somehow say the skeleton is empty for k < 0
def HasFactorization (k n : ‚Ñï) (s : S _[n]) : Prop :=
  ‚àÉ (m : ‚Ñï) (_ : m ‚â§ k) (œÑ : S _[m]) (f : Œî[n] ‚ü∂ Œî[m]),
    (S.yonedaEquiv [n]).symm s = f ‚â´ (S.yonedaEquiv [m]).symm œÑ

-- sk‚Çñ(S)‚Çô
def skeleton_subset (k n : ‚Ñï) : Set (S _[n]) :=
  { s : S _[n] | HasFactorization S k n s }

lemma _0016 (h : n ‚â§ k) : ‚ä§ ‚â§ skeleton_subset S k n :=
  fun s _ ‚Ü¶ ‚ü®n, h, s, ùüô _, by aesop‚ü©

lemma _0500 (n : ‚Ñï) (h : l ‚â§ k) : skeleton_subset S l n ‚â§ skeleton_subset S k n :=
  fun _ ‚ü®m, hm, œÑ, f, hf‚ü© ‚Ü¶ ‚ü®m, le_trans hm h, œÑ, f, hf‚ü©

def skeleton (k : ‚Ñï) : SimplicialSubset S where
  obj n := skeleton_subset S k (len n.unop)
  map := by
    intro n n' g s ‚ü®m, hm, œÑ, f, hf‚ü©
    refine ‚ü®m, hm, œÑ, standardSimplex.map g.unop ‚â´ f, ?_‚ü©
    rw [Category.assoc, ‚Üê hf]
    ext l x
    change S.map x.down.op (S.map g s) =
      S.map ((standardSimplex.map g.unop).app l x).down.op s
    simp [standardSimplex, uliftFunctor]

-- want to have Sk(-1, S) = ‚àÖ as bottom element
def Sk (k : ‚Ñï) : SSet := (S.skeleton k).toPresheaf

def Sk.Œπ (k : ‚Ñï) : S.Sk k ‚ü∂ S := (S.skeleton k).Œπ

/-- an n-simplex is degenerate iff it is in sk‚Çñ(S)‚Çô for some k < n. -/
lemma _0011 (s : S _[n]) : IsDegenerate s ‚Üî (‚àÉ (k : ‚Ñï) (_ : k < n), s ‚àà (S.skeleton k).obj (.op [n])) := by
  refine ‚ü®?_, ?_‚ü©
  ¬∑ intro h
    induction h with
    | mk m x i =>
    refine ‚ü®m, Nat.lt.base m, m, le_rfl, x, standardSimplex.map (SimplexCategory.œÉ i), (Equiv.symm_apply_eq (S.yonedaEquiv [m + 1])).mpr rfl‚ü©
  ¬∑ sorry

/-- a nondegenerate n-simplex is in sk‚Çñ(S)‚Çô iff n ‚â§ K (i.e., iff sk‚Çñ(S)‚Çô = S‚Çô) -/
lemma _0017 (s : S _[n]) (hs : Nondegenerate s) : s ‚àà (S.skeleton k).obj (.op [n]) ‚Üî n ‚â§ k := by
  refine ‚ü®?_, fun h ‚Ü¶ _0016 S h (Set.mem_univ s)‚ü©
  intro h
  by_contra h'
  apply hs
  rw [not_le] at h'
  rw [_0011]
  use k

-- the k-skeleton has dimension ‚â§ k
instance (k : ‚Ñï) : (S.Sk k).dim_le k where
  condition := by
    intro n ‚ü®s, hs‚ü© hk
    by_contra h
    have : Nondegenerate s := by
      sorry
    rw [_0017 S s this] at hs
    rw [‚Üê not_le] at hk
    exact hk hs

def skeletonIso (k : ‚Ñï) (hS : S.dim_le k) : SimplicialSubset.top S ‚âÖ (S.skeleton k) where
  hom := by
    refine ‚ü®‚ü®?_‚ü©‚ü©
    intro ‚ü®n‚ü© (s : S _[n.len]) _
    by_cases (IsDegenerate s)
    ¬∑ rename_i h
      sorry
    ¬∑ rename_i h
      apply (@_0017 S n.len k s h).2
      have := hS.condition n.len s
      rw [‚Üê not_imp_not] at this
      by_contra h'
      rw [not_le] at h'
      exact this h h'
  inv := LE.le.hom (fun _ _ _ ‚Ü¶ _root_.trivial)

def boundaryIsoSkeleton (n : ‚Ñï) : ‚àÇŒî[n] ‚âÖ (Œî[n].Sk (n - 1)) where
  hom := sorry
  inv := sorry

instance boundary_dim (k : ‚Ñï) : ‚àÇŒî[k].dim_le (k - 1) := sorry

def skeleton_hom_equiv {S T : SSet} (h : T.dim_le k) : (T ‚ü∂ S.Sk k) ‚âÉ (T ‚ü∂ S) where
  toFun f := f ‚â´ (S.skeleton k).Œπ
  invFun f := {
    app := fun n t ‚Ü¶ by
      sorry
  }
  left_inv := sorry
  right_inv := sorry

-- can also be shown using skeleton_hom_equiv
/-- every k simplex determines a map Œî[k] ‚ü∂ (S.Sk k) -/
def simplex_map {S : SSet} (s : S _[k]) : Œî[k] ‚ü∂ (S.Sk k) :=
  (yonedaEquiv _ _).symm (‚ü®s, _0016 S le_rfl (Set.mem_univ s)‚ü©)

/-- simplex_map induces ‚àÇŒî[k] ‚ü∂ (S.Sk (k - 1)) -/
def simplex_boundary_map  (s : S _[k]) : ‚àÇŒî[k] ‚ü∂ (S.Sk (k - 1)) :=
  (skeleton_hom_equiv (boundary_dim k)).symm ((boundaryInclusion k) ‚â´ (simplex_map s) ‚â´ (S.skeleton k).Œπ)

lemma _0014 (s : Œî[n] ‚ü∂ S) : ‚àÉ (Œ± : ([n] : SimplexCategory) ‚ü∂ [m]) (œÑ : Œî[m] ‚ü∂ S),
    Function.Surjective Œ±.toOrderHom ‚àß Nondegenerate (yonedaEquiv _ _ œÑ) ‚àß s = standardSimplex.map Œ± ‚â´ œÑ := sorry

/-
/-- every nondegenerate k simplex determines a map Œî[k] ‚ü∂ (S.Sk k) -/
def nd_simplex_map (s : S _[k]) (hs : Nondegenerate s) :
    Œî[k] ‚ü∂ (S.Sk k) := sorry
-/

/-
lemma _0018 : S.skeleton 0 = SimplicialSubset.empty S := by
  ext
  refine ‚ü®fun ‚ü®l, ‚ü®hl, _‚ü©‚ü© ‚Ü¶ by aesop, fun h ‚Ü¶ by exfalso; exact Set.not_mem_empty _ h‚ü©
-/

-- functor sending simplicial subsets to simplicial sets
@[simps]
def sset_functor : SimplicialSubset S ‚•§ SSet where
  obj := Subpresheaf.toPresheaf
  map f := Subpresheaf.homOfLe f.le

-- functor sending k to k-th skeleton (as subset)
@[simps]
def skeleton_functor : ‚Ñï ‚•§ SimplicialSubset S where
  obj k := S.skeleton k
  map f := ‚ü®‚ü®fun n ‚Ü¶ _0500 S n.unop.len f.le‚ü©‚ü©

-- functor sending k to k-th skeleton as a simplicial set
@[simps!]
def skeleton_functor' : ‚Ñï ‚•§ SSet := skeleton_functor S ‚ãô sset_functor S

-- the cone with pt S given by the skeletons of S
def skeleton_cocone : Limits.Cocone (skeleton_functor' S) where
  pt := S
  Œπ := { app := fun k ‚Ü¶ (S.skeleton k).Œπ }

-- functor sending k to union of B with k-th skeleton
def skeleton_union_functor (B : SimplicialSubset S) : ‚Ñï ‚•§ SimplicialSubset S where
  obj k := (S.skeleton k) ‚äî B
  map f := by
    refine ‚ü®‚ü®fun k Sk h ‚Ü¶ ?_‚ü©‚ü©
    cases h with
    | inl h => left; exact _0500 S k.unop.len f.le h
    | inr h => right; exact h

-- functor sending k to union of B with k-th skeleton as a simplicial set
def skeleton_union_functor' (B : SimplicialSubset S) : ‚Ñï ‚•§ SSet :=
  skeleton_union_functor S B ‚ãô sset_functor S

-- the cone with point S given by the unions of B with all the skeletons
def skeleton_union_cocone (B : SimplicialSubset S) : Limits.Cocone (skeleton_union_functor' S B) where
  pt := S
  Œπ := { app := fun k ‚Ü¶ (S.skeleton k ‚äî B).Œπ }

-- Subpresheaf.Œπ (empty S)
-- lemma test : (sset_cocone S).Œπ.app ‚ä• = Subpresheaf.Œπ (empty S)
-- Subpresheaf.ext

@[ext]
lemma dumbext (n : SimplexCategory·µí·µñ) (x y : ((skeleton_functor S).obj (n.unop.len + 1)).obj n) : x.1 = y.1 ‚Üí x = y := by
  dsimp [skeleton_functor, sset_functor] at x y
  aesop

@[simps!]
def aux1 (n : SimplexCategory·µí·µñ) (s : S.obj n) :
    (S.skeleton (n.unop.len + 1)).obj n := .mk _ (_0016 S (Nat.le_succ _) (Set.mem_univ s))

-- the skeleton cocone is a colimit
def skeleton_cocone_iscolimit : Limits.IsColimit (skeleton_cocone S) where
  desc c := {
    app := fun n s ‚Ü¶ (c.Œπ.app (n.unop.len + 1)).app n (aux1 S n s)
    naturality := by
      intro k m f
      ext (x : S.obj k)
      simp [skeleton_cocone]
      sorry }
  fac := by
    intro c j
    ext k x
    dsimp
    change ((c.Œπ.app ((Opposite.unop k).len + 1)).app k (aux1 S k ((((skeleton_cocone S).Œπ.app j).app k x) ))) = _
    simp [skeleton_cocone]
    sorry
  uniq := sorry

-- the skeleton union cocone is a colimit
def skeleton_union_cocone_iscolimit (B : SimplicialSubset S) : Limits.IsColimit (skeleton_union_cocone S B) where
  desc c := {
    app := fun n s ‚Ü¶ (c.Œπ.app (n.unop.len + 1)).app n ‚ü®s, by left; exact ‚ü®n.unop.len, Nat.le_succ _, s, ùüô _, rfl‚ü©‚ü©
    naturality := by
      intro k m f
      ext (x : S.obj k)
      dsimp [skeleton_union_cocone]
      sorry }
  fac := sorry
  uniq := sorry

/-
class IsStableUnderTransfiniteCompositionOfShape (Œ≤ : Type*) [LinearOrder Œ≤] [IsWellOrder Œ≤ (¬∑ < ¬∑)] [OrderBot Œ≤] : Prop where
  condition (F : Œ≤ ‚•§ C) [F.WellOrderContinuous] (hF : ‚àÄ (a : Œ≤) (_ : a < wellOrderSucc a), W (F.map (homOfLE (self_le_wellOrderSucc a))))
    (c : Cocone F) (hc : IsColimit c) : W (c.Œπ.app ‚ä•)

def temp {S : SSet} {n : SimplexCategory·µí·µñ} (s : (cocone S).pt.obj n) :
    ((sset_functor S).obj (Opposite.unop n).len).obj n := ‚ü®s, ‚ü®_, le_rfl, s, ùüô _, rfl‚ü©‚ü©
-/

-- if X ‚äÜ S, then we should have S = ‚à™ X(k), where X(k) = X ‚à™ Sk‚Çñ(S)
-- so if i : A ‚Üí B is a monomorphism, then A ‚âÖ im(i) ‚äÜ B, so B = ‚à™ im(i)(k)

end SSet
