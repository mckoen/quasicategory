import Mathlib.AlgebraicTopology.SimplicialSet
import Mathlib.CategoryTheory.Sites.Subsheaf
import Quasicategory.Terminal
import Quasicategory.KInjective.WellOrderContinuous

open CategoryTheory GrothendieckTopology SimplicialObject Simplicial

namespace SSet

variable {S T : SSet} {n : ‚Ñï}

structure IsDegenerate (s : S _[n + 1]) : Prop where
  exists_simplex : ‚àÉ (x : S _[n]), s = (S.œÉ n) x

abbrev Nondegenerate (s : S _[n + 1]) : Prop := ¬¨ IsDegenerate s

-- `0013`
lemma image_degen_of_degen (f : S ‚ü∂ T) (s : S _[n + 1]) (h : IsDegenerate s) :
    IsDegenerate (f.app _ s) where
  exists_simplex := by
    obtain ‚ü®x, hx‚ü© := h.exists_simplex
    use f.app _ x
    rw [hx]
    exact congr_fun (f.naturality (SimplexCategory.œÉ n).op) x

-- `0013`
lemma degen_of_image_degen_mono (f : S ‚ü∂ T) [hf : Mono f]
    (s : S _[n + 1]) (h : IsDegenerate (f.app (.op [n + 1]) s)) :
    IsDegenerate s where
  exists_simplex := by
    obtain ‚ü®a, ha‚ü© := h.exists_simplex
    have := (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 hf) (Opposite.op [n + 1]))
    dsimp [œÉ] at ha ‚ä¢
    sorry

lemma _04ZN (f : S ‚ü∂ T) :
    (‚àÄ (n : ‚Ñï) (t : T _[n + 1]) (ht : Nondegenerate t), t ‚àà Set.range (f.app _)) ‚Üí Epi f := by
  intro h
  rw [NatTrans.epi_iff_epi_app]
  intro m
  rw [epi_iff_surjective]
  intro Tm
  sorry

abbrev SimplicialSubset (S : SSet) := Subpresheaf S

namespace SimplicialSubset

variable (A B : SimplicialSubset S)

def empty (S : SSet) : SimplicialSubset S where
  obj _ := ‚àÖ
  map _ _ x := x

--#synth Mono A.Œπ

def union : SimplicialSubset S where
  obj n := A.obj n ‚äî B.obj n
  map i _ h := by
    cases h with
    | inl h =>
      left
      apply A.map i h
    | inr h =>
      right
      apply B.map i h

def inter : SimplicialSubset S where
  obj n := A.obj n ‚äì B.obj n
  map i _ h := ‚ü®(A.map i) h.1, (B.map i) h.2‚ü©

instance : Lattice (SimplicialSubset S) where
  sup := union
  le A B := ‚àÄ n, A.obj n ‚â§ B.obj n
  le_refl := le_refl
  le_trans _ _ _ := le_trans
  le_antisymm _ _ := le_antisymm
  le_sup_left _ _ _ := le_sup_left
  le_sup_right _ _ _ := le_sup_right
  sup_le _ _ _ h‚ÇÅ h‚ÇÇ n _ h := by
    cases h with
    | inl h => exact h‚ÇÅ n h
    | inr h => exact h‚ÇÇ n h
  inf := inter
  inf_le_left _ _ _ := inf_le_left
  inf_le_right _ _ _:= inf_le_right
  le_inf _ _ _ h‚ÇÅ h‚ÇÇ n := le_inf (h‚ÇÅ n) (h‚ÇÇ n)

noncomputable
def mono_iso (f : S ‚ü∂ T) [h : Mono f] : S ‚âÖ (imagePresheaf f).toPresheaf where
  hom := {
    app := fun n x ‚Ü¶ ‚ü®f.app n x, by simp‚ü©
    naturality := by
      intros n m g
      ext x
      simp only [imagePresheaf, Subpresheaf.toPresheaf, types_comp_apply, Subtype.mk.injEq]
      exact FunctorToTypes.naturality S T f g x }
  inv := {
    app := fun n ‚ü®x, hx‚ü© ‚Ü¶ Exists.choose hx
    naturality := fun n m g ‚Ü¶ by
      ext x
      apply (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 h) m)
      dsimp only [types_comp_apply, Subpresheaf.toPresheaf_obj, imagePresheaf_obj,
        Subpresheaf.toPresheaf_map_coe]
      let a := ((imagePresheaf f).toPresheaf.map g x).property
      rw [a.choose_spec, ‚Üê types_comp_apply (S.map g) (f.app m),
        congr_fun (f.naturality g) x.property.choose, types_comp_apply, x.property.choose_spec]
      dsimp only [imagePresheaf_obj, Subpresheaf.toPresheaf_map_coe] }
  hom_inv_id := by
    ext n x
    apply (mono_iff_injective _).1 (((NatTrans.mono_iff_mono_app _ _).1 h) n)
    exact Exists.choose_spec (Set.mem_range_self x)
  inv_hom_id := by
    ext n x
    dsimp at x
    change
        ‚ü®f.app n (Exists.choose x.2), Set.mem_range_self (Exists.choose x.property)‚ü© = x
    congr
    exact Exists.choose_spec x.2

variable (S : SSet)

open SimplexCategory

def hom_of_le (m k : ‚Ñï) (h : m ‚â§ k) :
    ([m] : SimplexCategory) ‚ü∂ [k] :=
  Hom.mk ‚ü®fun x ‚Ü¶ Fin.castLE (Nat.add_le_add_right h 1) x, fun _ _ h ‚Ü¶ h‚ü©

-- m < k so that we get empty skeleton for k = 0
def HasFactorization (k n : ‚Ñï) (s : S _[n]) : Prop :=
  ‚àÉ (m : ‚Ñï) (_ : m < k) (œÑ : S _[m]) (f : Œî[n] ‚ü∂ Œî[m]),
    (S.yonedaEquiv _).symm s = f ‚â´ ((yonedaEquiv S _).symm œÑ)

-- sk‚Çñ(S)‚Çô
def skeleton_subset (k n : ‚Ñï) : Set (S _[n]) :=
  { s : S _[n] | HasFactorization S k n s }

lemma _0016 (h : n < k) : ‚ä§ ‚äÜ skeleton_subset S k n :=
    fun s _ ‚Ü¶ ‚ü®n, h, s, ùüô _, by aesop‚ü©

lemma _0500 (h : l ‚â§ k) : skeleton_subset S l n ‚äÜ skeleton_subset S k n :=
    fun _ ‚ü®m, hm, œÑ, f, hf‚ü© ‚Ü¶ ‚ü®m, le_trans hm h, œÑ, f, hf‚ü©

def skeleton (k : ‚Ñï) : SimplicialSubset S where
  obj n := skeleton_subset S k (len n.unop)
  map := by
    intro n n' g s ‚ü®m, hm, œÑ, f, hf‚ü©
    refine ‚ü®m, hm, œÑ, standardSimplex.map g.unop ‚â´ f, ?_‚ü©
    rw [Category.assoc, ‚Üê hf]
    ext l x
    change S.map x.down.op (S.map g s) =
      S.map ((standardSimplex.map g.unop).app l x).down.op s
    simp [standardSimplex, uliftFunctor]

-- want to have Sk(-1, S) = ‚àÖ as bottom element
abbrev Sk (k : ‚Ñï) (S : SSet) : SSet := (skeleton S k).toPresheaf

lemma _0018 (h : k < 1) : Sk k S = SSet.empty := by
  sorry

def subset_functor : ‚Ñï ‚•§ SimplicialSubset S where
  obj k := skeleton S k
  map f := ‚ü®‚ü®fun n ‚Ü¶ @_0500 n.unop.len S _ _ f.le‚ü©‚ü©

def sset_functor' : SimplicialSubset S ‚•§ SSet where
  obj := Subpresheaf.toPresheaf
  map f := Subpresheaf.homOfLe f.le

def sset_functor : ‚Ñï ‚•§ SSet := subset_functor S ‚ãô sset_functor' S

def sset_cocone : Limits.Cocone (sset_functor S) where
  pt := S
  Œπ := { app := fun k ‚Ü¶ (skeleton S k).Œπ }

-- Subpresheaf.Œπ (empty S)
-- lemma test : (sset_cocone S).Œπ.app ‚ä• = Subpresheaf.Œπ (empty S)

def iscolimit : Limits.IsColimit (sset_cocone S) where
  desc c := {
    app := fun n s ‚Ü¶ (c.Œπ.app (n.unop.len + 1)).app n ‚ü®s, ‚ü®n.unop.len, Nat.lt.base _, s, ùüô _, rfl‚ü©‚ü©
    naturality := by
      intro k m f
      ext (x : S.obj k)
      simp [sset_cocone]
      sorry }
  fac := sorry
  uniq := sorry

instance sset_functor.WellOrderContinuous : Functor.WellOrderContinuous (sset_functor S) where
  nonempty_isColimit Œ± h := ‚ü®{
    desc := fun c ‚Ü¶ {
      app := sorry }
  }‚ü©
/-
class IsStableUnderTransfiniteCompositionOfShape (Œ≤ : Type*) [LinearOrder Œ≤] [IsWellOrder Œ≤ (¬∑ < ¬∑)] [OrderBot Œ≤] : Prop where
  condition (F : Œ≤ ‚•§ C) [F.WellOrderContinuous] (hF : ‚àÄ (a : Œ≤) (_ : a < wellOrderSucc a), W (F.map (homOfLE (self_le_wellOrderSucc a))))
    (c : Cocone F) (hc : IsColimit c) : W (c.Œπ.app ‚ä•)

def temp {S : SSet} {n : SimplexCategory·µí·µñ} (s : (cocone S).pt.obj n) :
    ((sset_functor S).obj (Opposite.unop n).len).obj n := ‚ü®s, ‚ü®_, le_rfl, s, ùüô _, rfl‚ü©‚ü©
-/

-- if X ‚äÜ S, then we should have S = ‚à™ X(k), where X(k) = X ‚à™ Sk‚Çñ(S)
-- so if i : A ‚Üí B is a monomorphism, then A ‚âÖ im(i) ‚äÜ B, so B = ‚à™ im(i)(k)

end SimplicialSubset

end SSet
